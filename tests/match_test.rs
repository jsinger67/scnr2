/// This file contains a hopefully increasing number of match tests to verify the correctness of the
/// scanner.
///
/// Some tests are based on the https://github.com/kkos/oniguruma/blob/master/test/test_utf8.c file
/// from the Oniguruma project.
/// Copyright (c) 2002-2019 K.Kosako kkosako0@gmail.com All rights reserved.
use scnr2::scanner;

fn format_matches(expected: &[scnr2::Match], input: &str) -> String {
    format!(
        "[{}]",
        expected
            .iter()
            .map(|m| format!(
                "(\"{}\", {}, {})",
                &input[m.span.start..m.span.end],
                m.span.start,
                m.span.end
            ))
            .collect::<Vec<_>>()
            .join(", ")
    )
}

/// To help type inference in the macro
fn format_expected_matches(expected: &[(&str, usize, usize)]) -> String {
    format!("{expected:?}")
}

macro_rules! scan_test {
    ($test_name:ident, $module:ident, $scanner:ident, $pattern:expr, $input:expr, $expected:expr, $test_num:expr) => {
        scanner! {
            $scanner {
                mode M {
                    token $pattern => 0;
                }
            }
        }
        #[test]
        fn $test_name() {
            use $module::$scanner as S;
            let scanner = S::new();
            let matches = scanner.find_matches($input, 0).collect::<Vec<_>>();
            const EXPECTED_MATCHES: &[(&str, usize, usize)] = $expected;
            assert_eq!(
                matches.len(),
                EXPECTED_MATCHES.len(),
                "{}: Unexpected match count exp: {:?}, act: {:?}",
                $test_num,
                format_expected_matches(&EXPECTED_MATCHES),
                format_matches(&matches, $input)
            );
            for (i, ma) in EXPECTED_MATCHES.iter().enumerate() {
                assert_eq!(
                    matches[i].span.start, ma.1,
                    concat!($test_num, ": Match start does not match")
                );
                assert_eq!(
                    matches[i].span.end, ma.2,
                    concat!($test_num, ": Match end does not match")
                );
                assert_eq!(
                    &($input)[ma.1..ma.2],
                    ma.0,
                    concat!($test_num, ": Matched substring does not match expected")
                );
            }
        }
    };
}

macro_rules! regex_error {
    ($test_name:ident, $pattern:expr, $error_message:expr, $test_num:expr) => {
        #[test]
        fn $test_name() {
            use scnr2_generate::ids::TerminalID;
            use scnr2_generate::nfa::Nfa;
            use scnr2_generate::pattern::Pattern;

            let pattern = Pattern::new($pattern.to_string(), TerminalID::new(0));
            let result = Nfa::build(&pattern);

            assert!(
                result.is_err(),
                "{}: Expected error but got success",
                $test_num
            );
            if let Err(err) = result {
                assert!(
                    err.to_string().contains($error_message),
                    "{}: Error message does not match. Expected to contain: '{}', Actual: '{}'",
                    $test_num,
                    $error_message,
                    err
                );
            }
        }
    };
}

// -------------------------------------------------------------------------
// x2("", "", 0, 0); // Test 0
scan_test!(case_0, s0, S0, r#""#, "", &[], 0);

// -------------------------------------------------------------------------
// x2("^", "", 0, 0); // Test 1
regex_error!(case_1, "^", r#"StartLine Look(Start)"#, 1);

// -------------------------------------------------------------------------
// x2("^a", "\na", 1, 2); // Test 2
regex_error!(case_2, "^a", r#"StartLine Look(Start)"#, 2);

// -------------------------------------------------------------------------
// x2("$", "", 0, 0); // Test 3
regex_error!(case_3, "$", r#"EndLine Look(End)"#, 3);

// -------------------------------------------------------------------------
// x2("$\\O", "bb\n", 2, 3); // Test 4
regex_error!(case_4, "$\\O", r#"unrecognized escape sequence"#, 4);

// -------------------------------------------------------------------------
// x2("\\G", "", 0, 0); // Test 5
regex_error!(case_5, "\\G", r#"unrecognized escape sequence"#, 5);

// -------------------------------------------------------------------------
// x2("\\A", "", 0, 0); // Test 6
regex_error!(case_6, "\\A", r#"StartLine Look(Start)"#, 6);

// -------------------------------------------------------------------------
// x2("\\Z", "", 0, 0); // Test 7
regex_error!(case_7, "\\Z", r#"unrecognized escape sequence"#, 7);

// -------------------------------------------------------------------------
// x2("\\z", "", 0, 0); // Test 8
regex_error!(case_8, "\\z", r#"EndLine Look(End)"#, 8);

// -------------------------------------------------------------------------
// x2("^$", "", 0, 0); // Test 9
regex_error!(case_9, "^$", r#"StartLine Look(Start)"#, 9);

// -------------------------------------------------------------------------
// x2("\\ca", "\001", 0, 1); // Test 10
regex_error!(case_10, "\\ca", r#"unrecognized escape sequence"#, 10);

// -------------------------------------------------------------------------
// x2("\\C-b", "\002", 0, 1); // Test 11
regex_error!(case_11, "\\C-b", r#"unrecognized escape sequence"#, 11);

// -------------------------------------------------------------------------
// x2("\\c\\\\", "\034", 0, 1); // Test 12
regex_error!(case_12, "\\c\\\\", r#"unrecognized escape sequence"#, 12);

// -------------------------------------------------------------------------
// x2("q[\\c\\\\]", "q\034", 0, 2); // Test 13
regex_error!(case_13, "q[\\c\\\\]", r#"unrecognized escape sequence"#, 13);

// -------------------------------------------------------------------------
// x2("", "a", 0, 0); // Test 14
scan_test!(case_14, s14, S14, r#""#, "a", &[], 14);

// -------------------------------------------------------------------------
// x2("a", "a", 0, 1); // Test 15
scan_test!(case_15, s15, S15, r#"a"#, "a", &[("a", 0, 1)], 15);

// -------------------------------------------------------------------------
// x2("\\x61", "a", 0, 1); // Test 16
scan_test!(case_16, s16, S16, r#"\x61"#, "a", &[("a", 0, 1)], 16);

// -------------------------------------------------------------------------
// x2("aa", "aa", 0, 2); // Test 17
scan_test!(case_17, s17, S17, r#"aa"#, "aa", &[("aa", 0, 2)], 17);

// -------------------------------------------------------------------------
// x2("aaa", "aaa", 0, 3); // Test 18
scan_test!(case_18, s18, S18, r#"aaa"#, "aaa", &[("aaa", 0, 3)], 18);

// -------------------------------------------------------------------------
// x2("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 35); // Test 19
scan_test!(
    case_19,
    s19,
    S19,
    r#"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"#,
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    &[("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 35)],
    19
);

// -------------------------------------------------------------------------
// x2("ab", "ab", 0, 2); // Test 20
scan_test!(case_20, s20, S20, r#"ab"#, "ab", &[("ab", 0, 2)], 20);

// -------------------------------------------------------------------------
// x2("b", "ab", 1, 2); // Test 21
scan_test!(case_21, s21, S21, r#"b"#, "ab", &[("b", 1, 2)], 21);

// -------------------------------------------------------------------------
// x2("bc", "abc", 1, 3); // Test 22
scan_test!(case_22, s22, S22, r#"bc"#, "abc", &[("bc", 1, 3)], 22);

// -------------------------------------------------------------------------
// x2("(?i:#RET#)", "#INS##RET#", 5, 10); // Test 23
scan_test!(
    case_23,
    s23,
    S23,
    r#"(?i:#RET#)"#,
    "#INS##RET#",
    &[("#RET#", 5, 10)],
    23
);

// -------------------------------------------------------------------------
// x2("\\17", "\017", 0, 1); // Test 24
regex_error!(case_24, "\\17", r#"backreferences are not supported"#, 24);

// -------------------------------------------------------------------------
// x2("\\x1f", "\x1f", 0, 1); // Test 25
scan_test!(case_25, s25, S25, r#"\x1f"#, "\x1f", &[("\x1f", 0, 1)], 25);

// -------------------------------------------------------------------------
// x2("a(?#....\\\\JJJJ)b", "ab", 0, 2); // Test 26
regex_error!(case_26, "a(?#....\\\\JJJJ)b", r#"unrecognized flag"#, 26);

// -------------------------------------------------------------------------
// x2("(?x)  G (o O(?-x)oO) g L", "GoOoOgLe", 0, 7); // Test 27
scan_test!(
    case_27,
    s27,
    S27,
    r#"(?x)  G (o O(?-x)oO) g L"#,
    "GoOoOgLe",
    &[("GoOoOgL", 0, 7)],
    27
);

// -------------------------------------------------------------------------
// x2(".", "a", 0, 1); // Test 28
scan_test!(case_28, s28, S28, r#"."#, "a", &[("a", 0, 1)], 28);

// -------------------------------------------------------------------------
// n(".", ""); // Test 29
scan_test!(case_29, s29, S29, r#"."#, "", &[], 29);

// -------------------------------------------------------------------------
// x2("..", "ab", 0, 2); // Test 30
scan_test!(case_30, s30, S30, r#".."#, "ab", &[("ab", 0, 2)], 30);
// -------------------------------------------------------------------------
// x2("\\w", "e", 0, 1); // Test 31
scan_test!(case_31, s31, S31, r#"\w"#, "e", &[("e", 0, 1)], 31);

// -------------------------------------------------------------------------
// n("\\W", "e"); // Test 32
scan_test!(case_32, s32, S32, r#"\W"#, "e", &[], 32);

// -------------------------------------------------------------------------
// x2("\\s", " ", 0, 1); // Test 33
scan_test!(case_33, s33, S33, r#"\s"#, " ", &[(" ", 0, 1)], 33);

// -------------------------------------------------------------------------
// x2("\\S", "b", 0, 1); // Test 34
scan_test!(case_34, s34, S34, r#"\S"#, "b", &[("b", 0, 1)], 34);

// -------------------------------------------------------------------------
// x2("\\d", "4", 0, 1); // Test 35
scan_test!(case_35, s35, S35, r#"\d"#, "4", &[("4", 0, 1)], 35);

// -------------------------------------------------------------------------
// n("\\D", "4"); // Test 36
scan_test!(case_36, s36, S36, r#"\D"#, "4", &[], 36);

// -------------------------------------------------------------------------
// x2("\\b", "z ", 0, 0); // Test 37
regex_error!(case_37, "\\b", r#"WordUnicode Look(WordUnicode)"#, 37);

// -------------------------------------------------------------------------
// x2("\\b", " z", 1, 1); // Test 38
regex_error!(case_38, "\\b", r#"WordUnicode Look(WordUnicode)"#, 38);

// -------------------------------------------------------------------------
// x2("\\b", "  z ", 2, 2); // Test 39
regex_error!(case_39, "\\b", r#"WordUnicode Look(WordUnicode)"#, 39);

// -------------------------------------------------------------------------
// x2("\\B", "zz ", 1, 1); // Test 40
regex_error!(
    case_40,
    "\\B",
    r#"WordUnicodeNegate Look(WordUnicodeNegate)"#,
    40
);

// -------------------------------------------------------------------------
// x2("\\B", "z ", 2, 2); // Test 41
regex_error!(
    case_41,
    "\\B",
    r#"WordUnicodeNegate Look(WordUnicodeNegate)"#,
    41
);

// -------------------------------------------------------------------------
// x2("\\B", " z", 0, 0); // Test 42
regex_error!(
    case_42,
    "\\B",
    r#"WordUnicodeNegate Look(WordUnicodeNegate)"#,
    42
);

// -------------------------------------------------------------------------
// x2("[ab]", "b", 0, 1); // Test 43
scan_test!(case_43, s43, S43, r#"[ab]"#, "b", &[("b", 0, 1)], 43);

// -------------------------------------------------------------------------
// n("[ab]", "c"); // Test 44
scan_test!(case_44, s44, S44, r#"[ab]"#, "c", &[], 44);

// -------------------------------------------------------------------------
// x2("[a-z]", "t", 0, 1); // Test 45
scan_test!(case_45, s45, S45, r#"[a-z]"#, "t", &[("t", 0, 1)], 45);

// -------------------------------------------------------------------------
// n("[^a]", "a"); // Test 46
scan_test!(case_46, s46, S46, r#"[^a]"#, "a", &[], 46);

// -------------------------------------------------------------------------
// x2("[^a]", "\n", 0, 1); // Test 47
scan_test!(case_47, s47, S47, r#"[^a]"#, "\n", &[("\n", 0, 1)], 47);

// -------------------------------------------------------------------------
// x2("[]]", "]", 0, 1); // Test 48
scan_test!(case_48, s48, S48, r#"[]]"#, "]", &[("]", 0, 1)], 48);

// -------------------------------------------------------------------------
// n("[^]]", "]"); // Test 49
scan_test!(case_49, s49, S49, r#"[^]]"#, "]", &[], 49);

// -------------------------------------------------------------------------
// x2("[\\^]+", "0^^1", 1, 3); // Test 50
scan_test!(case_50, s50, S50, r#"[\\^]+"#, "0^^1", &[("^^", 1, 3)], 50);
// -------------------------------------------------------------------------
// x2("[b-]", "b", 0, 1); // Test 51
scan_test!(case_51, s51, S51, r#"[b-]"#, "b", &[("b", 0, 1)], 51);

// -------------------------------------------------------------------------
// x2("[b-]", "-", 0, 1); // Test 52
scan_test!(case_52, s52, S52, r#"[b-]"#, "-", &[("-", 0, 1)], 52);

// -------------------------------------------------------------------------
// x2("[\\w]", "z", 0, 1); // Test 53
scan_test!(case_53, s53, S53, r#"[\w]"#, "z", &[("z", 0, 1)], 53);

// -------------------------------------------------------------------------
// n("[\\w]", " "); // Test 54
scan_test!(case_54, s54, S54, r#"[\w]"#, " ", &[], 54);

// -------------------------------------------------------------------------
// x2("[\\W]", "b$", 1, 2); // Test 55
scan_test!(case_55, s55, S55, r#"[\W]"#, "b$", &[("$", 1, 2)], 55);

// -------------------------------------------------------------------------
// x2("[\\d]", "5", 0, 1); // Test 56
scan_test!(case_56, s56, S56, r#"[\d]"#, "5", &[("5", 0, 1)], 56);

// -------------------------------------------------------------------------
// n("[\\d]", "e"); // Test 57
scan_test!(case_57, s57, S57, r#"[\d]"#, "e", &[], 57);

// -------------------------------------------------------------------------
// x2("[\\D]", "t", 0, 1); // Test 58
scan_test!(case_58, s58, S58, r#"[\D]"#, "t", &[("t", 0, 1)], 58);

// -------------------------------------------------------------------------
// n("[\\D]", "3"); // Test 59
scan_test!(case_59, s59, S59, r#"[\D]"#, "3", &[], 59);

// -------------------------------------------------------------------------
// x2("[\\s]", " ", 0, 1); // Test 60
scan_test!(case_60, s60, S60, r#"[\s]"#, " ", &[(" ", 0, 1)], 60);

// -------------------------------------------------------------------------
// n("[\\s]", "a"); // Test 61
scan_test!(case_61, s61, S61, r#"[\s]"#, "a", &[], 61);

// -------------------------------------------------------------------------
// x2("[\\S]", "b", 0, 1); // Test 62
scan_test!(case_62, s62, S62, r#"[\S]"#, "b", &[("b", 0, 1)], 62);

// -------------------------------------------------------------------------
// n("[\\S]", " "); // Test 63
scan_test!(case_63, s63, S63, r#"[\S]"#, " ", &[], 63);

// -------------------------------------------------------------------------
// x2("[\\w\\d]", "2", 0, 1); // Test 64
scan_test!(case_64, s64, S64, r#"[\w\d]"#, "2", &[("2", 0, 1)], 64);

// -------------------------------------------------------------------------
// n("[\\w\\d]", " "); // Test 65
scan_test!(case_65, s65, S65, r#"[\w\d]"#, " ", &[], 65);

// -------------------------------------------------------------------------
// x2("[[:upper:]]", "B", 0, 1); // Test 66
scan_test!(case_66, s66, S66, r#"[[:upper:]]"#, "B", &[("B", 0, 1)], 66);

// -------------------------------------------------------------------------
// x2("[*[:xdigit:]+]", "+", 0, 1); // Test 67
scan_test!(
    case_67,
    s67,
    S67,
    r#"[*[:xdigit:]+]"#,
    "+",
    &[("+", 0, 1)],
    67
);

// -------------------------------------------------------------------------
// x2("[*[:xdigit:]+]", "GHIKK-9+*", 6, 7); // Test 68
scan_test!(
    case_68,
    s68,
    S68,
    r#"[*[:xdigit:]+]"#,
    "GHIKK-9+*",
    &[("9", 6, 7), ("+", 7, 8), ("*", 8, 9)],
    68
);

// -------------------------------------------------------------------------
// x2("[*[:xdigit:]+]", "-@^+", 3, 4); // Test 69
scan_test!(
    case_69,
    s69,
    S69,
    r#"[*[:xdigit:]+]"#,
    "-@^+",
    &[("+", 3, 4)],
    69
);

// -------------------------------------------------------------------------
// n("[[:upper]]", "A"); // Test 70
scan_test!(case_70, s70, S70, r#"[[:upper]]"#, "A", &[], 70);

// -------------------------------------------------------------------------
// x2("[[:upper]]", ":", 0, 1); // Test 71
scan_test!(case_71, s71, S71, r#"[[:upper]]"#, ":", &[(":", 0, 1)], 71);

// -------------------------------------------------------------------------
// n("[[:upper:]]", "a"); // Test 72
scan_test!(case_72, s72, S72, r#"[[:upper:]]"#, "a", &[], 72);

// -------------------------------------------------------------------------
// x2("[[:^upper:]]", "a", 0, 1); // Test 73
scan_test!(
    case_73,
    s73,
    S73,
    r#"[[:^upper:]]"#,
    "a",
    &[("a", 0, 1)],
    73
);

// -------------------------------------------------------------------------
// n("[[:lower:]]", "A"); // Test 74
scan_test!(case_74, s74, S74, r#"[[:lower:]]"#, "A", &[], 74);

// -------------------------------------------------------------------------
// x2("[[:^lower:]]", "A", 0, 1); // Test 75
scan_test!(
    case_75,
    s75,
    S75,
    r#"[[:^lower:]]"#,
    "A",
    &[("A", 0, 1)],
    75
);

// -------------------------------------------------------------------------
// e("[[:::]",   ":[", ONIGERR_PREMATURE_END_OF_CHAR_CLASS); // Test 76
// ClassUnclosed

// -------------------------------------------------------------------------
// e("[[:\\]:]", ":]", ONIGERR_PREMATURE_END_OF_CHAR_CLASS); // Test 77
// ClassUnclosed

// -------------------------------------------------------------------------
// e("[[:\\[:]", ":[", ONIGERR_PREMATURE_END_OF_CHAR_CLASS); // Test 78
// ClassUnclosed

// -------------------------------------------------------------------------
// e("[[:\\]]",  ":]", ONIGERR_PREMATURE_END_OF_CHAR_CLASS); // Test 79
// ClassUnclosed

// -------------------------------------------------------------------------
// e("[[:u:]]",      "", ONIGERR_INVALID_POSIX_BRACKET_TYPE); // Test 80
scanner! { S80 { mode M { token r#"[[:u:]]"# => 0; } } }

// -------------------------------------------------------------------------
// e("[[:upp:]]",    "", ONIGERR_INVALID_POSIX_BRACKET_TYPE); // Test 81
scanner! { S81 { mode M { token r#"[[:upp:]]"# => 0; } } }

// -------------------------------------------------------------------------
// e("[[:uppers:]]", "", ONIGERR_INVALID_POSIX_BRACKET_TYPE); // Test 82
scanner! { S82 { mode M { token r#"[[:uppers:]]"# => 0; } } }

// -------------------------------------------------------------------------
// x2("[[:upper\\] :]]",  "]", 0, 1); // Test 83
scan_test!(
    case_83,
    s83,
    S83,
    r#"[[:upper\] :]]"#,
    "]",
    &[("]", 0, 1)],
    83
);

// -------------------------------------------------------------------------
// x2("[[::]]",     ":", 0, 1); // Test 84
scan_test!(case_84, s84, S84, r#"[[::]]"#, ":", &[(":", 0, 1)], 84);

// -------------------------------------------------------------------------
// x2("[[:::]]",    ":", 0, 1); // Test 85
scan_test!(case_85, s85, S85, r#"[[:::]]"#, ":", &[(":", 0, 1)], 85);

// -------------------------------------------------------------------------
// x2("[[:\\]:]]*", ":]", 0, 2); // Test 86
scan_test!(case_86, s86, S86, r#"[[:\]:]]*"#, ":]", &[(":]", 0, 2)], 86);

// -------------------------------------------------------------------------
// x2("[[:\\[:]]*", ":[", 0, 2); // Test 87
scan_test!(case_87, s87, S87, r#"[[:\[:]]*"#, ":[", &[(":[", 0, 2)], 87);

// -------------------------------------------------------------------------
// x2("[[:\\]]]*",  ":]", 0, 2); // Test 88
scan_test!(case_88, s88, S88, r#"[[:\]]]*"#, ":]", &[(":]", 0, 2)], 88);

// -------------------------------------------------------------------------
// x2("[\\044-\\047]", "\046", 0, 1); // Test 89
scan_test!(
    case_89,
    s89,
    S89,
    r#"[\x24-\x27]"#,
    "\x26",
    &[("\x26", 0, 1)],
    89
);

// -------------------------------------------------------------------------
// x2("[\\x5a-\\x5c]", "\x5b", 0, 1); // Test 90
scan_test!(
    case_90,
    s90,
    S90,
    r#"[\x5a-\x5c]"#,
    "\x5b",
    &[("\x5b", 0, 1)],
    90
);

// -------------------------------------------------------------------------
// x2("[\\x6A-\\x6D]", "\x6c", 0, 1); // Test 91
scan_test!(
    case_91,
    s91,
    S91,
    r#"[\x6A-\x6D]"#,
    "\x6c",
    &[("\x6c", 0, 1)],
    91
);

// -------------------------------------------------------------------------
// n("[\\x6A-\\x6D]", "\x6E"); // Test 92
scan_test!(case_92, s92, S92, r#"[\x6A-\x6D]"#, "\x6E", &[], 92);

// -------------------------------------------------------------------------
// n("^[0-9A-F]+ 0+ UNDEF ", "75F 00000000 SECT14A notype ()    External    | _rb_apply"); // Test 93
regex_error!(
    case_93,
    "^[0-9A-F]+ 0+ UNDEF ",
    r#"StartLine Look(Start)"#,
    93
);

// -------------------------------------------------------------------------
// x2("[\\[]", "[", 0, 1); // Test 94
scan_test!(case_94, s94, S94, r#"[\[]"#, "[", &[("[", 0, 1)], 94);

// -------------------------------------------------------------------------
// x2("[\\]]", "]", 0, 1); // Test 95
scan_test!(case_95, s95, S95, r#"[\]]"#, "]", &[("]", 0, 1)], 95);

// -------------------------------------------------------------------------
// x2("[&]", "&", 0, 1); // Test 96
scan_test!(case_96, s96, S96, r#"[&]"#, "&", &[("&", 0, 1)], 96);

// -------------------------------------------------------------------------
// x2("[[ab]]", "b", 0, 1); // Test 97
scan_test!(case_97, s97, S97, r#"[[ab]]"#, "b", &[("b", 0, 1)], 97);

// -------------------------------------------------------------------------
// x2("[[ab]c]", "c", 0, 1); // Test 98
scan_test!(case_98, s98, S98, r#"[[ab]c]"#, "c", &[("c", 0, 1)], 98);

// -------------------------------------------------------------------------
// n("[[^a]]", "a"); // Test 99
scan_test!(case_99, s99, S99, r#"[[^a]]"#, "a", &[], 99);

// -------------------------------------------------------------------------
// n("[^[a]]", "a"); // Test 100
scan_test!(case_100, s100, S100, r#"[^[a]]"#, "a", &[], 100);

// -------------------------------------------------------------------------
// x2("[[ab]&&bc]", "b", 0, 1); // Test 101
scan_test!(
    case_101,
    s101,
    S101,
    r#"[[ab]&&bc]"#,
    "b",
    &[("b", 0, 1)],
    101
);

// -------------------------------------------------------------------------
// n("[[ab]&&bc]", "a"); // Test 102
scan_test!(case_102, s102, S102, r#"[[ab]&&bc]"#, "a", &[], 102);

// -------------------------------------------------------------------------
// n("[[ab]&&bc]", "c"); // Test 103
scan_test!(case_103, s103, S103, r#"[[ab]&&bc]"#, "c", &[], 103);

// -------------------------------------------------------------------------
// x2("[a-z&&b-y&&c-x]", "w", 0, 1); // Test 104
scan_test!(
    case_104,
    s104,
    S104,
    r#"[a-z&&b-y&&c-x]"#,
    "w",
    &[("w", 0, 1)],
    104
);

// -------------------------------------------------------------------------
// n("[^a-z&&b-y&&c-x]", "w"); // Test 105
scan_test!(case_105, s105, S105, r#"[^a-z&&b-y&&c-x]"#, "w", &[], 105);

// -------------------------------------------------------------------------
// x2("[[^a&&a]&&a-z]", "b", 0, 1); // Test 106
scan_test!(
    case_106,
    s106,
    S106,
    r#"[[^a&&a]&&a-z]"#,
    "b",
    &[("b", 0, 1)],
    106
);

// -------------------------------------------------------------------------
// n("[[^a&&a]&&a-z]", "a"); // Test 107
scan_test!(case_107, s107, S107, r#"[[^a&&a]&&a-z]"#, "a", &[], 107);

// -------------------------------------------------------------------------
// x2("[[^a-z&&bcdef]&&[^c-g]]", "h", 0, 1); // Test 108
scan_test!(
    case_108,
    s108,
    S108,
    r#"[[^a-z&&bcdef]&&[^c-g]]"#,
    "h",
    &[("h", 0, 1)],
    108
);

// -------------------------------------------------------------------------
// n("[[^a-z&&bcdef]&&[^c-g]]", "c"); // Test 109
scan_test!(
    case_109,
    s109,
    S109,
    r#"[[^a-z&&bcdef]&&[^c-g]]"#,
    "c",
    &[],
    109
);
// -------------------------------------------------------------------------
// x2("[^[^abc]&&[^cde]]", "c", 0, 1); // Test 110
scan_test!(
    case_110,
    s110,
    S110,
    r#"[^[^abc]&&[^cde]]"#,
    "c",
    &[("c", 0, 1)],
    110
);

// -------------------------------------------------------------------------
// x2("[^[^abc]&&[^cde]]", "e", 0, 1); // Test 111
scan_test!(
    case_111,
    s111,
    S111,
    r#"[^[^abc]&&[^cde]]"#,
    "e",
    &[("e", 0, 1)],
    111
);

// -------------------------------------------------------------------------
// n("[^[^abc]&&[^cde]]", "f"); // Test 112
scan_test!(case_112, s112, S112, r#"[^[^abc]&&[^cde]]"#, "f", &[], 112);

// -------------------------------------------------------------------------
// x2("[a-&&-a]", "-", 0, 1); // Test 113
regex_error!(
    case_113,
    "[a-&&-a]",
    r#"invalid character class range"#,
    113
);

// -------------------------------------------------------------------------
// n("[a\\-&&\\-a]", "&"); // Test 114
scan_test!(case_114, s114, S114, r#"[a\-&&\-a]"#, "&", &[], 114);

// -------------------------------------------------------------------------
// n("\\wabc", " abc"); // Test 115
scan_test!(case_115, s115, S115, r#"\wabc"#, " abc", &[], 115);

// -------------------------------------------------------------------------
// x2("a\\Wbc", "a bc", 0, 4); // Test 116
scan_test!(
    case_116,
    s116,
    S116,
    r#"a\Wbc"#,
    "a bc",
    &[("a bc", 0, 4)],
    116
);

// -------------------------------------------------------------------------
// x2("a.b.c", "aabbc", 0, 5); // Test 117
scan_test!(
    case_117,
    s117,
    S117,
    r#"a.b.c"#,
    "aabbc",
    &[("aabbc", 0, 5)],
    117
);

// -------------------------------------------------------------------------
// x2(".\\wb\\W..c", "abb bcc", 0, 7); // Test 118
scan_test!(
    case_118,
    s118,
    S118,
    r#".\wb\W..c"#,
    "abb bcc",
    &[("abb bcc", 0, 7)],
    118
);

// -------------------------------------------------------------------------
// x2("\\s\\wzzz", " zzzz", 0, 5); // Test 119
scan_test!(
    case_119,
    s119,
    S119,
    r#"\s\wzzz"#,
    " zzzz",
    &[(" zzzz", 0, 5)],
    119
);

// -------------------------------------------------------------------------
// x2("aa.b", "aabb", 0, 4); // Test 120
scan_test!(
    case_120,
    s120,
    S120,
    r#"aa.b"#,
    "aabb",
    &[("aabb", 0, 4)],
    120
);

// -------------------------------------------------------------------------
// n(".a", "ab"); // Test 121
scan_test!(case_121, s121, S121, r#".a"#, "ab", &[], 121);

// -------------------------------------------------------------------------
// x2("^a", "a", 0, 1); // Test 122
regex_error!(case_122, "^a", r#"StartLine Look(Start)"#, 122);

// -------------------------------------------------------------------------
// x2("^a$", "a", 0, 1); // Test 123
regex_error!(case_123, "^a$", r#"StartLine Look(Start)"#, 123);

// -------------------------------------------------------------------------
// x2("^\\w$", "a", 0, 1); // Test 124
regex_error!(case_124, "^\\w$", r#"StartLine Look(Start)"#, 124);

// -------------------------------------------------------------------------
// n("^\\w$", " "); // Test 125
regex_error!(case_125, "^\\w$", r#"StartLine Look(Start)"#, 125);

// -------------------------------------------------------------------------
// x2("^\\wab$", "zab", 0, 3); // Test 126
regex_error!(case_126, "^\\wab$", r#"StartLine Look(Start)"#, 126);

// -------------------------------------------------------------------------
// x2("^\\wabcdef$", "zabcdef", 0, 7); // Test 127
regex_error!(case_127, "^\\wabcdef$", r#"StartLine Look(Start)"#, 127);

// -------------------------------------------------------------------------
// x2("^\\w...def$", "zabcdef", 0, 7); // Test 128
regex_error!(case_128, "^\\w...def$", r#"StartLine Look(Start)"#, 128);

// -------------------------------------------------------------------------
// x2("\\w\\w\\s\\Waaa\\d", "aa  aaa4", 0, 8); // Test 129
scan_test!(
    case_129,
    s129,
    S129,
    r#"\w\w\s\Waaa\d"#,
    "aa  aaa4",
    &[("aa  aaa4", 0, 8)],
    129
);

// -------------------------------------------------------------------------
// x2("\\A\\Z", "", 0, 0); // Test 130
regex_error!(case_130, "\\A\\Z", r#"unrecognized escape sequence"#, 130);

// -------------------------------------------------------------------------
// x2("\\Axyz", "xyz", 0, 3); // Test 131
regex_error!(case_131, "\\Axyz", r#"StartLine Look(Start)"#, 131);

// -------------------------------------------------------------------------
// x2("xyz\\Z", "xyz", 0, 3); // Test 132
regex_error!(case_132, "xyz\\Z", r#"unrecognized escape sequence"#, 132);

// -------------------------------------------------------------------------
// x2("xyz\\z", "xyz", 0, 3); // Test 133
regex_error!(case_133, "xyz\\z", r#"EndLine Look(End)"#, 133);

// -------------------------------------------------------------------------
// x2("a\\Z", "a", 0, 1); // Test 134
regex_error!(case_134, "a\\Z", r#"unrecognized escape sequence"#, 134);

// -------------------------------------------------------------------------
// x2("\\Gaz", "az", 0, 2); // Test 135
regex_error!(case_135, "\\Gaz", r#"unrecognized escape sequence"#, 135);

// -------------------------------------------------------------------------
// n("\\Gz", "bza"); // Test 136
regex_error!(case_136, "\\Gz", r#"unrecognized escape sequence"#, 136);

// -------------------------------------------------------------------------
// n("az\\G", "az"); // Test 137
regex_error!(case_137, "az\\G", r#"unrecognized escape sequence"#, 137);

// -------------------------------------------------------------------------
// n("az\\A", "az"); // Test 138
regex_error!(case_138, "az\\A", r#"StartLine Look(Start)"#, 138);

// -------------------------------------------------------------------------
// n("a\\Az", "az"); // Test 139
regex_error!(case_139, "a\\Az", r#"StartLine Look(Start)"#, 139);

// -------------------------------------------------------------------------
// x2("\\^\\$", "^$", 0, 2); // Test 140
scan_test!(case_140, s140, S140, r#"\^\$"#, "^$", &[("^$", 0, 2)], 140);

// -------------------------------------------------------------------------
// x2("^x?y", "xy", 0, 2); // Test 141
regex_error!(case_141, "^x?y", r#"StartLine Look(Start)"#, 141);

// -------------------------------------------------------------------------
// x2("^(x?y)", "xy", 0, 2); // Test 142
regex_error!(case_142, "^(x?y)", r#"StartLine Look(Start)"#, 142);

// -------------------------------------------------------------------------
// x2("\\w", "_", 0, 1); // Test 143
scan_test!(case_143, s143, S143, r#"\w"#, "_", &[("_", 0, 1)], 143);

// -------------------------------------------------------------------------
// n("\\W", "_"); // Test 144
scan_test!(case_144, s144, S144, r#"\W"#, "_", &[], 144);

// -------------------------------------------------------------------------
// x2("(?=z)z", "z", 0, 1); // Test 145
regex_error!(
    case_145,
    "(?=z)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    145
);

// -------------------------------------------------------------------------
// n("(?=z).", "a"); // Test 146
regex_error!(
    case_146,
    "(?=z).",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    146
);

// -------------------------------------------------------------------------
// x2("(?!z)a", "a", 0, 1); // Test 147
regex_error!(
    case_147,
    "(?!z)a",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    147
);

// -------------------------------------------------------------------------
// n("(?!z)a", "z"); // Test 148
regex_error!(
    case_148,
    "(?!z)a",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    148
);

// -------------------------------------------------------------------------
// x2("(?i:a)", "a", 0, 1); // Test 149
scan_test!(case_149, s149, S149, r#"(?i:a)"#, "a", &[("a", 0, 1)], 149);

// -------------------------------------------------------------------------
// x2("(?i:a)", "A", 0, 1); // Test 150
scan_test!(case_150, s150, S150, r#"(?i:a)"#, "A", &[("A", 0, 1)], 150);

// -------------------------------------------------------------------------
// x2("(?i:A)", "a", 0, 1); // Test 151
scan_test!(case_151, s151, S151, r#"(?i:A)"#, "a", &[("a", 0, 1)], 151);

// -------------------------------------------------------------------------
// x2("(?i:i)", "I", 0, 1); // Test 152
scan_test!(case_152, s152, S152, r#"(?i:i)"#, "I", &[("I", 0, 1)], 152);

// -------------------------------------------------------------------------
// x2("(?i:I)", "i", 0, 1); // Test 153
scan_test!(case_153, s153, S153, r#"(?i:I)"#, "i", &[("i", 0, 1)], 153);

// -------------------------------------------------------------------------
// x2("(?i:[A-Z])", "i", 0, 1); // Test 154
scan_test!(
    case_154,
    s154,
    S154,
    r#"(?i:[A-Z])"#,
    "i",
    &[("i", 0, 1)],
    154
);

// -------------------------------------------------------------------------
// x2("(?i:[a-z])", "I", 0, 1); // Test 155
scan_test!(
    case_155,
    s155,
    S155,
    r#"(?i:[a-z])"#,
    "I",
    &[("I", 0, 1)],
    155
);

// -------------------------------------------------------------------------
// n("(?i:A)", "b"); // Test 156
scan_test!(case_156, s156, S156, r#"(?i:A)"#, "b", &[], 156);

// -------------------------------------------------------------------------
// x2("(?i:ss)", "ss", 0, 2); // Test 157
scan_test!(
    case_157,
    s157,
    S157,
    r#"(?i:ss)"#,
    "ss",
    &[("ss", 0, 2)],
    157
);

// -------------------------------------------------------------------------
// x2("(?i:ss)", "Ss", 0, 2); // Test 158
scan_test!(
    case_158,
    s158,
    S158,
    r#"(?i:ss)"#,
    "Ss",
    &[("Ss", 0, 2)],
    158
);

// -------------------------------------------------------------------------
// x2("(?i:ss)", "SS", 0, 2); // Test 159
scan_test!(
    case_159,
    s159,
    S159,
    r#"(?i:ss)"#,
    "SS",
    &[("SS", 0, 2)],
    159
);

// -------------------------------------------------------------------------
// x2("(?i:ss)", "\xc5\xbfS", 0, 3); // Test 160
scanner! { S160 { mode M { token r#"(?i:ss)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:ss)", "s\xc5\xbf", 0, 3); // Test 161
scanner! { S161 { mode M { token r#"(?i:ss)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:ss)", "\xc3\x9f", 0, 2); // Test 162
scanner! { S162 { mode M { token r#"(?i:ss)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:ss)", "\xe1\xba\x9e", 0, 3); // Test 163
scanner! { S163 { mode M { token r#"(?i:ss)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "xssy", 0, 4); // Test 164
scan_test!(
    case_164,
    s164,
    S164,
    r#"(?i:xssy)"#,
    "xssy",
    &[("xssy", 0, 4)],
    164
);

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "xSsy", 0, 4); // Test 165
scan_test!(
    case_165,
    s165,
    S165,
    r#"(?i:xssy)"#,
    "xSsy",
    &[("xSsy", 0, 4)],
    165
);

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "xSSy", 0, 4); // Test 166
scan_test!(
    case_166,
    s166,
    S166,
    r#"(?i:xssy)"#,
    "xSSy",
    &[("xSSy", 0, 4)],
    166
);

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "x\xc5\xbfSy", 0, 5); // Test 167
scanner! { S167 { mode M { token r#"(?i:xssy)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "xs\xc5\xbfy", 0, 5); // Test 168
scanner! { S168 { mode M { token r#"(?i:xssy)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "x\xc3\x9fy", 0, 4); // Test 169
scanner! { S169 { mode M { token r#"(?i:xssy)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:xssy)", "x\xe1\xba\x9ey", 0, 5); // Test 170
scanner! { S170 { mode M { token r#"(?i:xssy)"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:x\xc3\x9fy)", "xssy", 0, 4); // Test 171
scan_test!(case_171, s171, S171, r#"(?i:x\xc3\x9fy)"#, "xssy", &[], 171);

// -------------------------------------------------------------------------
// x2("(?i:x\xc3\x9fy)", "xSSy", 0, 4); // Test 172
scan_test!(
    case_172,
    s172,
    S172,
    r#"(?i:x\xc3\x9fy)"#,
    "xSSy",
    &[], // Oniguruma : ("xSSy", 0, 4)
    172
);

// -------------------------------------------------------------------------
// x2("(?i:\xc3\x9f)", "ss", 0, 2); // Test 173
scan_test!(
    case_173,
    s173,
    S173,
    r#"(?i:\xc3\x9f)"#,
    "ss",
    &[], // Oniguruma : ("ss", 0, 2)
    173
);

// -------------------------------------------------------------------------
// x2("(?i:\xc3\x9f)", "SS", 0, 2); // Test 174
scan_test!(
    case_174,
    s174,
    S174,
    r#"(?i:\xc3\x9f)"#,
    "SS",
    &[], // Oniguruma : ("SS", 0, 2)
    174
);

// -------------------------------------------------------------------------
// x2("(?i:[\xc3\x9f])", "ss", 0, 2); // Test 175
scan_test!(
    case_175,
    s175,
    S175,
    r#"(?i:[\xc3\x9f])"#,
    "ss",
    &[], // Oniguruma : ("ss", 0, 2)
    175
);

// -------------------------------------------------------------------------
// x2("(?i:[\xc3\x9f])", "SS", 0, 2); // Test 176
scan_test!(
    case_176,
    s176,
    S176,
    r#"(?i:[\xc3\x9f])"#,
    "SS",
    &[], // Oniguruma : ("SS", 0, 2)
    176
);

// -------------------------------------------------------------------------
// x2("(?i)(?<!ss)z", "qqz", 2, 3); // Test 177
regex_error!(
    case_177,
    "(?i)(?<!ss)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    177
);

// -------------------------------------------------------------------------
// x2("(?i:[A-Z])", "a", 0, 1); // Test 178
scan_test!(
    case_178,
    s178,
    S178,
    r#"(?i:[A-Z])"#,
    "a",
    &[("a", 0, 1)],
    178
);

// -------------------------------------------------------------------------
// x2("(?i:[f-m])", "H", 0, 1); // Test 179
scan_test!(
    case_179,
    s179,
    S179,
    r#"(?i:[f-m])"#,
    "H",
    &[("H", 0, 1)],
    179
);

// -------------------------------------------------------------------------
// x2("(?i:[f-m])", "h", 0, 1); // Test 180
scan_test!(
    case_180,
    s180,
    S180,
    r#"(?i:[f-m])"#,
    "h",
    &[("h", 0, 1)],
    180
);

// -------------------------------------------------------------------------
// n("(?i:[f-m])", "e"); // Test 181
scan_test!(case_181, s181, S181, r#"(?i:[f-m])"#, "e", &[], 181);

// -------------------------------------------------------------------------
// x2("(?i:[A-c])", "D", 0, 1); // Test 182
scan_test!(
    case_182,
    s182,
    S182,
    r#"(?i:[A-c])"#,
    "D",
    &[("D", 0, 1)],
    182
);

// -------------------------------------------------------------------------
// n("(?i:[^a-z])", "A"); // Test 183
scan_test!(case_183, s183, S183, r#"(?i:[^a-z])"#, "A", &[], 183);

// -------------------------------------------------------------------------
// n("(?i:[^a-z])", "a"); // Test 184
scan_test!(case_184, s184, S184, r#"(?i:[^a-z])"#, "a", &[], 184);

// -------------------------------------------------------------------------
// x2("(?i:[!-k])", "Z", 0, 1); // Test 185
scan_test!(
    case_185,
    s185,
    S185,
    r#"(?i:[!-k])"#,
    "Z",
    &[("Z", 0, 1)],
    185
);

// -------------------------------------------------------------------------
// x2("(?i:[!-k])", "7", 0, 1); // Test 186
scan_test!(
    case_186,
    s186,
    S186,
    r#"(?i:[!-k])"#,
    "7",
    &[("7", 0, 1)],
    186
);

// -------------------------------------------------------------------------
// x2("(?i:[T-}])", "b", 0, 1); // Test 187
scan_test!(
    case_187,
    s187,
    S187,
    r#"(?i:[T-}])"#,
    "b",
    &[("b", 0, 1)],
    187
);

// -------------------------------------------------------------------------
// x2("(?i:[T-}])", "{", 0, 1); // Test 188
scan_test!(
    case_188,
    s188,
    S188,
    r#"(?i:[T-}])"#,
    "{",
    &[("{", 0, 1)],
    188
);

// -------------------------------------------------------------------------
// x2("(?i:\\?a)", "?A", 0, 2); // Test 189
scan_test!(
    case_189,
    s189,
    S189,
    r#"(?i:\?a)"#,
    "?A",
    &[("?A", 0, 2)],
    189
);

// -------------------------------------------------------------------------
// x2("(?i:\\*A)", "*a", 0, 2); // Test 190
scan_test!(
    case_190,
    s190,
    S190,
    r#"(?i:\*A)"#,
    "*a",
    &[("*a", 0, 2)],
    190
);

// -------------------------------------------------------------------------
// n(".", "\n"); // Test 191
scan_test!(case_191, s191, S191, r#"."#, "\n", &[], 191);

// -------------------------------------------------------------------------
// x2("(?m:.)", "\n", 0, 1); // Test 192
scan_test!(
    case_192,
    s192,
    S192,
    r#"(?m:.)"#,
    "\n",
    &[], // Oniguruma : ("\n", 0, 1)
    192
);

// -------------------------------------------------------------------------
// x2("(?m:a.)", "a\n", 0, 2); // Test 193
scan_test!(
    case_193,
    s193,
    S193,
    r#"(?m:a.)"#,
    "a\n",
    &[], // Oniguruma : ("a\n", 0, 2)
    193
);

// -------------------------------------------------------------------------
// x2("(?m:.b)", "a\nb", 1, 3); // Test 194
scan_test!(
    case_194,
    s194,
    S194,
    r#"(?m:.b)"#,
    "a\nb",
    &[], // Oniguruma : ("a\nb", 1, 3)
    194
);

// -------------------------------------------------------------------------
// x2(".*abc", "dddabdd\nddabc", 8, 13); // Test 195
scan_test!(
    case_195,
    s195,
    S195,
    r#".*abc"#,
    "dddabdd\nddabc",
    &[("ddabc", 8, 13)],
    195
);

// -------------------------------------------------------------------------
// x2(".+abc", "dddabdd\nddabcaa\naaaabc", 8, 13); // Test 196
scan_test!(
    case_196,
    s196,
    S196,
    r#".+abc"#,
    "dddabdd\nddabcaa\naaaabc",
    &[("ddabc", 8, 13), ("aaaabc", 16, 22)],
    196
);

// -------------------------------------------------------------------------
// x2("(?m:.*abc)", "dddabddabc", 0, 10); // Test 197
scan_test!(
    case_197,
    s197,
    S197,
    r#"(?m:.*abc)"#,
    "dddabddabc",
    &[("dddabddabc", 0, 10)],
    197
);

// -------------------------------------------------------------------------
// n("(?i)(?-i)a", "A"); // Test 198
scan_test!(case_198, s198, S198, r#"(?i)(?-i)a"#, "A", &[], 198);

// -------------------------------------------------------------------------
// n("(?i)(?-i:a)", "A"); // Test 199
scan_test!(case_199, s199, S199, r#"(?i)(?-i:a)"#, "A", &[], 199);

// -------------------------------------------------------------------------
// x2("a?", "", 0, 0); // Test 200
scan_test!(case_200, s200, S200, r#"a?"#, "", &[], 200);

// -------------------------------------------------------------------------
// x2("a?", "b", 0, 0); // Test 201
scan_test!(case_201, s201, S201, r#"a?"#, "b", &[], 201);

// -------------------------------------------------------------------------
// x2("a?", "a", 0, 1); // Test 202
scan_test!(case_202, s202, S202, r#"a?"#, "a", &[("a", 0, 1)], 202);

// -------------------------------------------------------------------------
// x2("a*", "", 0, 0); // Test 203
scan_test!(case_203, s203, S203, r#"a*"#, "", &[], 203);

// -------------------------------------------------------------------------
// x2("a*", "a", 0, 1); // Test 204
scan_test!(case_204, s204, S204, r#"a*"#, "a", &[("a", 0, 1)], 204);

// -------------------------------------------------------------------------
// x2("a*", "aaa", 0, 3); // Test 205
scan_test!(case_205, s205, S205, r#"a*"#, "aaa", &[("aaa", 0, 3)], 205);

// -------------------------------------------------------------------------
// x2("a*", "baaaa", 0, 0); // Test 206
scan_test!(
    case_206,
    s206,
    S206,
    r#"a*"#,
    "baaaa",
    &[("aaaa", 1, 5)],
    206
);

// -------------------------------------------------------------------------
// n("a+", ""); // Test 207
scan_test!(case_207, s207, S207, r#"a+"#, "", &[], 207);

// -------------------------------------------------------------------------
// x2("a+", "a", 0, 1); // Test 208
scan_test!(case_208, s208, S208, r#"a+"#, "a", &[("a", 0, 1)], 208);

// -------------------------------------------------------------------------
// x2("a+", "aaaa", 0, 4); // Test 209
scan_test!(
    case_209,
    s209,
    S209,
    r#"a+"#,
    "aaaa",
    &[("aaaa", 0, 4)],
    209
);

// -------------------------------------------------------------------------
// x2("a+", "aabbb", 0, 2); // Test 210
scan_test!(case_210, s210, S210, r#"a+"#, "aabbb", &[("aa", 0, 2)], 210);

// -------------------------------------------------------------------------
// x2("a+", "baaaa", 1, 5); // Test 211
scan_test!(
    case_211,
    s211,
    S211,
    r#"a+"#,
    "baaaa",
    &[("aaaa", 1, 5)],
    211
);

// -------------------------------------------------------------------------
// x2(".?", "", 0, 0); // Test 212
scan_test!(case_212, s212, S212, r#".?"#, "", &[], 212);

// -------------------------------------------------------------------------
// x2(".?", "f", 0, 1); // Test 213
scan_test!(case_213, s213, S213, r#".?"#, "f", &[("f", 0, 1)], 213);

// -------------------------------------------------------------------------
// x2(".?", "\n", 0, 0); // Test 214
scan_test!(case_214, s214, S214, r#".?"#, "\n", &[], 214);

// -------------------------------------------------------------------------
// x2(".*", "", 0, 0); // Test 215
scan_test!(case_215, s215, S215, r#".*"#, "", &[], 215);

// -------------------------------------------------------------------------
// x2(".*", "abcde", 0, 5); // Test 216
scan_test!(
    case_216,
    s216,
    S216,
    r#".*"#,
    "abcde",
    &[("abcde", 0, 5)],
    216
);

// -------------------------------------------------------------------------
// x2(".+", "z", 0, 1); // Test 217
scan_test!(case_217, s217, S217, r#".+"#, "z", &[("z", 0, 1)], 217);

// -------------------------------------------------------------------------
// x2(".+", "zdswer\n", 0, 6); // Test 218
scan_test!(
    case_218,
    s218,
    S218,
    r#".+"#,
    "zdswer\n",
    &[("zdswer", 0, 6)],
    218
);

// -------------------------------------------------------------------------
// x2("(.*)a\\1f", "babfbac", 0, 4); // Test 219
regex_error!(
    case_219,
    "(.*)a\\1f",
    r#"backreferences are not supported"#,
    219
);

// -------------------------------------------------------------------------
// x2("(.*)a\\1f", "bacbabf", 3, 7); // Test 220
regex_error!(
    case_220,
    "(.*)a\\1f",
    r#"backreferences are not supported"#,
    220
);

// -------------------------------------------------------------------------
// x2("((.*)a\\2f)", "bacbabf", 3, 7); // Test 221
regex_error!(
    case_221,
    "((.*)a\\2f)",
    r#"backreferences are not supported"#,
    221
);

// -------------------------------------------------------------------------
// x2("(.*)a\\1f", "baczzzzzz\nbazz\nzzzzbabf", 19, 23); // Test 222
regex_error!(
    case_222,
    "(.*)a\\1f",
    r#"backreferences are not supported"#,
    222
);

// -------------------------------------------------------------------------
// x2("(?:x?)?", "", 0, 0); // Test 223
scan_test!(case_223, s223, S223, r#"(?:x?)?"#, "", &[], 223);

// -------------------------------------------------------------------------
// x2("(?:x?)?", "x", 0, 1); // Test 224
scan_test!(case_224, s224, S224, r#"(?:x?)?"#, "x", &[("x", 0, 1)], 224);

// -------------------------------------------------------------------------
// x2("(?:x?)?", "xx", 0, 1); // Test 225
scan_test!(
    case_225,
    s225,
    S225,
    r#"(?:x?)?"#,
    "xx",
    &[("x", 0, 1), ("x", 1, 2)],
    225
);

// -------------------------------------------------------------------------
// x2("(?:x?)*", "", 0, 0); // Test 226
scan_test!(case_226, s226, S226, r#"(?:x?)*"#, "", &[], 226);

// -------------------------------------------------------------------------
// x2("(?:x?)*", "x", 0, 1); // Test 227
scan_test!(case_227, s227, S227, r#"(?:x?)*"#, "x", &[("x", 0, 1)], 227);

// -------------------------------------------------------------------------
// x2("(?:x?)*", "xx", 0, 2); // Test 228
scan_test!(
    case_228,
    s228,
    S228,
    r#"(?:x?)*"#,
    "xx",
    &[("xx", 0, 2)],
    228
);

// -------------------------------------------------------------------------
// x2("(?:x?)+", "", 0, 0); // Test 229
scan_test!(case_229, s229, S229, r#"(?:x?)+"#, "", &[], 229);

// -------------------------------------------------------------------------
// x2("(?:x?)+", "x", 0, 1); // Test 230
scan_test!(case_230, s230, S230, r#"(?:x?)+"#, "x", &[("x", 0, 1)], 230);

// -------------------------------------------------------------------------
// x2("(?:x?)+", "xx", 0, 2); // Test 231
scan_test!(
    case_231,
    s231,
    S231,
    r#"(?:x?)+"#,
    "xx",
    &[("xx", 0, 2)],
    231
);

// -------------------------------------------------------------------------
// x2("(?:x?)\?\?", "", 0, 0); // Test 232
scan_test!(case_232, s232, S232, r#"(?:x?)\?\?"#, "", &[], 232);

// -------------------------------------------------------------------------
// x2("(?:x?)\?\?", "x", 0, 0); // Test 233
scan_test!(case_233, s233, S233, r#"(?:x?)\?\?"#, "x", &[], 233);

// -------------------------------------------------------------------------
// x2("(?:x?)\?\?", "xx", 0, 0); // Test 234
scan_test!(case_234, s234, S234, r#"(?:x?)\?\?"#, "xx", &[], 234);

// -------------------------------------------------------------------------
// x2("(?:x?)*?", "", 0, 0); // Test 235
regex_error!(case_235, "(?:x?)*?", r#"Non-greedy repetitions"#, 235);

// -------------------------------------------------------------------------
// x2("(?:x?)*?", "x", 0, 0); // Test 236
regex_error!(case_236, "(?:x?)*?", r#"Non-greedy repetitions"#, 236);

// -------------------------------------------------------------------------
// x2("(?:x?)*?", "xx", 0, 0); // Test 237
regex_error!(case_237, "(?:x?)*?", r#"Non-greedy repetitions"#, 237);

// -------------------------------------------------------------------------
// x2("(?:x?)+?", "", 0, 0); // Test 238
regex_error!(case_238, "(?:x?)+?", r#"Non-greedy repetitions"#, 238);

// -------------------------------------------------------------------------
// x2("(?:x?)+?", "x", 0, 1); // Test 239
regex_error!(case_239, "(?:x?)+?", r#"Non-greedy repetitions"#, 239);

// -------------------------------------------------------------------------
// x2("(?:x?)+?", "xx", 0, 1); // Test 240
regex_error!(case_240, "(?:x?)+?", r#"Non-greedy repetitions"#, 240);

// -------------------------------------------------------------------------
// x2("(?:x*)?", "", 0, 0); // Test 241
scan_test!(case_241, s241, S241, r#"(?:x*)?"#, "", &[], 241);

// -------------------------------------------------------------------------
// x2("(?:x*)?", "x", 0, 1); // Test 242
scan_test!(case_242, s242, S242, r#"(?:x*)?"#, "x", &[("x", 0, 1)], 242);

// -------------------------------------------------------------------------
// x2("(?:x*)?", "xx", 0, 2); // Test 243
scan_test!(
    case_243,
    s243,
    S243,
    r#"(?:x*)?"#,
    "xx",
    &[("xx", 0, 2)],
    243
);

// -------------------------------------------------------------------------
// x2("(?:x*)*", "", 0, 0); // Test 244
scan_test!(case_244, s244, S244, r#"(?:x*)*"#, "", &[], 244);

// -------------------------------------------------------------------------
// x2("(?:x*)*", "x", 0, 1); // Test 245
scan_test!(case_245, s245, S245, r#"(?:x*)*"#, "x", &[("x", 0, 1)], 245);

// -------------------------------------------------------------------------
// x2("(?:x*)*", "xx", 0, 2); // Test 246
scan_test!(
    case_246,
    s246,
    S246,
    r#"(?:x*)*"#,
    "xx",
    &[("xx", 0, 2)],
    246
);

// -------------------------------------------------------------------------
// x2("(?:x*)+", "", 0, 0); // Test 247
scan_test!(case_247, s247, S247, r#"(?:x*)+"#, "", &[], 247);

// -------------------------------------------------------------------------
// x2("(?:x*)+", "x", 0, 1); // Test 248
scan_test!(case_248, s248, S248, r#"(?:x*)+"#, "x", &[("x", 0, 1)], 248);

// -------------------------------------------------------------------------
// x2("(?:x*)+", "xx", 0, 2); // Test 249
scan_test!(
    case_249,
    s249,
    S249,
    r#"(?:x*)+"#,
    "xx",
    &[("xx", 0, 2)],
    249
);

// -------------------------------------------------------------------------
// x2("(?:x*)\?\?", "", 0, 0); // Test 250
scan_test!(case_250, s250, S250, r#"(?:x*)\?\?"#, "", &[], 250);

// -------------------------------------------------------------------------
// x2("(?:x*)\?\?", "x", 0, 0); // Test 251
scan_test!(case_251, s251, S251, r#"(?:x*)\?\?"#, "x", &[], 251);

// -------------------------------------------------------------------------
// x2("(?:x*)\?\?", "xx", 0, 0); // Test 252
scan_test!(case_252, s252, S252, r#"(?:x*)\?\?"#, "xx", &[], 252);

// -------------------------------------------------------------------------
// x2("(?:x*)*?", "", 0, 0); // Test 253
regex_error!(case_253, "(?:x*)*?", r#"Non-greedy repetitions"#, 253);

// -------------------------------------------------------------------------
// x2("(?:x*)*?", "x", 0, 0); // Test 254
regex_error!(case_254, "(?:x*)*?", r#"Non-greedy repetitions"#, 254);

// -------------------------------------------------------------------------
// x2("(?:x*)*?", "xx", 0, 0); // Test 255
regex_error!(case_255, "(?:x*)*?", r#"Non-greedy repetitions"#, 255);

// -------------------------------------------------------------------------
// x2("(?:x*)+?", "", 0, 0); // Test 256
regex_error!(case_256, "(?:x*)+?", r#"Non-greedy repetitions"#, 256);

// -------------------------------------------------------------------------
// x2("(?:x*)+?", "x", 0, 1); // Test 257
regex_error!(case_257, "(?:x*)+?", r#"Non-greedy repetitions"#, 257);

// -------------------------------------------------------------------------
// x2("(?:x*)+?", "xx", 0, 2); // Test 258
regex_error!(case_258, "(?:x*)+?", r#"Non-greedy repetitions"#, 258);

// -------------------------------------------------------------------------
// x2("(?:x+)?", "", 0, 0); // Test 259
scan_test!(case_259, s259, S259, r#"(?:x+)?"#, "", &[], 259);

// -------------------------------------------------------------------------
// x2("(?:x+)?", "x", 0, 1); // Test 260
scan_test!(case_260, s260, S260, r#"(?:x+)?"#, "x", &[("x", 0, 1)], 260);

// -------------------------------------------------------------------------
// x2("(?:x+)?", "xx", 0, 2); // Test 261
scan_test!(
    case_261,
    s261,
    S261,
    r#"(?:x+)?"#,
    "xx",
    &[("xx", 0, 2)],
    261
);

// -------------------------------------------------------------------------
// x2("(?:x+)*", "", 0, 0); // Test 262
scan_test!(case_262, s262, S262, r#"(?:x+)*"#, "", &[], 262);

// -------------------------------------------------------------------------
// x2("(?:x+)*", "x", 0, 1); // Test 263
scan_test!(case_263, s263, S263, r#"(?:x+)*"#, "x", &[("x", 0, 1)], 263);

// -------------------------------------------------------------------------
// x2("(?:x+)*", "xx", 0, 2); // Test 264
scan_test!(
    case_264,
    s264,
    S264,
    r#"(?:x+)*"#,
    "xx",
    &[("xx", 0, 2)],
    264
);

// -------------------------------------------------------------------------
// n("(?:x+)+", ""); // Test 265
scan_test!(case_265, s265, S265, r#"(?:x+)+"#, "", &[], 265);

// -------------------------------------------------------------------------
// x2("(?:x+)+", "x", 0, 1); // Test 266
scan_test!(case_266, s266, S266, r#"(?:x+)+"#, "x", &[("x", 0, 1)], 266);

// -------------------------------------------------------------------------
// x2("(?:x+)+", "xx", 0, 2); // Test 267
scan_test!(
    case_267,
    s267,
    S267,
    r#"(?:x+)+"#,
    "xx",
    &[("xx", 0, 2)],
    267
);

// -------------------------------------------------------------------------
// x2("(?:x+)\?\?", "", 0, 0); // Test 268
scan_test!(case_268, s268, S268, r#"(?:x+)\?\?"#, "", &[], 268);

// -------------------------------------------------------------------------
// x2("(?:x+)\?\?", "x", 0, 0); // Test 269
scan_test!(case_269, s269, S269, r#"(?:x+)\?\?"#, "x", &[], 269);

// -------------------------------------------------------------------------
// x2("(?:x+)\?\?", "xx", 0, 0); // Test 270
scan_test!(case_270, s270, S270, r#"(?:x+)\?\?"#, "xx", &[], 270);

// -------------------------------------------------------------------------
// x2("(?:x+)*?", "", 0, 0); // Test 271
regex_error!(case_271, "(?:x+)*?", r#"Non-greedy repetitions"#, 271);

// -------------------------------------------------------------------------
// x2("(?:x+)*?", "x", 0, 0); // Test 272
regex_error!(case_272, "(?:x+)*?", r#"Non-greedy repetitions"#, 272);

// -------------------------------------------------------------------------
// x2("(?:x+)*?", "xx", 0, 0); // Test 273
regex_error!(case_273, "(?:x+)*?", r#"Non-greedy repetitions"#, 273);

// -------------------------------------------------------------------------
// n("(?:x+)+?", ""); // Test 274
regex_error!(case_274, "(?:x+)+?", r#"Non-greedy repetitions"#, 274);

// -------------------------------------------------------------------------
// x2("(?:x+)+?", "x", 0, 1); // Test 275
regex_error!(case_275, "(?:x+)+?", r#"Non-greedy repetitions"#, 275);

// -------------------------------------------------------------------------
// x2("(?:x+)+?", "xx", 0, 2); // Test 276
regex_error!(case_276, "(?:x+)+?", r#"Non-greedy repetitions"#, 276);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)?", "", 0, 0); // Test 277
scan_test!(case_277, s277, S277, r#"(?:x\?\?)?"#, "", &[], 277);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)?", "x", 0, 0); // Test 278
scan_test!(case_278, s278, S278, r#"(?:x\?\?)?"#, "x", &[], 278);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)?", "xx", 0, 0); // Test 279
scan_test!(case_279, s279, S279, r#"(?:x\?\?)?"#, "xx", &[], 279);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*", "", 0, 0); // Test 280
scan_test!(case_280, s280, S280, r#"(?:x\?\?)*"#, "", &[], 280);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*", "x", 0, 0); // Test 281
scan_test!(case_281, s281, S281, r#"(?:x\?\?)*"#, "x", &[], 281);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*", "xx", 0, 0); // Test 282
scan_test!(case_282, s282, S282, r#"(?:x\?\?)*"#, "xx", &[], 282);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+", "", 0, 0); // Test 283
scan_test!(case_283, s283, S283, r#"(?:x\?\?)+"#, "", &[], 283);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+", "x", 0, 0); // Test 284
scan_test!(case_284, s284, S284, r#"(?:x\?\?)+"#, "x", &[], 284);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+", "xx", 0, 0); // Test 285
scan_test!(case_285, s285, S285, r#"(?:x\?\?)+"#, "xx", &[], 285);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)\?\?", "", 0, 0); // Test 286
scan_test!(case_286, s286, S286, r#"(?:x\?\?)\?\?"#, "", &[], 286);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)\?\?", "x", 0, 0); // Test 287
scan_test!(case_287, s287, S287, r#"(?:x\?\?)\?\?"#, "x", &[], 287);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)\?\?", "xx", 0, 0); // Test 288
scan_test!(case_288, s288, S288, r#"(?:x\?\?)\?\?"#, "xx", &[], 288);

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*?", "", 0, 0); // Test 289
// regex_error!(case_289, "(?:x\?\?)*?", r#"Non-greedy repetitions"#, 289); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*?", "x", 0, 0); // Test 290
// regex_error!(case_290, "(?:x\?\?)*?", r#"Non-greedy repetitions"#, 290); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x\?\?)*?", "xx", 0, 0); // Test 291
// regex_error!(case_291, "(?:x\?\?)*?", r#"Non-greedy repetitions"#, 291); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+?", "", 0, 0); // Test 292
// regex_error!(case_292, "(?:x\?\?)+?", r#"Non-greedy repetitions"#, 292); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+?", "x", 0, 0); // Test 293
// regex_error!(case_293, "(?:x\?\?)+?", r#"Non-greedy repetitions"#, 293); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x\?\?)+?", "xx", 0, 0); // Test 294
// regex_error!(case_294, "(?:x\?\?)+?", r#"Non-greedy repetitions"#, 294); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x*?)?", "", 0, 0); // Test 295
regex_error!(case_295, "(?:x*?)?", r#"Non-greedy repetitions"#, 295);

// -------------------------------------------------------------------------
// x2("(?:x*?)?", "x", 0, 0); // Test 296
regex_error!(case_296, "(?:x*?)?", r#"Non-greedy repetitions"#, 296);

// -------------------------------------------------------------------------
// x2("(?:x*?)?", "xx", 0, 0); // Test 297
regex_error!(case_297, "(?:x*?)?", r#"Non-greedy repetitions"#, 297);

// -------------------------------------------------------------------------
// x2("(?:x*?)*", "", 0, 0); // Test 298
regex_error!(case_298, "(?:x*?)*", r#"Non-greedy repetitions"#, 298);

// -------------------------------------------------------------------------
// x2("(?:x*?)*", "x", 0, 0); // Test 299
regex_error!(case_299, "(?:x*?)*", r#"Non-greedy repetitions"#, 299);

// -------------------------------------------------------------------------
// x2("(?:x*?)*", "xx", 0, 0); // Test 300
regex_error!(case_300, "(?:x*?)*", r#"Non-greedy repetitions"#, 300);

// -------------------------------------------------------------------------
// x2("(?:x*?)+", "", 0, 0); // Test 301
regex_error!(case_301, "(?:x*?)+", r#"Non-greedy repetitions"#, 301);

// -------------------------------------------------------------------------
// x2("(?:x*?)+", "x", 0, 0); // Test 302
regex_error!(case_302, "(?:x*?)+", r#"Non-greedy repetitions"#, 302);

// -------------------------------------------------------------------------
// x2("(?:x*?)+", "xx", 0, 0); // Test 303
regex_error!(case_303, "(?:x*?)+", r#"Non-greedy repetitions"#, 303);

// -------------------------------------------------------------------------
// x2("(?:x*?)\?\?", "", 0, 0); // Test 304
// regex_error!(case_304, "(?:x*?)\?\?", r#"Non-greedy repetitions"#, 304); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x*?)\?\?", "x", 0, 0); // Test 305
// regex_error!(case_305, "(?:x*?)\?\?", r#"Non-greedy repetitions"#, 305); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x*?)\?\?", "xx", 0, 0); // Test 306
// regex_error!(case_306, "(?:x*?)\?\?", r#"Non-greedy repetitions"#, 306); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x*?)*?", "", 0, 0); // Test 307
regex_error!(case_307, "(?:x*?)*?", r#"Non-greedy repetitions"#, 307);

// -------------------------------------------------------------------------
// x2("(?:x*?)*?", "x", 0, 0); // Test 308
regex_error!(case_308, "(?:x*?)*?", r#"Non-greedy repetitions"#, 308);

// -------------------------------------------------------------------------
// x2("(?:x*?)*?", "xx", 0, 0); // Test 309
regex_error!(case_309, "(?:x*?)*?", r#"Non-greedy repetitions"#, 309);

// -------------------------------------------------------------------------
// x2("(?:x*?)+?", "", 0, 0); // Test 310
regex_error!(case_310, "(?:x*?)+?", r#"Non-greedy repetitions"#, 310);

// -------------------------------------------------------------------------
// x2("(?:x*?)+?", "x", 0, 0); // Test 311
regex_error!(case_311, "(?:x*?)+?", r#"Non-greedy repetitions"#, 311);

// -------------------------------------------------------------------------
// x2("(?:x*?)+?", "xx", 0, 0); // Test 312
regex_error!(case_312, "(?:x*?)+?", r#"Non-greedy repetitions"#, 312);

// -------------------------------------------------------------------------
// x2("(?:x+?)?", "", 0, 0); // Test 313
regex_error!(case_313, "(?:x+?)?", r#"Non-greedy repetitions"#, 313);

// -------------------------------------------------------------------------
// x2("(?:x+?)?", "x", 0, 1); // Test 314
regex_error!(case_314, "(?:x+?)?", r#"Non-greedy repetitions"#, 314);

// -------------------------------------------------------------------------
// x2("(?:x+?)?", "xx", 0, 1); // Test 315
regex_error!(case_315, "(?:x+?)?", r#"Non-greedy repetitions"#, 315);

// -------------------------------------------------------------------------
// x2("(?:x+?)*", "", 0, 0); // Test 316
regex_error!(case_316, "(?:x+?)*", r#"Non-greedy repetitions"#, 316);

// -------------------------------------------------------------------------
// x2("(?:x+?)*", "x", 0, 1); // Test 317
regex_error!(case_317, "(?:x+?)*", r#"Non-greedy repetitions"#, 317);

// -------------------------------------------------------------------------
// x2("(?:x+?)*", "xx", 0, 2); // Test 318
regex_error!(case_318, "(?:x+?)*", r#"Non-greedy repetitions"#, 318);

// -------------------------------------------------------------------------
// n("(?:x+?)+", ""); // Test 319
regex_error!(case_319, "(?:x+?)+", r#"Non-greedy repetitions"#, 319);

// -------------------------------------------------------------------------
// x2("(?:x+?)+", "x", 0, 1); // Test 320
regex_error!(case_320, "(?:x+?)+", r#"Non-greedy repetitions"#, 320);

// -------------------------------------------------------------------------
// x2("(?:x+?)+", "xx", 0, 2); // Test 321
regex_error!(case_321, "(?:x+?)+", r#"Non-greedy repetitions"#, 321);

// -------------------------------------------------------------------------
// x2("(?:x+?)\?\?", "", 0, 0); // Test 322
// regex_error!(case_322, "(?:x+?)\?\?", r#"Non-greedy repetitions"#, 322); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x+?)\?\?", "x", 0, 0); // Test 323
// regex_error!(case_323, "(?:x+?)\?\?", r#"Non-greedy repetitions"#, 323); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x+?)\?\?", "xx", 0, 0); // Test 324
// regex_error!(case_324, "(?:x+?)\?\?", r#"Non-greedy repetitions"#, 324); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(?:x+?)*?", "", 0, 0); // Test 325
regex_error!(case_325, "(?:x+?)*?", r#"Non-greedy repetitions"#, 325);

// -------------------------------------------------------------------------
// x2("(?:x+?)*?", "x", 0, 0); // Test 326
regex_error!(case_326, "(?:x+?)*?", r#"Non-greedy repetitions"#, 326);

// -------------------------------------------------------------------------
// x2("(?:x+?)*?", "xx", 0, 0); // Test 327
regex_error!(case_327, "(?:x+?)*?", r#"Non-greedy repetitions"#, 327);

// -------------------------------------------------------------------------
// n("(?:x+?)+?", ""); // Test 328
regex_error!(case_328, "(?:x+?)+?", r#"Non-greedy repetitions"#, 328);

// -------------------------------------------------------------------------
// x2("(?:x+?)+?", "x", 0, 1); // Test 329
regex_error!(case_329, "(?:x+?)+?", r#"Non-greedy repetitions"#, 329);

// -------------------------------------------------------------------------
// x2("(?:x+?)+?", "xx", 0, 1); // Test 330
regex_error!(case_330, "(?:x+?)+?", r#"Non-greedy repetitions"#, 330);

// -------------------------------------------------------------------------
// x2("a|b", "a", 0, 1); // Test 331
scan_test!(case_331, s331, S331, r#"a|b"#, "a", &[("a", 0, 1)], 331);

// -------------------------------------------------------------------------
// x2("a|b", "b", 0, 1); // Test 332
scan_test!(case_332, s332, S332, r#"a|b"#, "b", &[("b", 0, 1)], 332);

// -------------------------------------------------------------------------
// x2("|a", "a", 0, 0); // Test 333
scan_test!(
    case_333,
    s333,
    S333,
    r#"|a"#,
    "a",
    &[("a", 0, 1)], // Oniguruma: no match
    333
);

// -------------------------------------------------------------------------
// x2("(|a)", "a", 0, 0); // Test 334
scan_test!(
    case_334,
    s334,
    S334,
    r#"(|a)"#,
    "a",
    &[("a", 0, 1)], // Oniguruma: no match
    334
);

// -------------------------------------------------------------------------
// x2("ab|bc", "ab", 0, 2); // Test 335
scan_test!(case_335, s335, S335, r#"ab|bc"#, "ab", &[("ab", 0, 2)], 335);

// -------------------------------------------------------------------------
// x2("ab|bc", "bc", 0, 2); // Test 336
scan_test!(case_336, s336, S336, r#"ab|bc"#, "bc", &[("bc", 0, 2)], 336);

// -------------------------------------------------------------------------
// x2("z(?:ab|bc)", "zbc", 0, 3); // Test 337
scan_test!(
    case_337,
    s337,
    S337,
    r#"z(?:ab|bc)"#,
    "zbc",
    &[("zbc", 0, 3)],
    337
);

// -------------------------------------------------------------------------
// x2("a(?:ab|bc)c", "aabc", 0, 4); // Test 338
scan_test!(
    case_338,
    s338,
    S338,
    r#"a(?:ab|bc)c"#,
    "aabc",
    &[("aabc", 0, 4)],
    338
);

// -------------------------------------------------------------------------
// x2("ab|(?:ac|az)", "az", 0, 2); // Test 339
scan_test!(
    case_339,
    s339,
    S339,
    r#"ab|(?:ac|az)"#,
    "az",
    &[("az", 0, 2)],
    339
);

// -------------------------------------------------------------------------
// x2("a|b|c", "dc", 1, 2); // Test 340
scan_test!(case_340, s340, S340, r#"a|b|c"#, "dc", &[("c", 1, 2)], 340);

// -------------------------------------------------------------------------
// x2("a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz", "pqr", 0, 2); // Test 341
scan_test!(
    case_341,
    s341,
    S341,
    r#"a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz"#,
    "pqr",
    &[("pq", 0, 2)],
    341
);

// -------------------------------------------------------------------------
// n("a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz", "mn"); // Test 342
scan_test!(
    case_342,
    s342,
    S342,
    r#"a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz"#,
    "mn",
    &[],
    342
);

// -------------------------------------------------------------------------
// x2("a|^z", "ba", 1, 2); // Test 343
regex_error!(case_343, "a|^z", r#"StartLine Look(Start)"#, 343);

// -------------------------------------------------------------------------
// x2("a|^z", "za", 0, 1); // Test 344
regex_error!(case_344, "a|^z", r#"StartLine Look(Start)"#, 344);

// -------------------------------------------------------------------------
// x2("a|\\Gz", "bza", 2, 3); // Test 345
regex_error!(case_345, "a|\\Gz", r#"unrecognized escape sequence"#, 345);

// -------------------------------------------------------------------------
// x2("a|\\Gz", "za", 0, 1); // Test 346
regex_error!(case_346, "a|\\Gz", r#"unrecognized escape sequence"#, 346);

// -------------------------------------------------------------------------
// x2("a|\\Az", "bza", 2, 3); // Test 347
regex_error!(case_347, "a|\\Az", r#"StartLine Look(Start)"#, 347);

// -------------------------------------------------------------------------
// x2("a|\\Az", "za", 0, 1); // Test 348
regex_error!(case_348, "a|\\Az", r#"StartLine Look(Start)"#, 348);

// -------------------------------------------------------------------------
// x2("a|b\\Z", "ba", 1, 2); // Test 349
regex_error!(case_349, "a|b\\Z", r#"unrecognized escape sequence"#, 349);

// -------------------------------------------------------------------------
// x2("a|b\\Z", "b", 0, 1); // Test 350
regex_error!(case_350, "a|b\\Z", r#"unrecognized escape sequence"#, 350);

// -------------------------------------------------------------------------
// x2("a|b\\z", "ba", 1, 2); // Test 351
regex_error!(case_351, "a|b\\z", r#"EndLine Look(End)"#, 351);

// -------------------------------------------------------------------------
// x2("a|b\\z", "b", 0, 1); // Test 352
regex_error!(case_352, "a|b\\z", r#"EndLine Look(End)"#, 352);

// -------------------------------------------------------------------------
// x2("\\w|\\s", " ", 0, 1); // Test 353
scan_test!(case_353, s353, S353, r#"\w|\s"#, " ", &[(" ", 0, 1)], 353);

// -------------------------------------------------------------------------
// n("\\w|\\w", " "); // Test 354
scan_test!(case_354, s354, S354, r#"\w|\w"#, " ", &[], 354);

// -------------------------------------------------------------------------
// x2("\\w|%", "%", 0, 1); // Test 355
scan_test!(case_355, s355, S355, r#"\w|%"#, "%", &[("%", 0, 1)], 355);

// -------------------------------------------------------------------------
// x2("\\w|[&$]", "&", 0, 1); // Test 356
scan_test!(case_356, s356, S356, r#"\w|[&$]"#, "&", &[("&", 0, 1)], 356);

// -------------------------------------------------------------------------
// x2("[b-d]|[^e-z]", "a", 0, 1); // Test 357
scan_test!(
    case_357,
    s357,
    S357,
    r#"[b-d]|[^e-z]"#,
    "a",
    &[("a", 0, 1)],
    357
);

// -------------------------------------------------------------------------
// x2("(?:a|[c-f])|bz", "dz", 0, 1); // Test 358
scan_test!(
    case_358,
    s358,
    S358,
    r#"(?:a|[c-f])|bz"#,
    "dz",
    &[("d", 0, 1)],
    358
);

// -------------------------------------------------------------------------
// x2("(?:a|[c-f])|bz", "bz", 0, 2); // Test 359
scan_test!(
    case_359,
    s359,
    S359,
    r#"(?:a|[c-f])|bz"#,
    "bz",
    &[("bz", 0, 2)],
    359
);

// -------------------------------------------------------------------------
// x2("abc|(?=zz)..f", "zzf", 0, 3); // Test 360
regex_error!(
    case_360,
    "abc|(?=zz)..f",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    360
);

// -------------------------------------------------------------------------
// x2("abc|(?!zz)..f", "abf", 0, 3); // Test 361
regex_error!(
    case_361,
    "abc|(?!zz)..f",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    361
);

// -------------------------------------------------------------------------
// x2("(?=za)..a|(?=zz)..a", "zza", 0, 3); // Test 362
regex_error!(
    case_362,
    "(?=za)..a|(?=zz)..a",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    362
);

// -------------------------------------------------------------------------
// n("(?>a|abd)c", "abdc"); // Test 363
regex_error!(case_363, "(?>a|abd)c", r#"unrecognized flag"#, 363);

// -------------------------------------------------------------------------
// x2("(?>abd|a)c", "abdc", 0, 4); // Test 364
regex_error!(case_364, "(?>abd|a)c", r#"unrecognized flag"#, 364);

// -------------------------------------------------------------------------
// x2("a?|b", "a", 0, 1); // Test 365
scan_test!(case_365, s365, S365, r#"a?|b"#, "a", &[("a", 0, 1)], 365);

// -------------------------------------------------------------------------
// x2("a?|b", "a", 0, 1); // Test 366
scan_test!(case_366, s366, S366, r#"a?|b"#, "a", &[("a", 0, 1)], 366);

// -------------------------------------------------------------------------
// x2("a?|b", "b", 0, 0); // Test 367
scan_test!(case_367, s367, S367, r#"a?|b"#, "b", &[("b", 0, 1)], 367);

// -------------------------------------------------------------------------
// x2("a?|b", "", 0, 0); // Test 368
scan_test!(case_368, s368, S368, r#"a?|b"#, "", &[], 368);

// -------------------------------------------------------------------------
// x2("a*|b", "aa", 0, 2); // Test 369
scan_test!(case_369, s369, S369, r#"a*|b"#, "aa", &[("aa", 0, 2)], 369);

// -------------------------------------------------------------------------
// x2("a*|b*", "ba", 0, 0); // Test 370
scan_test!(
    case_370,
    s370,
    S370,
    r#"a*|b*"#,
    "ba",
    &[("b", 0, 1), ("a", 1, 2)],
    370
);

// -------------------------------------------------------------------------
// x2("a*|b*", "ab", 0, 1); // Test 371
scan_test!(
    case_371,
    s371,
    S371,
    r#"a*|b*"#,
    "ab",
    &[("a", 0, 1), ("b", 1, 2)],
    371
);

// -------------------------------------------------------------------------
// x2("a+|b*", "", 0, 0); // Test 372
scan_test!(case_372, s372, S372, r#"a+|b*"#, "", &[], 372);

// -------------------------------------------------------------------------
// x2("a+|b*", "bbb", 0, 3); // Test 373
scan_test!(
    case_373,
    s373,
    S373,
    r#"a+|b*"#,
    "bbb",
    &[("bbb", 0, 3)],
    373
);

// -------------------------------------------------------------------------
// x2("a+|b*", "abbb", 0, 1); // Test 374
scan_test!(
    case_374,
    s374,
    S374,
    r#"a+|b*"#,
    "abbb",
    &[("a", 0, 1), ("bbb", 1, 4)],
    374
);

// -------------------------------------------------------------------------
// n("a+|b+", ""); // Test 375
scan_test!(case_375, s375, S375, r#"a+|b+"#, "", &[], 375);

// -------------------------------------------------------------------------
// x2("(a|b)?", "b", 0, 1); // Test 376
scan_test!(case_376, s376, S376, r#"(a|b)?"#, "b", &[("b", 0, 1)], 376);

// -------------------------------------------------------------------------
// x2("(a|b)*", "ba", 0, 2); // Test 377
scan_test!(
    case_377,
    s377,
    S377,
    r#"(a|b)*"#,
    "ba",
    &[("ba", 0, 2)],
    377
);

// -------------------------------------------------------------------------
// x2("(a|b)+", "bab", 0, 3); // Test 378
scan_test!(
    case_378,
    s378,
    S378,
    r#"(a|b)+"#,
    "bab",
    &[("bab", 0, 3)],
    378
);

// -------------------------------------------------------------------------
// x2("(ab|ca)+", "caabbc", 0, 4); // Test 379
scan_test!(
    case_379,
    s379,
    S379,
    r#"(ab|ca)+"#,
    "caabbc",
    &[("caab", 0, 4)],
    379
);

// -------------------------------------------------------------------------
// x2("(ab|ca)+", "aabca", 1, 5); // Test 380
scan_test!(
    case_380,
    s380,
    S380,
    r#"(ab|ca)+"#,
    "aabca",
    &[("abca", 1, 5)],
    380
);

// -------------------------------------------------------------------------
// x2("(ab|ca)+", "abzca", 0, 2); // Test 381
scan_test!(
    case_381,
    s381,
    S381,
    r#"(ab|ca)+"#,
    "abzca",
    &[("ab", 0, 2), ("ca", 3, 5)],
    381
);

// -------------------------------------------------------------------------
// x2("(a|bab)+", "ababa", 0, 5); // Test 382
scan_test!(
    case_382,
    s382,
    S382,
    r#"(a|bab)+"#,
    "ababa",
    &[("ababa", 0, 5)],
    382
);

// -------------------------------------------------------------------------
// x2("(a|bab)+", "ba", 1, 2); // Test 383
scan_test!(
    case_383,
    s383,
    S383,
    r#"(a|bab)+"#,
    "ba",
    &[("a", 1, 2)],
    383
);

// -------------------------------------------------------------------------
// x2("(a|bab)+", "baaaba", 1, 4); // Test 384
scan_test!(
    case_384,
    s384,
    S384,
    r#"(a|bab)+"#,
    "baaaba",
    &[("aaa", 1, 4), ("a", 5, 6)],
    384
);

// -------------------------------------------------------------------------
// x2("(?:a|b)(?:a|b)", "ab", 0, 2); // Test 385
scan_test!(
    case_385,
    s385,
    S385,
    r#"(?:a|b)(?:a|b)"#,
    "ab",
    &[("ab", 0, 2)],
    385
);

// -------------------------------------------------------------------------
// x2("(?:a*|b*)(?:a*|b*)", "aaabbb", 0, 3); // Test 386
scan_test!(
    case_386,
    s386,
    S386,
    r#"(?:a*|b*)(?:a*|b*)"#,
    "aaabbb",
    &[("aaabbb", 0, 6)],
    386
);

// -------------------------------------------------------------------------
// x2("(?:a*|b*)(?:a+|b+)", "aaabbb", 0, 6); // Test 387
scan_test!(
    case_387,
    s387,
    S387,
    r#"(?:a*|b*)(?:a+|b+)"#,
    "aaabbb",
    &[("aaabbb", 0, 6)],
    387
);

// -------------------------------------------------------------------------
// x2("(?:a+|b+){2}", "aaabbb", 0, 6); // Test 388
scan_test!(
    case_388,
    s388,
    S388,
    r#"(?:a+|b+){2}"#,
    "aaabbb",
    &[("aaabbb", 0, 6)],
    388
);

// -------------------------------------------------------------------------
// x2("h{0,}", "hhhh", 0, 4); // Test 389
scan_test!(
    case_389,
    s389,
    S389,
    r#"h{0,}"#,
    "hhhh",
    &[("hhhh", 0, 4)],
    389
);

// -------------------------------------------------------------------------
// x2("(?:a+|b+){1,2}", "aaabbb", 0, 6); // Test 390
scan_test!(
    case_390,
    s390,
    S390,
    r#"(?:a+|b+){1,2}"#,
    "aaabbb",
    &[("aaabbb", 0, 6)],
    390
);

// -------------------------------------------------------------------------
// n("ax{2}*a", "0axxxa1"); // Test 391
scan_test!(case_391, s391, S391, r#"ax{2}*a"#, "0axxxa1", &[], 391);

// -------------------------------------------------------------------------
// n("a.{0,2}?a", "0aXXXa0"); // Test 392
regex_error!(
    case_392,
    "a.{0,2}?a",
    r#"Non-greedy repetitions. Consider using different scanner modes instead."#,
    392
);

// -------------------------------------------------------------------------
// n("a.{0,2}?a", "0aXXXXa0"); // Test 393
regex_error!(
    case_393,
    "a.{0,2}?a",
    r#"Non-greedy repetitions. Consider using different scanner modes instead."#,
    393
);

// -------------------------------------------------------------------------
// x2("^a{2,}?a$", "aaa", 0, 3); // Test 394
regex_error!(case_394, "^a{2,}?a$", r#"StartLine Look(Start)"#, 394);

// -------------------------------------------------------------------------
// x2("^[a-z]{2,}?$", "aaa", 0, 3); // Test 395
regex_error!(case_395, "^[a-z]{2,}?$", r#"StartLine Look(Start)"#, 395);

// -------------------------------------------------------------------------
// x2("(?:a+|\\Ab*)cc", "cc", 0, 2); // Test 396
regex_error!(case_396, "(?:a+|\\Ab*)cc", r#"StartLine Look(Start)"#, 396);

// -------------------------------------------------------------------------
// n("(?:a+|\\Ab*)cc", "abcc"); // Test 397
regex_error!(case_397, "(?:a+|\\Ab*)cc", r#"StartLine Look(Start)"#, 397);

// -------------------------------------------------------------------------
// x2("(?:^a+|b+)*c", "aabbbabc", 6, 8); // Test 398
regex_error!(case_398, "(?:^a+|b+)*c", r#"StartLine Look(Start)"#, 398);

// -------------------------------------------------------------------------
// x2("(?:^a+|b+)*c", "aabbbbc", 0, 7); // Test 399
regex_error!(case_399, "(?:^a+|b+)*c", r#"StartLine Look(Start)"#, 399);

// -------------------------------------------------------------------------
// x2("a|(?i)c", "C", 0, 1); // Test 400
scan_test!(case_400, s400, S400, r#"a|(?i)c"#, "C", &[("C", 0, 1)], 400);

// -------------------------------------------------------------------------
// x2("(?i)c|a", "C", 0, 1); // Test 401
scan_test!(case_401, s401, S401, r#"(?i)c|a"#, "C", &[("C", 0, 1)], 401);

// -------------------------------------------------------------------------
// x2("(?i)c|a", "A", 0, 1); // Test 402
scan_test!(case_402, s402, S402, r#"(?i)c|a"#, "A", &[("A", 0, 1)], 402);

// -------------------------------------------------------------------------
// x2("a(?i)b|c", "aB", 0, 2); // Test 403
scan_test!(
    case_403,
    s403,
    S403,
    r#"a(?i)b|c"#,
    "aB",
    &[("aB", 0, 2)],
    403
);

// -------------------------------------------------------------------------
// x2("a(?i)b|c", "aC", 0, 2); // Test 404
scan_test!(
    case_404,
    s404,
    S404,
    r#"a(?i)b|c"#,
    "aC",
    &[("C", 1, 2)],
    404
);

// -------------------------------------------------------------------------
// n("a(?i)b|c", "AC"); // Test 405
scan_test!(
    case_405,
    s405,
    S405,
    r#"a(?i)b|c"#,
    "AC",
    &[("C", 1, 2)],
    405
);

// -------------------------------------------------------------------------
// n("a(?:(?i)b)|c", "aC"); // Test 406
scan_test!(
    case_406,
    s406,
    S406,
    r#"a(?:(?i)b)|c"#,
    "aC",
    &[], // Oniguruma: &[("aC", 0, 2)]
    406
);

// -------------------------------------------------------------------------
// x2("(?i:c)|a", "C", 0, 1); // Test 407
scan_test!(
    case_407,
    s407,
    S407,
    r#"(?i:c)|a"#,
    "C",
    &[("C", 0, 1)],
    407
);

// -------------------------------------------------------------------------
// n("(?i:c)|a", "A"); // Test 408
scan_test!(case_408, s408, S408, r#"(?i:c)|a"#, "A", &[], 408);

// -------------------------------------------------------------------------
// x2("[abc]?", "abc", 0, 1); // Test 409
scan_test!(
    case_409,
    s409,
    S409,
    r#"[abc]?"#,
    "abc",
    &[("a", 0, 1), ("b", 1, 2), ("c", 2, 3)], // Oniguruma: &[("a", 0, 1)]
    409
);

// -------------------------------------------------------------------------
// x2("[abc]*", "abc", 0, 3); // Test 410
scan_test!(
    case_410,
    s410,
    S410,
    r#"[abc]*"#,
    "abc",
    &[("abc", 0, 3)],
    410
);

// -------------------------------------------------------------------------
// x2("[^abc]*", "abc", 0, 0); // Test 411
scan_test!(case_411, s411, S411, r#"[^abc]*"#, "abc", &[], 411);

// -------------------------------------------------------------------------
// n("[^abc]+", "abc"); // Test 412
scan_test!(case_412, s412, S412, r#"[^abc]+"#, "abc", &[], 412);

// -------------------------------------------------------------------------
// x2("a?\?", "aaa", 0, 0); // Test 413
scan_test!(case_413, s413, S413, r#"a?\?"#, "aaa", &[], 413);

// -------------------------------------------------------------------------
// x2("ba?\?b", "bab", 0, 3); // Test 414
scan_test!(
    case_414,
    s414,
    S414,
    r#"ba?\?b"#,
    "bab",
    &[], // Oniguruma: &[("bab", 0, 3)]
    414
);

// -------------------------------------------------------------------------
// x2("a*?", "aaa", 0, 0); // Test 415
regex_error!(case_415, "a*?", r#"Non-greedy repetitions"#, 415);

// -------------------------------------------------------------------------
// x2("ba*?", "baa", 0, 1); // Test 416
regex_error!(case_416, "ba*?", r#"Non-greedy repetitions"#, 416);

// -------------------------------------------------------------------------
// x2("ba*?b", "baab", 0, 4); // Test 417
regex_error!(case_417, "ba*?b", r#"Non-greedy repetitions"#, 417);

// -------------------------------------------------------------------------
// x2("a+?", "aaa", 0, 1); // Test 418
regex_error!(case_418, "a+?", r#"Non-greedy repetitions"#, 418);

// -------------------------------------------------------------------------
// x2("ba+?", "baa", 0, 2); // Test 419
regex_error!(case_419, "ba+?", r#"Non-greedy repetitions"#, 419);

// -------------------------------------------------------------------------
// x2("ba+?b", "baab", 0, 4); // Test 420
regex_error!(case_420, "ba+?b", r#"Non-greedy repetitions"#, 420);

// -------------------------------------------------------------------------
// x2("(?:a?)?\?", "a", 0, 0); // Test 421
scan_test!(case_421, s421, S421, r#"(?:a?)?\?"#, "a", &[], 421);

// -------------------------------------------------------------------------
// x2("(?:a?\?)?", "a", 0, 0); // Test 422
scan_test!(case_422, s422, S422, r#"(?:a?\?)?"#, "a", &[], 422);

// -------------------------------------------------------------------------
// x2("(?:a?)+?", "aaa", 0, 1); // Test 423
regex_error!(case_423, "(?:a?)+?", r#"Non-greedy repetitions"#, 423);

// -------------------------------------------------------------------------
// x2("(?:a+)?\?", "aaa", 0, 0); // Test 424
scan_test!(case_424, s424, S424, r#"(?:a+)?\?"#, "aaa", &[], 424);

// -------------------------------------------------------------------------
// x2("(?:a+)?\?b", "aaab", 0, 4); // Test 425
scan_test!(
    case_425,
    s425,
    S425,
    r#"(?:a+)?\?b"#,
    "aaab",
    &[], // Oniguruma: &[("aaab", 0, 4)]
    425
);

// -------------------------------------------------------------------------
// x2("(?:ab)?{2}", "", 0, 0); // Test 426
scan_test!(case_426, s426, S426, r#"(?:ab)?{2}"#, "", &[], 426);

// -------------------------------------------------------------------------
// x2("(?:ab)?{2}", "ababa", 0, 4); // Test 427
scan_test!(
    case_427,
    s427,
    S427,
    r#"(?:ab)?{2}"#,
    "ababa",
    &[("abab", 0, 4)],
    427
);

// -------------------------------------------------------------------------
// x2("(?:ab)*{0}", "ababa", 0, 0); // Test 428
scan_test!(case_428, s428, S428, r#"(?:ab)*{0}"#, "ababa", &[], 428);

// -------------------------------------------------------------------------
// x2("(?:ab){3,}", "abababab", 0, 8); // Test 429
scan_test!(
    case_429,
    s429,
    S429,
    r#"(?:ab){3,}"#,
    "abababab",
    &[("abababab", 0, 8)],
    429
);

// -------------------------------------------------------------------------
// n("(?:ab){3,}", "abab"); // Test 430
scan_test!(case_430, s430, S430, r#"(?:ab){3,}"#, "abab", &[], 430);

// -------------------------------------------------------------------------
// x2("(?:ab){2,4}", "ababab", 0, 6); // Test 431
scan_test!(
    case_431,
    s431,
    S431,
    r#"(?:ab){2,4}"#,
    "ababab",
    &[("ababab", 0, 6)],
    431
);

// -------------------------------------------------------------------------
// x2("(?:ab){2,4}", "ababababab", 0, 8); // Test 432
scan_test!(
    case_432,
    s432,
    S432,
    r#"(?:ab){2,4}"#,
    "ababababab",
    &[("abababab", 0, 8)],
    432
);

// -------------------------------------------------------------------------
// x2("(?:ab){2,4}?", "ababababab", 0, 4); // Test 433
regex_error!(
    case_433,
    "(?:ab){2,4}?",
    r#"(?:ab){2,4}?: Non-greedy repetitions. Consider using different scanner modes instead."#,
    433
);

// -------------------------------------------------------------------------
// x2("(?:ab){,}", "ab{,}", 0, 5); // Test 434
regex_error!(
    case_434,
    "(?:ab){,}",
    r#"repetition quantifier expects a valid decimal"#,
    434
);

// -------------------------------------------------------------------------
// x2("(?:abc)+?{2}", "abcabcabc", 0, 6); // Test 435
regex_error!(case_435, "(?:abc)+?{2}", r#"Non-greedy repetitions"#, 435);

// -------------------------------------------------------------------------
// x2("(?:X*)(?i:xa)", "XXXa", 0, 4); // Test 436
scan_test!(
    case_436,
    s436,
    S436,
    r#"(?:X*)(?i:xa)"#,
    "XXXa",
    &[("XXXa", 0, 4)],
    436
);

// -------------------------------------------------------------------------
// x2("(d+)([^abc]z)", "dddz", 0, 4); // Test 437
scan_test!(
    case_437,
    s437,
    S437,
    r#"(d+)([^abc]z)"#,
    "dddz",
    &[("dddz", 0, 4)],
    437
);

// -------------------------------------------------------------------------
// x2("([^abc]*)([^abc]z)", "dddz", 0, 4); // Test 438
scan_test!(
    case_438,
    s438,
    S438,
    r#"([^abc]*)([^abc]z)"#,
    "dddz",
    &[("dddz", 0, 4)],
    438
);

// -------------------------------------------------------------------------
// x2("(\\w+)(\\wz)", "dddz", 0, 4); // Test 439
scan_test!(
    case_439,
    s439,
    S439,
    r#"(\w+)(\wz)"#,
    "dddz",
    &[("dddz", 0, 4)],
    439
);

// -------------------------------------------------------------------------
// x3("(a)", "a", 0, 1, 1); // Test 440
scan_test!(case_440, s440, S440, r#"(a)"#, "a", &[("a", 0, 1)], 440);

// -------------------------------------------------------------------------
// x3("(ab)", "ab", 0, 2, 1); // Test 441
scan_test!(case_441, s441, S441, r#"(ab)"#, "ab", &[("ab", 0, 2)], 441);

// -------------------------------------------------------------------------
// x2("((ab))", "ab", 0, 2); // Test 442
scan_test!(
    case_442,
    s442,
    S442,
    r#"((ab))"#,
    "ab",
    &[("ab", 0, 2)],
    442
);

// -------------------------------------------------------------------------
// x3("((ab))", "ab", 0, 2, 1); // Test 443
scan_test!(
    case_443,
    s443,
    S443,
    r#"((ab))"#,
    "ab",
    &[("ab", 0, 2)],
    443
);

// -------------------------------------------------------------------------
// x3("((ab))", "ab", 0, 2, 2); // Test 444
scan_test!(
    case_444,
    s444,
    S444,
    r#"((ab))"#,
    "ab",
    &[("ab", 0, 2)],
    444
);

// -------------------------------------------------------------------------
// x3("((((((((((((((((((((ab))))))))))))))))))))", "ab", 0, 2, 20); // Test 445
scan_test!(
    case_445,
    s445,
    S445,
    r#"((((((((((((((((((((ab))))))))))))))))))))"#,
    "ab",
    &[("ab", 0, 2)],
    445
);

// -------------------------------------------------------------------------
// x3("(ab)(cd)", "abcd", 0, 2, 1); // Test 446
scan_test!(
    case_446,
    s446,
    S446,
    r#"(ab)(cd)"#,
    "abcd",
    &[("abcd", 0, 4)],
    446
);

// -------------------------------------------------------------------------
// x3("(ab)(cd)", "abcd", 2, 4, 2); // Test 447
scan_test!(
    case_447,
    s447,
    S447,
    r#"(ab)(cd)"#,
    "abcd",
    &[("abcd", 0, 4)],
    447
);

// -------------------------------------------------------------------------
// x3("()(a)bc(def)ghijk", "abcdefghijk", 3, 6, 3); // Test 448
scan_test!(
    case_448,
    s448,
    S448,
    r#"()(a)bc(def)ghijk"#,
    "abcdefghijk",
    &[("abcdefghijk", 0, 11)],
    448
);

// -------------------------------------------------------------------------
// x3("(()(a)bc(def)ghijk)", "abcdefghijk", 3, 6, 4); // Test 449
scan_test!(
    case_449,
    s449,
    S449,
    r#"(()(a)bc(def)ghijk)"#,
    "abcdefghijk",
    &[("abcdefghijk", 0, 11)],
    449
);

// -------------------------------------------------------------------------
// x2("(^a)", "a", 0, 1); // Test 450
regex_error!(case_450, "(^a)", r#"StartLine Look(Start)"#, 450);

// -------------------------------------------------------------------------
// x3("(a)|(a)", "ba", 1, 2, 1); // Test 451
scan_test!(
    case_451,
    s451,
    S451,
    r#"(a)|(a)"#,
    "ba",
    &[("a", 1, 2)],
    451
);

// -------------------------------------------------------------------------
// x3("(^a)|(a)", "ba", 1, 2, 2); // Test 452
// StartLine Look(Start)

// -------------------------------------------------------------------------
// x3("(a?)", "aaa", 0, 1, 1); // Test 453
scan_test!(
    case_453,
    s453,
    S453,
    r#"(a?)"#,
    "aaa",
    &[("a", 0, 1), ("a", 1, 2), ("a", 2, 3)],
    453
);

// -------------------------------------------------------------------------
// x3("(a*)", "aaa", 0, 3, 1); // Test 454
scan_test!(
    case_454,
    s454,
    S454,
    r#"(a*)"#,
    "aaa",
    &[("aaa", 0, 3)],
    454
);

// -------------------------------------------------------------------------
// x3("(a*)", "", 0, 0, 1); // Test 455
scan_test!(case_455, s455, S455, r#"(a*)"#, "", &[], 455);

// -------------------------------------------------------------------------
// x3("(a+)", "aaaaaaa", 0, 7, 1); // Test 456
scan_test!(
    case_456,
    s456,
    S456,
    r#"(a+)"#,
    "aaaaaaa",
    &[("aaaaaaa", 0, 7)],
    456
);

// -------------------------------------------------------------------------
// x3("(a+|b*)", "bbbaa", 0, 3, 1); // Test 457
scan_test!(
    case_457,
    s457,
    S457,
    r#"(a+|b*)"#,
    "bbbaa",
    &[("bbb", 0, 3), ("aa", 3, 5)],
    457
);

// -------------------------------------------------------------------------
// x3("(a+|b?)", "bbbaa", 0, 1, 1); // Test 458
scan_test!(
    case_458,
    s458,
    S458,
    r#"(a+|b?)"#,
    "bbbaa",
    &[("b", 0, 1), ("b", 1, 2), ("b", 2, 3), ("aa", 3, 5)], // Oniguruma: &[("b", 0, 1)]
    458
);

// -------------------------------------------------------------------------
// x3("(abc)?", "abc", 0, 3, 1); // Test 459
scan_test!(
    case_459,
    s459,
    S459,
    r#"(abc)?"#,
    "abc",
    &[("abc", 0, 3)],
    459
);

// -------------------------------------------------------------------------
// x3("(abc)*", "abc", 0, 3, 1); // Test 460
scan_test!(
    case_460,
    s460,
    S460,
    r#"(abc)*"#,
    "abc",
    &[("abc", 0, 3)],
    460
);

// -------------------------------------------------------------------------
// x3("(abc)+", "abc", 0, 3, 1); // Test 461
scan_test!(
    case_461,
    s461,
    S461,
    r#"(abc)+"#,
    "abc",
    &[("abc", 0, 3)],
    461
);

// -------------------------------------------------------------------------
// x3("(xyz|abc)+", "abc", 0, 3, 1); // Test 462
scan_test!(
    case_462,
    s462,
    S462,
    r#"(xyz|abc)+"#,
    "abc",
    &[("abc", 0, 3)],
    462
);

// -------------------------------------------------------------------------
// x3("([xyz][abc]|abc)+", "abc", 0, 3, 1); // Test 463
scan_test!(
    case_463,
    s463,
    S463,
    r#"([xyz][abc]|abc)+"#,
    "abc",
    &[("abc", 0, 3)],
    463
);

// -------------------------------------------------------------------------
// x3("((?i:abc))", "AbC", 0, 3, 1); // Test 464
scan_test!(
    case_464,
    s464,
    S464,
    r#"((?i:abc))"#,
    "AbC",
    &[("AbC", 0, 3)],
    464
);

// -------------------------------------------------------------------------
// x2("(abc)(?i:\\1)", "abcABC", 0, 6); // Test 465
regex_error!(
    case_465,
    "(abc)(?i:\\1)",
    r#"backreferences are not supported"#,
    465
);

// -------------------------------------------------------------------------
// x3("((?m:a.c))", "a\nc", 0, 3, 1); // Test 466
scan_test!(
    case_466,
    s466,
    S466,
    r#"((?m:a.c))"#,
    "a\nc",
    &[], // Oniguruma: &[("a\\n", 0, 3)]
    466
);

// -------------------------------------------------------------------------
// x3("((?=az)a)", "azb", 0, 1, 1); // Test 467
// look-around, including look-ahead and look-behind, is not supported

// -------------------------------------------------------------------------
// x3("abc|(.abd)", "zabd", 0, 4, 1); // Test 468
scan_test!(
    case_468,
    s468,
    S468,
    r#"abc|(.abd)"#,
    "zabd",
    &[("zabd", 0, 4)],
    468
);

// -------------------------------------------------------------------------
// x2("(?:abc)|(ABC)", "abc", 0, 3); // Test 469
scan_test!(
    case_469,
    s469,
    S469,
    r#"(?:abc)|(ABC)"#,
    "abc",
    &[("abc", 0, 3)],
    469
);

// -------------------------------------------------------------------------
// x3("(?i:(abc))|(zzz)", "ABC", 0, 3, 1); // Test 470
scan_test!(
    case_470,
    s470,
    S470,
    r#"(?i:(abc))|(zzz)"#,
    "ABC",
    &[("ABC", 0, 3)],
    470
);

// -------------------------------------------------------------------------
// x3("a*(.)", "aaaaz", 4, 5, 1); // Test 471
scan_test!(
    case_471,
    s471,
    S471,
    r#"a*(.)"#,
    "aaaaz",
    &[("aaaaz", 0, 5)],
    471
);

// -------------------------------------------------------------------------
// x3("a*?(.)", "aaaaz", 0, 1, 1); // Test 472
// Non-greedy repetitions

// -------------------------------------------------------------------------
// x3("a*?(c)", "aaaac", 4, 5, 1); // Test 473
// Non-greedy repetitions

// -------------------------------------------------------------------------
// x3("[bcd]a*(.)", "caaaaz", 5, 6, 1); // Test 474
scan_test!(
    case_474,
    s474,
    S474,
    r#"[bcd]a*(.)"#,
    "caaaaz",
    &[("caaaaz", 0, 6)],
    474
);

// -------------------------------------------------------------------------
// x3("(\\Abb)cc", "bbcc", 0, 2, 1); // Test 475
// StartLine Look(Start)

// -------------------------------------------------------------------------
// n("(\\Abb)cc", "zbbcc"); // Test 476
regex_error!(case_476, "(\\Abb)cc", r#"StartLine Look(Start)"#, 476);

// -------------------------------------------------------------------------
// x3("(^bb)cc", "bbcc", 0, 2, 1); // Test 477
// StartLine Look(Start)

// -------------------------------------------------------------------------
// n("(^bb)cc", "zbbcc"); // Test 478
regex_error!(case_478, "(^bb)cc", r#"StartLine Look(Start)"#, 478);

// -------------------------------------------------------------------------
// x3("cc(bb$)", "ccbb", 2, 4, 1); // Test 479
// EndLine Look(End)

// -------------------------------------------------------------------------
// n("cc(bb$)", "ccbbb"); // Test 480
regex_error!(case_480, "cc(bb$)", r#"EndLine Look(End)"#, 480);

// -------------------------------------------------------------------------
// n("(\\1)", ""); // Test 481
regex_error!(
    case_481,
    "(\\1)",
    r#"backreferences are not supported"#,
    481
);

// -------------------------------------------------------------------------
// n("\\1(a)", "aa"); // Test 482
regex_error!(
    case_482,
    "\\1(a)",
    r#"backreferences are not supported"#,
    482
);

// -------------------------------------------------------------------------
// n("(a(b)\\1)\\2+", "ababb"); // Test 483
regex_error!(
    case_483,
    "(a(b)\\1)\\2+",
    r#"backreferences are not supported"#,
    483
);

// -------------------------------------------------------------------------
// n("(?:(?:\\1|z)(a))+$", "zaa"); // Test 484
regex_error!(
    case_484,
    "(?:(?:\\1|z)(a))+$",
    r#"backreferences are not supported"#,
    484
);

// -------------------------------------------------------------------------
// x2("(?:(?:\\1|z)(a))+$", "zaaa", 0, 4); // Test 485
regex_error!(
    case_485,
    "(?:(?:\\1|z)(a))+$",
    r#"backreferences are not supported"#,
    485
);

// -------------------------------------------------------------------------
// x2("(a)(?=\\1)", "aa", 0, 1); // Test 486
regex_error!(
    case_486,
    "(a)(?=\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    486
);

// -------------------------------------------------------------------------
// n("(a)$|\\1", "az"); // Test 487
regex_error!(
    case_487,
    "(a)$|\\1",
    r#"backreferences are not supported"#,
    487
);

// -------------------------------------------------------------------------
// x2("(a)\\1", "aa", 0, 2); // Test 488
regex_error!(
    case_488,
    "(a)\\1",
    r#"backreferences are not supported"#,
    488
);

// -------------------------------------------------------------------------
// n("(a)\\1", "ab"); // Test 489
regex_error!(
    case_489,
    "(a)\\1",
    r#"backreferences are not supported"#,
    489
);

// -------------------------------------------------------------------------
// x2("(a?)\\1", "aa", 0, 2); // Test 490
regex_error!(
    case_490,
    "(a?)\\1",
    r#"backreferences are not supported"#,
    490
);

// -------------------------------------------------------------------------
// x2("(a?\?)\\1", "aa", 0, 0); // Test 491
// regex_error!(case_491, "(a?\?)\\1", r#"backreferences are not supported"#, 491); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("(a*)\\1", "aaaaa", 0, 4); // Test 492
regex_error!(
    case_492,
    "(a*)\\1",
    r#"backreferences are not supported"#,
    492
);

// -------------------------------------------------------------------------
// x3("(a*)\\1", "aaaaa", 0, 2, 1); // Test 493
// backreferences are not supported

// -------------------------------------------------------------------------
// x2("a(b*)\\1", "abbbb", 0, 5); // Test 494
regex_error!(
    case_494,
    "a(b*)\\1",
    r#"backreferences are not supported"#,
    494
);

// -------------------------------------------------------------------------
// x2("a(b*)\\1", "ab", 0, 1); // Test 495
regex_error!(
    case_495,
    "a(b*)\\1",
    r#"backreferences are not supported"#,
    495
);

// -------------------------------------------------------------------------
// x2("(a*)(b*)\\1\\2", "aaabbaaabb", 0, 10); // Test 496
regex_error!(
    case_496,
    "(a*)(b*)\\1\\2",
    r#"backreferences are not supported"#,
    496
);

// -------------------------------------------------------------------------
// x2("(a*)(b*)\\2", "aaabbbb", 0, 7); // Test 497
regex_error!(
    case_497,
    "(a*)(b*)\\2",
    r#"backreferences are not supported"#,
    497
);

// -------------------------------------------------------------------------
// x2("(((((((a*)b))))))c\\7", "aaabcaaa", 0, 8); // Test 498
regex_error!(
    case_498,
    "(((((((a*)b))))))c\\7",
    r#"backreferences are not supported"#,
    498
);

// -------------------------------------------------------------------------
// x3("(((((((a*)b))))))c\\7", "aaabcaaa", 0, 3, 7); // Test 499
// backreferences are not supported

// -------------------------------------------------------------------------
// x2("(a)(b)(c)\\2\\1\\3", "abcbac", 0, 6); // Test 500
regex_error!(
    case_500,
    "(a)(b)(c)\\2\\1\\3",
    r#"backreferences are not supported"#,
    500
);

// -------------------------------------------------------------------------
// x2("([a-d])\\1", "cc", 0, 2); // Test 501
regex_error!(
    case_501,
    "([a-d])\\1",
    r#"backreferences are not supported"#,
    501
);

// -------------------------------------------------------------------------
// x2("(\\w\\d\\s)\\1", "f5 f5 ", 0, 6); // Test 502
regex_error!(
    case_502,
    "(\\w\\d\\s)\\1",
    r#"backreferences are not supported"#,
    502
);

// -------------------------------------------------------------------------
// n("(\\w\\d\\s)\\1", "f5 f5"); // Test 503
regex_error!(
    case_503,
    "(\\w\\d\\s)\\1",
    r#"backreferences are not supported"#,
    503
);

// -------------------------------------------------------------------------
// x2("(who|[a-c]{3})\\1", "whowho", 0, 6); // Test 504
regex_error!(
    case_504,
    "(who|[a-c]{3})\\1",
    r#"backreferences are not supported"#,
    504
);

// -------------------------------------------------------------------------
// x2("...(who|[a-c]{3})\\1", "abcwhowho", 0, 9); // Test 505
regex_error!(
    case_505,
    "...(who|[a-c]{3})\\1",
    r#"backreferences are not supported"#,
    505
);

// -------------------------------------------------------------------------
// x2("(who|[a-c]{3})\\1", "cbccbc", 0, 6); // Test 506
regex_error!(
    case_506,
    "(who|[a-c]{3})\\1",
    r#"backreferences are not supported"#,
    506
);

// -------------------------------------------------------------------------
// x2("(^a)\\1", "aa", 0, 2); // Test 507
regex_error!(
    case_507,
    "(^a)\\1",
    r#"backreferences are not supported"#,
    507
);

// -------------------------------------------------------------------------
// n("(^a)\\1", "baa"); // Test 508
regex_error!(
    case_508,
    "(^a)\\1",
    r#"backreferences are not supported"#,
    508
);

// -------------------------------------------------------------------------
// n("(a$)\\1", "aa"); // Test 509
regex_error!(
    case_509,
    "(a$)\\1",
    r#"backreferences are not supported"#,
    509
);

// -------------------------------------------------------------------------
// n("(ab\\Z)\\1", "ab"); // Test 510
regex_error!(
    case_510,
    "(ab\\Z)\\1",
    r#"unrecognized escape sequence"#,
    510
);

// -------------------------------------------------------------------------
// x2("(a*\\Z)\\1", "a", 1, 1); // Test 511
regex_error!(
    case_511,
    "(a*\\Z)\\1",
    r#"unrecognized escape sequence"#,
    511
);

// -------------------------------------------------------------------------
// x2(".(a*\\Z)\\1", "ba", 1, 2); // Test 512
regex_error!(
    case_512,
    ".(a*\\Z)\\1",
    r#"unrecognized escape sequence"#,
    512
);

// -------------------------------------------------------------------------
// x3("(.(abc)\\2)", "zabcabc", 0, 7, 1); // Test 513
// backreferences are not supported

// -------------------------------------------------------------------------
// x3("(.(..\\d.)\\2)", "z12341234", 0, 9, 1); // Test 514
// backreferences are not supported

// -------------------------------------------------------------------------
// x2("((?i:az))\\1", "AzAz", 0, 4); // Test 515
regex_error!(
    case_515,
    "((?i:az))\\1",
    r#"backreferences are not supported"#,
    515
);

// -------------------------------------------------------------------------
// n("((?i:az))\\1", "Azaz"); // Test 516
regex_error!(
    case_516,
    "((?i:az))\\1",
    r#"backreferences are not supported"#,
    516
);

// -------------------------------------------------------------------------
// x2("(?<=a)b", "ab", 1, 2); // Test 517
regex_error!(
    case_517,
    "(?<=a)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    517
);

// -------------------------------------------------------------------------
// n("(?<=a)b", "bb"); // Test 518
regex_error!(
    case_518,
    "(?<=a)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    518
);

// -------------------------------------------------------------------------
// x2("(?<=a|b)b", "bb", 1, 2); // Test 519
regex_error!(
    case_519,
    "(?<=a|b)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    519
);

// -------------------------------------------------------------------------
// x2("(?<=a|bc)b", "bcb", 2, 3); // Test 520
regex_error!(
    case_520,
    "(?<=a|bc)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    520
);

// -------------------------------------------------------------------------
// x2("(?<=a|bc)b", "ab", 1, 2); // Test 521
regex_error!(
    case_521,
    "(?<=a|bc)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    521
);

// -------------------------------------------------------------------------
// x2("(?<=a|bc||defghij|klmnopq|r)z", "rz", 1, 2); // Test 522
regex_error!(
    case_522,
    "(?<=a|bc||defghij|klmnopq|r)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    522
);

// -------------------------------------------------------------------------
// x3("(?<=(abc))d", "abcd", 0, 3, 1); // Test 523
// look-around, including look-ahead and look-behind, is not supported

// -------------------------------------------------------------------------
// x2("(?<=(?i:abc))d", "ABCd", 3, 4); // Test 524
regex_error!(
    case_524,
    "(?<=(?i:abc))d",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    524
);

// -------------------------------------------------------------------------
// x2("(?<=^|b)c", " cbc", 3, 4); // Test 525
regex_error!(
    case_525,
    "(?<=^|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    525
);

// -------------------------------------------------------------------------
// x2("(?<=a|^|b)c", " cbc", 3, 4); // Test 526
regex_error!(
    case_526,
    "(?<=a|^|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    526
);

// -------------------------------------------------------------------------
// x2("(?<=a|(^)|b)c", " cbc", 3, 4); // Test 527
regex_error!(
    case_527,
    "(?<=a|(^)|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    527
);

// -------------------------------------------------------------------------
// x2("(?<=a|(^)|b)c", "cbc", 0, 1); // Test 528
regex_error!(
    case_528,
    "(?<=a|(^)|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    528
);

// -------------------------------------------------------------------------
// n("(Q)|(?<=a|(?(1))|b)c", "czc"); // Test 529
regex_error!(
    case_529,
    "(Q)|(?<=a|(?(1))|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    529
);

// -------------------------------------------------------------------------
// x2("(Q)(?<=a|(?(1))|b)c", "cQc", 1, 3); // Test 530
regex_error!(
    case_530,
    "(Q)(?<=a|(?(1))|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    530
);

// -------------------------------------------------------------------------
// x2("(?<=a|(?~END)|b)c", "ENDc", 3, 4); // Test 531
regex_error!(
    case_531,
    "(?<=a|(?~END)|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    531
);

// -------------------------------------------------------------------------
// n("(?<!^|b)c", "cbc"); // Test 532
regex_error!(
    case_532,
    "(?<!^|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    532
);

// -------------------------------------------------------------------------
// n("(?<!a|^|b)c", "cbc"); // Test 533
regex_error!(
    case_533,
    "(?<!a|^|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    533
);

// -------------------------------------------------------------------------
// n("(?<!a|(?:^)|b)c", "cbc"); // Test 534
regex_error!(
    case_534,
    "(?<!a|(?:^)|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    534
);

// -------------------------------------------------------------------------
// x2("(?<!a|(?:^)|b)c", " cbc", 1, 2); // Test 535
regex_error!(
    case_535,
    "(?<!a|(?:^)|b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    535
);

// -------------------------------------------------------------------------
// x2("(a)\\g<1>", "aa", 0, 2); // Test 536
regex_error!(
    case_536,
    "(a)\\g<1>",
    r#"unrecognized escape sequence"#,
    536
);

// -------------------------------------------------------------------------
// x2("(?<!a)b", "cb", 1, 2); // Test 537
regex_error!(
    case_537,
    "(?<!a)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    537
);

// -------------------------------------------------------------------------
// n("(?<!a)b", "ab"); // Test 538
regex_error!(
    case_538,
    "(?<!a)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    538
);

// -------------------------------------------------------------------------
// x2("(?<!a|bc)b", "bbb", 0, 1); // Test 539
regex_error!(
    case_539,
    "(?<!a|bc)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    539
);

// -------------------------------------------------------------------------
// n("(?<!a|bc)z", "bcz"); // Test 540
regex_error!(
    case_540,
    "(?<!a|bc)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    540
);

// -------------------------------------------------------------------------
// x2("(?<name1>a)", "a", 0, 1); // Test 541
scan_test!(
    case_541,
    s541,
    S541,
    r#"(?<name1>a)"#,
    "a",
    &[("a", 0, 1)],
    541
);

// -------------------------------------------------------------------------
// x2("(?<name_2>ab)\\g<name_2>", "abab", 0, 4); // Test 542
regex_error!(
    case_542,
    "(?<name_2>ab)\\g<name_2>",
    r#"unrecognized escape sequence"#,
    542
);

// -------------------------------------------------------------------------
// x2("(?<name_3>.zv.)\\k<name_3>", "azvbazvb", 0, 8); // Test 543
regex_error!(
    case_543,
    "(?<name_3>.zv.)\\k<name_3>",
    r#"unrecognized escape sequence"#,
    543
);

// -------------------------------------------------------------------------
// x2("(?<=\\g<ab>)|-\\zEND (?<ab>XyZ)", "XyZ", 3, 3); // Test 544
regex_error!(
    case_544,
    "(?<=\\g<ab>)|-\\zEND (?<ab>XyZ)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    544
);

// -------------------------------------------------------------------------
// x2("(?<n>|a\\g<n>)+", "", 0, 0); // Test 545
regex_error!(
    case_545,
    "(?<n>|a\\g<n>)+",
    r#"unrecognized escape sequence"#,
    545
);

// -------------------------------------------------------------------------
// x2("(?<n>|\\(\\g<n>\\))+$", "()(())", 0, 6); // Test 546
regex_error!(
    case_546,
    "(?<n>|\\(\\g<n>\\))+$",
    r#"unrecognized escape sequence"#,
    546
);

// -------------------------------------------------------------------------
// x3("\\g<n>(?<n>.){0}", "X", 0, 1, 1); // Test 547
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\g<n>(abc|df(?<n>.YZ){2,8}){0}", "XYZ", 0, 3); // Test 548
regex_error!(
    case_548,
    "\\g<n>(abc|df(?<n>.YZ){2,8}){0}",
    r#"unrecognized escape sequence"#,
    548
);

// -------------------------------------------------------------------------
// x2("\\A(?<n>(a\\g<n>)|)\\z", "aaaa", 0, 4); // Test 549
regex_error!(
    case_549,
    "\\A(?<n>(a\\g<n>)|)\\z",
    r#"unrecognized escape sequence"#,
    549
);

// -------------------------------------------------------------------------
// x2("(?<n>|\\g<m>\\g<n>)\\z|\\zEND (?<m>a|(b)\\g<m>)", "bbbbabba", 0, 8); // Test 550
regex_error!(
    case_550,
    "(?<n>|\\g<m>\\g<n>)\\z|\\zEND (?<m>a|(b)\\g<m>)",
    r#"unrecognized escape sequence"#,
    550
);

// -------------------------------------------------------------------------
// x2("(?<name1240>\\w+\\sx)a+\\k<name1240>", "  fg xaaaaaaaafg x", 2, 18); // Test 551
regex_error!(
    case_551,
    "(?<name1240>\\w+\\sx)a+\\k<name1240>",
    r#"unrecognized escape sequence"#,
    551
);

// -------------------------------------------------------------------------
// x3("(z)()()(?<_9>a)\\g<_9>", "zaa", 2, 3, 1); // Test 552
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("(.)(((?<_>a)))\\k<_>", "zaa", 0, 3); // Test 553
regex_error!(
    case_553,
    "(.)(((?<_>a)))\\k<_>",
    r#"unrecognized escape sequence"#,
    553
);

// -------------------------------------------------------------------------
// x2("((?<name1>\\d)|(?<name2>\\w))(\\k<name1>|\\k<name2>)", "ff", 0, 2); // Test 554
regex_error!(
    case_554,
    "((?<name1>\\d)|(?<name2>\\w))(\\k<name1>|\\k<name2>)",
    r#"unrecognized escape sequence"#,
    554
);

// -------------------------------------------------------------------------
// x2("(?:(?<x>)|(?<x>efg))\\k<x>", "", 0, 0); // Test 555
regex_error!(
    case_555,
    "(?:(?<x>)|(?<x>efg))\\k<x>",
    r#"duplicate capture group name"#,
    555
);

// -------------------------------------------------------------------------
// x2("(?:(?<x>abc)|(?<x>efg))\\k<x>", "abcefgefg", 3, 9); // Test 556
regex_error!(
    case_556,
    "(?:(?<x>abc)|(?<x>efg))\\k<x>",
    r#"duplicate capture group name"#,
    556
);

// -------------------------------------------------------------------------
// n("(?:(?<x>abc)|(?<x>efg))\\k<x>", "abcefg"); // Test 557
regex_error!(
    case_557,
    "(?:(?<x>abc)|(?<x>efg))\\k<x>",
    r#"duplicate capture group name"#,
    557
);

// -------------------------------------------------------------------------
// x2("(?<x>x)(?<x>xx)\\k<x>", "xxxx", 0, 4); // Test 558
regex_error!(
    case_558,
    "(?<x>x)(?<x>xx)\\k<x>",
    r#"duplicate capture group name"#,
    558
);

// -------------------------------------------------------------------------
// x2("(?<x>x)(?<x>xx)\\k<x>", "xxxxz", 0, 4); // Test 559
regex_error!(
    case_559,
    "(?<x>x)(?<x>xx)\\k<x>",
    r#"duplicate capture group name"#,
    559
);

// -------------------------------------------------------------------------
// x2("(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\\k<n1>$", "a-pyumpyum", 2, 10); // Test 560
regex_error!(
    case_560,
    "(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\\k<n1>$",
    r#"duplicate capture group name"#,
    560
);

// -------------------------------------------------------------------------
// x3("(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\\k<n1>$", "xxxxabcdefghijklmnabcdefghijklmn", 4, 18, 14); // Test 561
// duplicate capture group name

// -------------------------------------------------------------------------
// x3("(?<name1>)(?<name2>)(?<name3>)(?<name4>)(?<name5>)(?<name6>)(?<name7>)(?<name8>)(?<name9>)(?<name10>)(?<name11>)(?<name12>)(?<name13>)(?<name14>)(?<name15>)(?<name16>aaa)(?<name17>)$", "aaa", 0, 3, 16); // Test 562
// EndLine Look(End)

// -------------------------------------------------------------------------
// x2("(?<foo>a|\\(\\g<foo>\\))", "a", 0, 1); // Test 563
regex_error!(
    case_563,
    "(?<foo>a|\\(\\g<foo>\\))",
    r#"unrecognized escape sequence"#,
    563
);

// -------------------------------------------------------------------------
// x2("(?<foo>a|\\(\\g<foo>\\))", "((((((a))))))", 0, 13); // Test 564
regex_error!(
    case_564,
    "(?<foo>a|\\(\\g<foo>\\))",
    r#"unrecognized escape sequence"#,
    564
);

// -------------------------------------------------------------------------
// x3("(?<foo>a|\\(\\g<foo>\\))", "((((((((a))))))))", 0, 17, 1); // Test 565
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\g<bar>|\\zEND(?<bar>.*abc$)", "abcxxxabc", 0, 9); // Test 566
regex_error!(
    case_566,
    "\\g<bar>|\\zEND(?<bar>.*abc$)",
    r#"unrecognized escape sequence"#,
    566
);

// -------------------------------------------------------------------------
// x2("\\g<1>|\\zEND(.a.)", "bac", 0, 3); // Test 567
regex_error!(
    case_567,
    "\\g<1>|\\zEND(.a.)",
    r#"unrecognized escape sequence"#,
    567
);

// -------------------------------------------------------------------------
// x3("\\g<_A>\\g<_A>|\\zEND(.a.)(?<_A>.b.)", "xbxyby", 3, 6, 1); // Test 568
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\A(?:\\g<pon>|\\g<pan>|\\zEND  (?<pan>a|c\\g<pon>c)(?<pon>b|d\\g<pan>d))$", "cdcbcdc", 0, 7); // Test 569
regex_error!(
    case_569,
    "\\A(?:\\g<pon>|\\g<pan>|\\zEND  (?<pan>a|c\\g<pon>c)(?<pon>b|d\\g<pan>d))$",
    r#"unrecognized escape sequence"#,
    569
);

// -------------------------------------------------------------------------
// x2("\\A(?<n>|a\\g<m>)\\z|\\zEND (?<m>\\g<n>)", "aaaa", 0, 4); // Test 570
regex_error!(
    case_570,
    "\\A(?<n>|a\\g<m>)\\z|\\zEND (?<m>\\g<n>)",
    r#"unrecognized escape sequence"#,
    570
);

// -------------------------------------------------------------------------
// x2("(?<n>(a|b\\g<n>c){3,5})", "baaaaca", 1, 5); // Test 571
regex_error!(
    case_571,
    "(?<n>(a|b\\g<n>c){3,5})",
    r#"unrecognized escape sequence"#,
    571
);

// -------------------------------------------------------------------------
// x2("(?<n>(a|b\\g<n>c){3,5})", "baaaacaaaaa", 0, 10); // Test 572
regex_error!(
    case_572,
    "(?<n>(a|b\\g<n>c){3,5})",
    r#"unrecognized escape sequence"#,
    572
);

// -------------------------------------------------------------------------
// x2("(?<pare>\\(([^\\(\\)]++|\\g<pare>)*+\\))", "((a))", 0, 5); // Test 573
regex_error!(
    case_573,
    "(?<pare>\\(([^\\(\\)]++|\\g<pare>)*+\\))",
    r#"unrecognized escape sequence"#,
    573
);

// -------------------------------------------------------------------------
// x2("()*\\1", "", 0, 0); // Test 574
regex_error!(
    case_574,
    "()*\\1",
    r#"backreferences are not supported"#,
    574
);

// -------------------------------------------------------------------------
// x2("(?:()|())*\\1\\2", "", 0, 0); // Test 575
regex_error!(
    case_575,
    "(?:()|())*\\1\\2",
    r#"backreferences are not supported"#,
    575
);

// -------------------------------------------------------------------------
// x2("(?:a*|b*)*c", "abadc", 4, 5); // Test 576
scan_test!(
    case_576,
    s576,
    S576,
    r#"(?:a*|b*)*c"#,
    "abadc",
    &[("c", 4, 5)],
    576
);

// -------------------------------------------------------------------------
// x3("(?:\\1a|())*", "a", 0, 0, 1); // Test 577
// backreferences are not supported

// -------------------------------------------------------------------------
// x2("x((.)*)*x", "0x1x2x3", 1, 6); // Test 578
scan_test!(
    case_578,
    s578,
    S578,
    r#"x((.)*)*x"#,
    "0x1x2x3",
    &[("x1x2x", 1, 6)],
    578
);

// -------------------------------------------------------------------------
// x2("x((.)*)*x(?i:\\1)\\Z", "0x1x2x1X2", 1, 9); // Test 579
regex_error!(
    case_579,
    "x((.)*)*x(?i:\\1)\\Z",
    r#"backreferences are not supported"#,
    579
);

// -------------------------------------------------------------------------
// x2("(?:()|()|()|()|()|())*\\2\\5", "", 0, 0); // Test 580
regex_error!(
    case_580,
    "(?:()|()|()|()|()|())*\\2\\5",
    r#"backreferences are not supported"#,
    580
);

// -------------------------------------------------------------------------
// x2("(?:()|()|()|(x)|()|())*\\2b\\5", "b", 0, 1); // Test 581
regex_error!(
    case_581,
    "(?:()|()|()|(x)|()|())*\\2b\\5",
    r#"backreferences are not supported"#,
    581
);

// -------------------------------------------------------------------------
// x2("[0-9-a]", "-", 0, 1);   // PR#44 // Test 582
scan_test!(case_582, s582, S582, r#"[0-9-a]"#, "-", &[("-", 0, 1)], 582);

// -------------------------------------------------------------------------
// n("[0-9-a]", ":");          // PR#44 // Test 583
scan_test!(case_583, s583, S583, r#"[0-9-a]"#, ":", &[], 583);

// -------------------------------------------------------------------------
// x3("(\\(((?:[^(]|\\g<1>)*)\\))", "(abc)(abc)", 1, 4, 2); // PR#43 // Test 584
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\o{101}", "A", 0, 1); // Test 585
regex_error!(case_585, "\\o{101}", r#"unrecognized escape sequence"#, 585);

// -------------------------------------------------------------------------
// x2("\\A(a|b\\g<1>c)\\k<1+3>\\z", "bbacca", 0, 6); // Test 586
regex_error!(
    case_586,
    "\\A(a|b\\g<1>c)\\k<1+3>\\z",
    r#"unrecognized escape sequence"#,
    586
);

// -------------------------------------------------------------------------
// n("\\A(a|b\\g<1>c)\\k<1+3>\\z", "bbaccb"); // Test 587
regex_error!(
    case_587,
    "\\A(a|b\\g<1>c)\\k<1+3>\\z",
    r#"unrecognized escape sequence"#,
    587
);

// -------------------------------------------------------------------------
// x2("(?i)\\A(a|b\\g<1>c)\\k<1+2>\\z", "bBACcbac", 0, 8); // Test 588
regex_error!(
    case_588,
    "(?i)\\A(a|b\\g<1>c)\\k<1+2>\\z",
    r#"unrecognized escape sequence"#,
    588
);

// -------------------------------------------------------------------------
// x2("(?i)(?<X>aa)|(?<X>bb)\\k<X>", "BBbb", 0, 4); // Test 589
regex_error!(
    case_589,
    "(?i)(?<X>aa)|(?<X>bb)\\k<X>",
    r#"duplicate capture group name"#,
    589
);

// -------------------------------------------------------------------------
// x2("(?:\\k'+1'B|(A)C)*", "ACAB", 0, 4); // relative backref by positive number // Test 590
regex_error!(
    case_590,
    "(?:\\k'+1'B|(A)C)*",
    r#"unrecognized escape sequence"#,
    590
);

// -------------------------------------------------------------------------
// x2("\\g<+2>(abc)(ABC){0}", "ABCabc", 0, 6); // relative call by positive number // Test 591
regex_error!(
    case_591,
    "\\g<+2>(abc)(ABC){0}",
    r#"unrecognized escape sequence"#,
    591
);

// -------------------------------------------------------------------------
// x2("A\\g'0'|B()", "AAAAB", 0, 5); // Test 592
regex_error!(
    case_592,
    "A\\g'0'|B()",
    r#"unrecognized escape sequence"#,
    592
);

// -------------------------------------------------------------------------
// x3("(A\\g'0')|B", "AAAAB", 0, 5, 1); // Test 593
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("(a*)(?(1))aa", "aaaaa", 0, 5); // Test 594
regex_error!(case_594, "(a*)(?(1))aa", r#"unrecognized flag"#, 594);

// -------------------------------------------------------------------------
// x2("(a*)(?(-1))aa", "aaaaa", 0, 5); // Test 595
regex_error!(case_595, "(a*)(?(-1))aa", r#"unrecognized flag"#, 595);

// -------------------------------------------------------------------------
// x2("(?<name>aaa)(?('name'))aa", "aaaaa", 0, 5); // Test 596
regex_error!(
    case_596,
    "(?<name>aaa)(?('name'))aa",
    r#"unrecognized flag"#,
    596
);

// -------------------------------------------------------------------------
// x2("(a)(?(1)aa|bb)a", "aaaaa", 0, 4); // Test 597
regex_error!(case_597, "(a)(?(1)aa|bb)a", r#"unrecognized flag"#, 597);

// -------------------------------------------------------------------------
// x2("(?:aa|())(?(<1>)aa|bb)a", "aabba", 0, 5); // Test 598
regex_error!(
    case_598,
    "(?:aa|())(?(<1>)aa|bb)a",
    r#"unrecognized flag"#,
    598
);

// -------------------------------------------------------------------------
// x2("(?:aa|())(?('1')aa|bb|cc)a", "aacca", 0, 5); // Test 599
regex_error!(
    case_599,
    "(?:aa|())(?('1')aa|bb|cc)a",
    r#"unrecognized flag"#,
    599
);

// -------------------------------------------------------------------------
// x3("(a*)(?(1)aa|a)b", "aaab", 0, 1, 1); // Test 600
// unrecognized flag

// -------------------------------------------------------------------------
// n("(a)(?(1)a|b)c", "abc"); // Test 601
regex_error!(case_601, "(a)(?(1)a|b)c", r#"unrecognized flag"#, 601);

// -------------------------------------------------------------------------
// x2("(a)(?(1)|)c", "ac", 0, 2); // Test 602
regex_error!(case_602, "(a)(?(1)|)c", r#"unrecognized flag"#, 602);

// -------------------------------------------------------------------------
// n("(?()aaa|bbb)", "bbb"); // Test 603
regex_error!(case_603, "(?()aaa|bbb)", r#"unrecognized flag"#, 603);

// -------------------------------------------------------------------------
// x2("(a)(?(1+0)b|c)d", "abd", 0, 3); // Test 604
regex_error!(case_604, "(a)(?(1+0)b|c)d", r#"unrecognized flag"#, 604);

// -------------------------------------------------------------------------
// x2("(?:(?'name'a)|(?'name'b))(?('name')c|d)e", "ace", 0, 3); // Test 605
regex_error!(
    case_605,
    "(?:(?'name'a)|(?'name'b))(?('name')c|d)e",
    r#"unrecognized flag"#,
    605
);

// -------------------------------------------------------------------------
// x2("(?:(?'name'a)|(?'name'b))(?('name')c|d)e", "bce", 0, 3); // Test 606
regex_error!(
    case_606,
    "(?:(?'name'a)|(?'name'b))(?('name')c|d)e",
    r#"unrecognized flag"#,
    606
);

// -------------------------------------------------------------------------
// x2("\\R", "\r\n", 0, 2); // Test 607
regex_error!(case_607, "\\R", r#"unrecognized escape sequence"#, 607);

// -------------------------------------------------------------------------
// x2("\\R", "\r", 0, 1); // Test 608
regex_error!(case_608, "\\R", r#"unrecognized escape sequence"#, 608);

// -------------------------------------------------------------------------
// x2("\\R", "\n", 0, 1); // Test 609
regex_error!(case_609, "\\R", r#"unrecognized escape sequence"#, 609);

// -------------------------------------------------------------------------
// x2("\\R", "\x0b", 0, 1); // Test 610
regex_error!(case_610, "\\R", r#"unrecognized escape sequence"#, 610);

// -------------------------------------------------------------------------
// n("\\R\\n", "\r\n"); // Test 611
regex_error!(case_611, "\\R\\n", r#"unrecognized escape sequence"#, 611);

// -------------------------------------------------------------------------
// x2("\\R", "\xc2\x85", 0, 2); // Test 612
regex_error!(case_612, "\\R", r#"unrecognized escape sequence"#, 612);

// -------------------------------------------------------------------------
// x2("\\N", "a", 0, 1); // Test 613
regex_error!(case_613, "\\N", r#"unrecognized escape sequence"#, 613);

// -------------------------------------------------------------------------
// n("\\N", "\n"); // Test 614
regex_error!(case_614, "\\N", r#"unrecognized escape sequence"#, 614);

// -------------------------------------------------------------------------
// n("(?m:\\N)", "\n"); // Test 615
regex_error!(case_615, "(?m:\\N)", r#"unrecognized escape sequence"#, 615);

// -------------------------------------------------------------------------
// n("(?-m:\\N)", "\n"); // Test 616
regex_error!(
    case_616,
    "(?-m:\\N)",
    r#"unrecognized escape sequence"#,
    616
);

// -------------------------------------------------------------------------
// x2("\\O", "a", 0, 1); // Test 617
regex_error!(case_617, "\\O", r#"unrecognized escape sequence"#, 617);

// -------------------------------------------------------------------------
// x2("\\O", "\n", 0, 1); // Test 618
regex_error!(case_618, "\\O", r#"unrecognized escape sequence"#, 618);

// -------------------------------------------------------------------------
// x2("(?m:\\O)", "\n", 0, 1); // Test 619
regex_error!(case_619, "(?m:\\O)", r#"unrecognized escape sequence"#, 619);

// -------------------------------------------------------------------------
// x2("(?-m:\\O)", "\n", 0, 1); // Test 620
regex_error!(
    case_620,
    "(?-m:\\O)",
    r#"unrecognized escape sequence"#,
    620
);

// -------------------------------------------------------------------------
// x2("\\K", "a", 0, 0); // Test 621
regex_error!(case_621, "\\K", r#"unrecognized escape sequence"#, 621);

// -------------------------------------------------------------------------
// x2("a\\K", "a", 1, 1); // Test 622
regex_error!(case_622, "a\\K", r#"unrecognized escape sequence"#, 622);

// -------------------------------------------------------------------------
// x2("a\\Kb", "ab", 1, 2); // Test 623
regex_error!(case_623, "a\\Kb", r#"unrecognized escape sequence"#, 623);

// -------------------------------------------------------------------------
// x2("(a\\Kb|ac\\Kd)", "acd", 2, 3); // Test 624
regex_error!(
    case_624,
    "(a\\Kb|ac\\Kd)",
    r#"unrecognized escape sequence"#,
    624
);

// -------------------------------------------------------------------------
// x2("(a\\Kb|\\Kac\\K)*", "acababacab", 9, 10); // Test 625
regex_error!(
    case_625,
    "(a\\Kb|\\Kac\\K)*",
    r#"unrecognized escape sequence"#,
    625
);

// -------------------------------------------------------------------------
// x2("(?:()|())*\\1", "abc", 0, 0); // Test 626
regex_error!(
    case_626,
    "(?:()|())*\\1",
    r#"backreferences are not supported"#,
    626
);

// -------------------------------------------------------------------------
// x2("(?:()|())*\\2", "abc", 0, 0); // Test 627
regex_error!(
    case_627,
    "(?:()|())*\\2",
    r#"backreferences are not supported"#,
    627
);

// -------------------------------------------------------------------------
// x2("(?:()|()|())*\\3\\1", "abc", 0, 0); // Test 628
regex_error!(
    case_628,
    "(?:()|()|())*\\3\\1",
    r#"backreferences are not supported"#,
    628
);

// -------------------------------------------------------------------------
// x2("(|(?:a(?:\\g'1')*))b|", "abc", 0, 2); // Test 629
regex_error!(
    case_629,
    "(|(?:a(?:\\g'1')*))b|",
    r#"unrecognized escape sequence"#,
    629
);

// -------------------------------------------------------------------------
// x2("^(\"|)(.*)\\1$", "XX", 0, 2); // Test 630
// backreferences are not supported

// -------------------------------------------------------------------------
// x2("(abc|def|ghi|jkl|mno|pqr|stu){0,10}?\\z", "admno", 2, 5); // Test 631
regex_error!(
    case_631,
    "(abc|def|ghi|jkl|mno|pqr|stu){0,10}?\\z",
    r#"((?:(?:abc)|(?:def)|(?:ghi)|(?:jkl)|(?:mno)|(?:pqr)|(?:stu))){0,10}?: Non-greedy repetitions. Consider using different scanner modes instead."#,
    631
);

// -------------------------------------------------------------------------
// x2("(abc|(def|ghi|jkl|mno|pqr){0,7}?){5}\\z", "adpqrpqrpqr", 2, 11); // cover OP_REPEAT_INC_NG_SG // Test 632
regex_error!(
    case_632,
    "(abc|(def|ghi|jkl|mno|pqr){0,7}?){5}\\z",
    r#"((?:(?:def)|(?:ghi)|(?:jkl)|(?:mno)|(?:pqr))){0,7}?: Non-greedy repetitions. Consider using different scanner modes instead."#,
    632
);

// -------------------------------------------------------------------------
// x2("(?!abc).*\\z", "abcde", 1, 5); // cover OP_PREC_READ_NOT_END // Test 633
regex_error!(
    case_633,
    "(?!abc).*\\z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    633
);

// -------------------------------------------------------------------------
// x2("(.{2,})?", "abcde", 0, 5); // up coverage // Test 634
scan_test!(
    case_634,
    s634,
    S634,
    r#"(.{2,})?"#,
    "abcde",
    &[("abcde", 0, 5)],
    634
);

// -------------------------------------------------------------------------
// x2("((a|b|c|d|e|f|g|h|i|j|k|l|m|n)+)?", "abcde", 0, 5); // up coverage // Test 635
scan_test!(
    case_635,
    s635,
    S635,
    r#"((a|b|c|d|e|f|g|h|i|j|k|l|m|n)+)?"#,
    "abcde",
    &[("abcde", 0, 5)],
    635
);

// -------------------------------------------------------------------------
// x2("((a|b|c|d|e|f|g|h|i|j|k|l|m|n){3,})?", "abcde", 0, 5); // up coverage // Test 636
scan_test!(
    case_636,
    s636,
    S636,
    r#"((a|b|c|d|e|f|g|h|i|j|k|l|m|n){3,})?"#,
    "abcde",
    &[("abcde", 0, 5)],
    636
);

// -------------------------------------------------------------------------
// x2("((?:a(?:b|c|d|e|f|g|h|i|j|k|l|m|n))+)?", "abacadae", 0, 8); // up coverage // Test 637
scan_test!(
    case_637,
    s637,
    S637,
    r#"((?:a(?:b|c|d|e|f|g|h|i|j|k|l|m|n))+)?"#,
    "abacadae",
    &[("abacadae", 0, 8)],
    637
);

// -------------------------------------------------------------------------
// x2("((?:a(?:b|c|d|e|f|g|h|i|j|k|l|m|n))+?)?z", "abacadaez", 0, 9); // up coverage // Test 638
regex_error!(
    case_638,
    "((?:a(?:b|c|d|e|f|g|h|i|j|k|l|m|n))+?)?z",
    r#"Non-greedy repetitions"#,
    638
);

// -------------------------------------------------------------------------
// x2("\\A((a|b)\?\?)?z", "bz", 0, 2); // up coverage // Test 639
// regex_error!(case_639, "\\A((a|b)\?\?)?z", r#"StartLine Look(Start)"#, 639); unknown character escape: `?`

// -------------------------------------------------------------------------
// x2("((?<x>abc){0}a\\g<x>d)+", "aabcd", 0, 5); // up coverage // Test 640
regex_error!(
    case_640,
    "((?<x>abc){0}a\\g<x>d)+",
    r#"unrecognized escape sequence"#,
    640
);

// -------------------------------------------------------------------------
// x2("((?(abc)true|false))+", "false", 0, 5); // up coverage // Test 641
regex_error!(
    case_641,
    "((?(abc)true|false))+",
    r#"unrecognized flag"#,
    641
);

// -------------------------------------------------------------------------
// x2("((?i:abc)d)+", "abcdABCd", 0, 8); // up coverage // Test 642
scan_test!(
    case_642,
    s642,
    S642,
    r#"((?i:abc)d)+"#,
    "abcdABCd",
    &[("abcdABCd", 0, 8)],
    642
);

// -------------------------------------------------------------------------
// x2("((?<!abc)def)+", "bcdef", 2, 5); // up coverage // Test 643
regex_error!(
    case_643,
    "((?<!abc)def)+",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    643
);

// -------------------------------------------------------------------------
// x2("(\\ba)+", "aaa", 0, 1); // up coverage // Test 644
regex_error!(case_644, "(\\ba)+", r#"WordUnicode Look(WordUnicode)"#, 644);

// -------------------------------------------------------------------------
// x2("()(?<x>ab)(?(<x>)a|b)", "aba", 0, 3); // up coverage // Test 645
regex_error!(
    case_645,
    "()(?<x>ab)(?(<x>)a|b)",
    r#"unrecognized flag"#,
    645
);

// -------------------------------------------------------------------------
// x2("(?<=a.b)c", "azbc", 3, 4); // up coverage // Test 646
regex_error!(
    case_646,
    "(?<=a.b)c",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    646
);

// -------------------------------------------------------------------------
// n("(?<=(?:abcde){30})z", "abc"); // up coverage // Test 647
regex_error!(
    case_647,
    "(?<=(?:abcde){30})z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    647
);

// -------------------------------------------------------------------------
// x2("(?<=(?(a)a|bb))z", "aaz", 2, 3); // up coverage // Test 648
regex_error!(
    case_648,
    "(?<=(?(a)a|bb))z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    648
);

// -------------------------------------------------------------------------
// x2("[a]*\\W", "aa@", 0, 3); // up coverage // Test 649
scan_test!(
    case_649,
    s649,
    S649,
    r#"[a]*\W"#,
    "aa@",
    &[("aa@", 0, 3)],
    649
);

// -------------------------------------------------------------------------
// x2("[a]*[b]", "aab", 0, 3); // up coverage // Test 650
scan_test!(
    case_650,
    s650,
    S650,
    r#"[a]*[b]"#,
    "aab",
    &[("aab", 0, 3)],
    650
);

// -------------------------------------------------------------------------
// n("a*\\W", "aaa"); // up coverage // Test 651
scan_test!(case_651, s651, S651, r#"a*\W"#, "aaa", &[], 651);

// -------------------------------------------------------------------------
// n("(?W)a*\\W", "aaa"); // up coverage // Test 652
regex_error!(case_652, "(?W)a*\\W", r#"unrecognized flag"#, 652);

// -------------------------------------------------------------------------
// x2("(?<=ab(?<=ab))", "ab", 2, 2); // up coverage // Test 653
regex_error!(
    case_653,
    "(?<=ab(?<=ab))",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    653
);

// -------------------------------------------------------------------------
// x2("(?<x>a)(?<x>b)(\\k<x>)+", "abbaab", 0, 6); // up coverage // Test 654
regex_error!(
    case_654,
    "(?<x>a)(?<x>b)(\\k<x>)+",
    r#"duplicate capture group name"#,
    654
);

// -------------------------------------------------------------------------
// x2("()(\\1)(\\2)", "abc", 0, 0); // up coverage // Test 655
regex_error!(
    case_655,
    "()(\\1)(\\2)",
    r#"backreferences are not supported"#,
    655
);

// -------------------------------------------------------------------------
// x2("((?(a)b|c))(\\1)", "abab", 0, 4); // up coverage // Test 656
regex_error!(case_656, "((?(a)b|c))(\\1)", r#"unrecognized flag"#, 656);

// -------------------------------------------------------------------------
// x2("(?<x>$|b\\g<x>)", "bbb", 0, 3); // up coverage // Test 657
regex_error!(
    case_657,
    "(?<x>$|b\\g<x>)",
    r#"unrecognized escape sequence"#,
    657
);

// -------------------------------------------------------------------------
// x2("(?<x>(?(a)a|b)|c\\g<x>)", "cccb", 0, 4); // up coverage // Test 658
regex_error!(
    case_658,
    "(?<x>(?(a)a|b)|c\\g<x>)",
    r#"unrecognized flag"#,
    658
);

// -------------------------------------------------------------------------
// x2("(a)(?(1)a*|b*)+", "aaaa", 0, 4); // up coverage // Test 659
regex_error!(case_659, "(a)(?(1)a*|b*)+", r#"unrecognized flag"#, 659);

// -------------------------------------------------------------------------
// x2("[[^abc]&&cde]*", "de", 0, 2); // up coverage // Test 660
scan_test!(
    case_660,
    s660,
    S660,
    r#"[[^abc]&&cde]*"#,
    "de",
    &[("de", 0, 2)],
    660
);

// -------------------------------------------------------------------------
// n("(a){10}{10}", "aa"); // up coverage // Test 661
scan_test!(case_661, s661, S661, r#"(a){10}{10}"#, "aa", &[], 661);

// -------------------------------------------------------------------------
// x2("(?:a?)+", "aa", 0, 2); // up coverage // Test 662
scan_test!(
    case_662,
    s662,
    S662,
    r#"(?:a?)+"#,
    "aa",
    &[("aa", 0, 2)],
    662
);

// -------------------------------------------------------------------------
// x2("(?:a?)*?", "a", 0, 0); // up coverage // Test 663
regex_error!(case_663, "(?:a?)*?", r#"Non-greedy repetitions"#, 663);

// -------------------------------------------------------------------------
// x2("(?:a*)*?", "a", 0, 0); // up coverage // Test 664
regex_error!(case_664, "(?:a*)*?", r#"Non-greedy repetitions"#, 664);

// -------------------------------------------------------------------------
// x2("(?:a+?)*", "a", 0, 1); // up coverage // Test 665
regex_error!(case_665, "(?:a+?)*", r#"Non-greedy repetitions"#, 665);

// -------------------------------------------------------------------------
// x2("\\h", "5", 0, 1); // up coverage // Test 666
regex_error!(case_666, "\\h", r#"unrecognized escape sequence"#, 666);

// -------------------------------------------------------------------------
// x2("\\H", "z", 0, 1); // up coverage // Test 667
regex_error!(case_667, "\\H", r#"unrecognized escape sequence"#, 667);

// -------------------------------------------------------------------------
// x2("[\\h]", "5", 0, 1); // up coverage // Test 668
regex_error!(case_668, "[\\h]", r#"unrecognized escape sequence"#, 668);

// -------------------------------------------------------------------------
// x2("[\\H]", "z", 0, 1); // up coverage // Test 669
regex_error!(case_669, "[\\H]", r#"unrecognized escape sequence"#, 669);

// -------------------------------------------------------------------------
// x2("[\\o{101}]", "A", 0, 1); // up coverage // Test 670
regex_error!(
    case_670,
    "[\\o{101}]",
    r#"unrecognized escape sequence"#,
    670
);

// -------------------------------------------------------------------------
// x2("[\\u0041]", "A", 0, 1); // up coverage // Test 671
scan_test!(
    case_671,
    s671,
    S671,
    r#"[\u0041]"#,
    "A",
    &[("A", 0, 1)],
    671
);

// -------------------------------------------------------------------------
// x2("(?~)", "", 0, 0); // Test 672
regex_error!(case_672, "(?~)", r#"unrecognized flag"#, 672);

// -------------------------------------------------------------------------
// x2("(?~)", "A", 0, 0); // Test 673
regex_error!(case_673, "(?~)", r#"unrecognized flag"#, 673);

// -------------------------------------------------------------------------
// x2("(?~ab)", "abc", 0, 0); // Test 674
regex_error!(case_674, "(?~ab)", r#"unrecognized flag"#, 674);

// -------------------------------------------------------------------------
// x2("(?~abc)", "abc", 0, 0); // Test 675
regex_error!(case_675, "(?~abc)", r#"unrecognized flag"#, 675);

// -------------------------------------------------------------------------
// x2("(?~abc|ab)", "abc", 0, 0); // Test 676
regex_error!(case_676, "(?~abc|ab)", r#"unrecognized flag"#, 676);

// -------------------------------------------------------------------------
// x2("(?~ab|abc)", "abc", 0, 0); // Test 677
regex_error!(case_677, "(?~ab|abc)", r#"unrecognized flag"#, 677);

// -------------------------------------------------------------------------
// x2("(?~a.c)", "abc", 0, 0); // Test 678
regex_error!(case_678, "(?~a.c)", r#"unrecognized flag"#, 678);

// -------------------------------------------------------------------------
// x2("(?~a.c|ab)", "abc", 0, 0); // Test 679
regex_error!(case_679, "(?~a.c|ab)", r#"unrecognized flag"#, 679);

// -------------------------------------------------------------------------
// x2("(?~ab|a.c)", "abc", 0, 0); // Test 680
regex_error!(case_680, "(?~ab|a.c)", r#"unrecognized flag"#, 680);

// -------------------------------------------------------------------------
// x2("aaaaa(?~)", "aaaaaaaaaa", 0, 5); // Test 681
regex_error!(case_681, "aaaaa(?~)", r#"unrecognized flag"#, 681);

// -------------------------------------------------------------------------
// x2("(?~(?:|aaa))", "aaa", 0, 0); // Test 682
regex_error!(case_682, "(?~(?:|aaa))", r#"unrecognized flag"#, 682);

// -------------------------------------------------------------------------
// x2("(?~aaa|)", "aaa", 0, 0); // Test 683
regex_error!(case_683, "(?~aaa|)", r#"unrecognized flag"#, 683);

// -------------------------------------------------------------------------
// x2("a(?~(?~)).", "abcdefghijklmnopqrstuvwxyz", 0, 26); // nested absent functions cause strange result // Test 684
regex_error!(case_684, "a(?~(?~)).", r#"unrecognized flag"#, 684);

// -------------------------------------------------------------------------
// x2("/\\*(?~\\*/)\\*/", "/* */ */", 0, 5); // Test 685
regex_error!(case_685, "/\\*(?~\\*/)\\*/", r#"unrecognized flag"#, 685);

// -------------------------------------------------------------------------
// x2("(?~\\w+)zzzzz", "zzzzz", 0, 5); // Test 686
regex_error!(case_686, "(?~\\w+)zzzzz", r#"unrecognized flag"#, 686);

// -------------------------------------------------------------------------
// x2("(?~\\w*)zzzzz", "zzzzz", 0, 5); // Test 687
regex_error!(case_687, "(?~\\w*)zzzzz", r#"unrecognized flag"#, 687);

// -------------------------------------------------------------------------
// x2("(?~A.C|B)", "ABC", 0, 0); // Test 688
regex_error!(case_688, "(?~A.C|B)", r#"unrecognized flag"#, 688);

// -------------------------------------------------------------------------
// x2("(?~XYZ|ABC)a", "ABCa", 1, 4); // Test 689
regex_error!(case_689, "(?~XYZ|ABC)a", r#"unrecognized flag"#, 689);

// -------------------------------------------------------------------------
// x2("(?~XYZ|ABC)a", "aABCa", 0, 1); // Test 690
regex_error!(case_690, "(?~XYZ|ABC)a", r#"unrecognized flag"#, 690);

// -------------------------------------------------------------------------
// x2("<[^>]*>(?~[<>])</[^>]*>", "<a>vvv</a>   <b>  </b>", 0, 10); // Test 691
regex_error!(
    case_691,
    "<[^>]*>(?~[<>])</[^>]*>",
    r#"unrecognized flag"#,
    691
);

// -------------------------------------------------------------------------
// x2("(?~ab)", "ccc\ndab", 0, 5); // Test 692
regex_error!(case_692, "(?~ab)", r#"unrecognized flag"#, 692);

// -------------------------------------------------------------------------
// x2("(?m:(?~ab))", "ccc\ndab", 0, 5); // Test 693
regex_error!(case_693, "(?m:(?~ab))", r#"unrecognized flag"#, 693);

// -------------------------------------------------------------------------
// x2("(?-m:(?~ab))", "ccc\ndab", 0, 5); // Test 694
regex_error!(case_694, "(?-m:(?~ab))", r#"unrecognized flag"#, 694);

// -------------------------------------------------------------------------
// x2("(?~abc)xyz", "xyz012345678901234567890123456789abc", 0, 3); // Test 695
regex_error!(case_695, "(?~abc)xyz", r#"unrecognized flag"#, 695);

// -------------------------------------------------------------------------
// x2("(?~|78|\\d*)", "123456789", 0, 6); // Test 696
regex_error!(case_696, "(?~|78|\\d*)", r#"unrecognized flag"#, 696);

// -------------------------------------------------------------------------
// x2("(?~|def|(?:abc|de|f){0,100})", "abcdedeabcfdefabc", 0, 11); // Test 697
regex_error!(
    case_697,
    "(?~|def|(?:abc|de|f){0,100})",
    r#"unrecognized flag"#,
    697
);

// -------------------------------------------------------------------------
// x2("(?~|ab|.*)", "ccc\nddd", 0, 3); // Test 698
regex_error!(case_698, "(?~|ab|.*)", r#"unrecognized flag"#, 698);

// -------------------------------------------------------------------------
// x2("(?~|ab|\\O*)", "ccc\ndab", 0, 5); // Test 699
regex_error!(case_699, "(?~|ab|\\O*)", r#"unrecognized flag"#, 699);

// -------------------------------------------------------------------------
// x2("(?~|ab|\\O{2,10})", "ccc\ndab", 0, 5); // Test 700
regex_error!(case_700, "(?~|ab|\\O{2,10})", r#"unrecognized flag"#, 700);

// -------------------------------------------------------------------------
// x2("(?~|ab|\\O{1,10})", "ab", 1, 2); // Test 701
regex_error!(case_701, "(?~|ab|\\O{1,10})", r#"unrecognized flag"#, 701);

// -------------------------------------------------------------------------
// n("(?~|ab|\\O{2,10})", "ab"); // Test 702
regex_error!(case_702, "(?~|ab|\\O{2,10})", r#"unrecognized flag"#, 702);

// -------------------------------------------------------------------------
// x2("(?~|abc|\\O{1,10})", "abc", 1, 3); // Test 703
regex_error!(case_703, "(?~|abc|\\O{1,10})", r#"unrecognized flag"#, 703);

// -------------------------------------------------------------------------
// x2("(?~|ab|\\O{5,10})|abc", "abc", 0, 3); // Test 704
regex_error!(
    case_704,
    "(?~|ab|\\O{5,10})|abc",
    r#"unrecognized flag"#,
    704
);

// -------------------------------------------------------------------------
// x2("(?~|ab|\\O{1,10})", "cccccccccccab", 0, 10); // Test 705
regex_error!(case_705, "(?~|ab|\\O{1,10})", r#"unrecognized flag"#, 705);

// -------------------------------------------------------------------------
// x2("(?~|aaa|)", "aaa", 0, 0); // Test 706
regex_error!(case_706, "(?~|aaa|)", r#"unrecognized flag"#, 706);

// -------------------------------------------------------------------------
// x2("(?~||a*)", "aaaaaa", 0, 0); // Test 707
regex_error!(case_707, "(?~||a*)", r#"unrecognized flag"#, 707);

// -------------------------------------------------------------------------
// x2("(?~||a*?)", "aaaaaa", 0, 0); // Test 708
regex_error!(case_708, "(?~||a*?)", r#"unrecognized flag"#, 708);

// -------------------------------------------------------------------------
// x2("(a)(?~|b|\\1)", "aaaaaa", 0, 2); // Test 709
regex_error!(case_709, "(a)(?~|b|\\1)", r#"unrecognized flag"#, 709);

// -------------------------------------------------------------------------
// x2("(a)(?~|bb|(?:a\\1)*)", "aaaaaa", 0, 5); // Test 710
regex_error!(
    case_710,
    "(a)(?~|bb|(?:a\\1)*)",
    r#"unrecognized flag"#,
    710
);

// -------------------------------------------------------------------------
// x2("(b|c)(?~|abac|(?:a\\1)*)", "abababacabab", 1, 4); // Test 711
regex_error!(
    case_711,
    "(b|c)(?~|abac|(?:a\\1)*)",
    r#"unrecognized flag"#,
    711
);

// -------------------------------------------------------------------------
// n("(?~|c|a*+)a", "aaaaa"); // Test 712
regex_error!(case_712, "(?~|c|a*+)a", r#"unrecognized flag"#, 712);

// -------------------------------------------------------------------------
// x2("(?~|aaaaa|a*+)", "aaaaa", 0, 0); // Test 713
regex_error!(case_713, "(?~|aaaaa|a*+)", r#"unrecognized flag"#, 713);

// -------------------------------------------------------------------------
// x2("(?~|aaaaaa|a*+)b", "aaaaaab", 1, 7); // Test 714
regex_error!(case_714, "(?~|aaaaaa|a*+)b", r#"unrecognized flag"#, 714);

// -------------------------------------------------------------------------
// x2("(?~|abcd|(?>))", "zzzabcd", 0, 0); // Test 715
regex_error!(case_715, "(?~|abcd|(?>))", r#"unrecognized flag"#, 715);

// -------------------------------------------------------------------------
// x2("(?~|abc|a*?)", "aaaabc", 0, 0); // Test 716
regex_error!(case_716, "(?~|abc|a*?)", r#"unrecognized flag"#, 716);

// -------------------------------------------------------------------------
// x2("(?~|abc)a*", "aaaaaabc", 0, 5); // Test 717
regex_error!(case_717, "(?~|abc)a*", r#"unrecognized flag"#, 717);

// -------------------------------------------------------------------------
// x2("(?~|abc)a*z|aaaaaabc", "aaaaaabc", 0, 8); // Test 718
regex_error!(
    case_718,
    "(?~|abc)a*z|aaaaaabc",
    r#"unrecognized flag"#,
    718
);

// -------------------------------------------------------------------------
// x2("(?~|aaaaaa)a*", "aaaaaa", 0, 0); // Test 719
regex_error!(case_719, "(?~|aaaaaa)a*", r#"unrecognized flag"#, 719);

// -------------------------------------------------------------------------
// x2("(?~|abc)aaaa|aaaabc", "aaaabc", 0, 6); // Test 720
regex_error!(case_720, "(?~|abc)aaaa|aaaabc", r#"unrecognized flag"#, 720);

// -------------------------------------------------------------------------
// x2("(?>(?~|abc))aaaa|aaaabc", "aaaabc", 0, 6); // Test 721
regex_error!(
    case_721,
    "(?>(?~|abc))aaaa|aaaabc",
    r#"unrecognized flag"#,
    721
);

// -------------------------------------------------------------------------
// x2("(?~|)a", "a", 0, 1); // Test 722
regex_error!(case_722, "(?~|)a", r#"unrecognized flag"#, 722);

// -------------------------------------------------------------------------
// n("(?~|a)a", "a"); // Test 723
regex_error!(case_723, "(?~|a)a", r#"unrecognized flag"#, 723);

// -------------------------------------------------------------------------
// x2("(?~|a)(?~|)a", "a", 0, 1); // Test 724
regex_error!(case_724, "(?~|a)(?~|)a", r#"unrecognized flag"#, 724);

// -------------------------------------------------------------------------
// x2("(?~|a).*(?~|)a", "bbbbbbbbbbbbbbbbbbbba", 0, 21); // Test 725
regex_error!(case_725, "(?~|a).*(?~|)a", r#"unrecognized flag"#, 725);

// -------------------------------------------------------------------------
// x2("(?~|abc).*(xyz|pqr)(?~|)abc", "aaaaxyzaaapqrabc", 0, 16); // Test 726
regex_error!(
    case_726,
    "(?~|abc).*(xyz|pqr)(?~|)abc",
    r#"unrecognized flag"#,
    726
);

// -------------------------------------------------------------------------
// x2("(?~|abc).*(xyz|pqr)(?~|)abc", "aaaaxyzaaaabcpqrabc", 11, 19); // Test 727
regex_error!(
    case_727,
    "(?~|abc).*(xyz|pqr)(?~|)abc",
    r#"unrecognized flag"#,
    727
);

// -------------------------------------------------------------------------
// n("\\A(?~|abc).*(xyz|pqrabc)(?~|)abc", "aaaaxyzaaaabcpqrabcabc"); // Test 728
regex_error!(
    case_728,
    "\\A(?~|abc).*(xyz|pqrabc)(?~|)abc",
    r#"unrecognized flag"#,
    728
);

// -------------------------------------------------------------------------
// x2("", "あ", 0, 0); // Test 729
scan_test!(case_729, s729, S729, r#""#, "あ", &[], 729);

// -------------------------------------------------------------------------
// *** Index error: x2("あ", "あ", 0, 3); // Test 730

// -------------------------------------------------------------------------
// n("い", "あ"); // Test 731
scan_test!(case_731, s731, S731, r#"い"#, "あ", &[], 731);

// -------------------------------------------------------------------------
// *** Index error: x2("うう", "うう", 0, 6); // Test 732

// -------------------------------------------------------------------------
// *** Index error: x2("あいう", "あいう", 0, 9); // Test 733

// -------------------------------------------------------------------------
// *** Index error: x2("こここここここここここここここここここここここここここここここここここ", "こここここここここここここここここここここここここここここここここここ", 0, 105); // Test 734

// -------------------------------------------------------------------------
// *** Index error:  x2("あ", "いあ", 3, 6); // Test 735

// -------------------------------------------------------------------------
// *** Index error: x2("いう", "あいう", 3, 9); // Test 736

// -------------------------------------------------------------------------
// x2("\\xca\\xb8", "\xca\xb8", 0, 2); // Test 737
scanner! { S737 { mode M { token r#"\xca\xb8"# => 0; } } }

// -------------------------------------------------------------------------
// *** Index error: x2(".", "あ", 0, 3); // Test 738

// -------------------------------------------------------------------------
// *** Index error: x2("..", "かき", 0, 6); // Test 739

// -------------------------------------------------------------------------
// *** Index error: x2("\\w", "お", 0, 3); // Test 740

// -------------------------------------------------------------------------
// n("\\W", "あ"); // Test 741
scan_test!(case_741, s741, S741, r#"\W"#, "あ", &[], 741);

// -------------------------------------------------------------------------
// *** Index error:  x2("[\\W]", "う$", 3, 4); // Test 742

// -------------------------------------------------------------------------
// *** Index error: x2("\\S", "そ", 0, 3); // Test 743

// -------------------------------------------------------------------------
// *** Index error: x2("\\S", "漢", 0, 3); // Test 744

// -------------------------------------------------------------------------
// x2("\\b", "気 ", 0, 0); // Test 745
regex_error!(case_745, "\\b", r#"WordUnicode Look(WordUnicode)"#, 745);

// -------------------------------------------------------------------------
// x2("\\b", " ほ", 1, 1); // Test 746
regex_error!(case_746, "\\b", r#"WordUnicode Look(WordUnicode)"#, 746);

// -------------------------------------------------------------------------
// x2("\\B", "せそ ", 3, 3); // Test 747
regex_error!(
    case_747,
    "\\B",
    r#"WordUnicodeNegate Look(WordUnicodeNegate)"#,
    747
);

// -------------------------------------------------------------------------
// *** Index error:  x2("\\B", "う ", 4, 4); // Test 748

// -------------------------------------------------------------------------
// x2("\\B", " い", 0, 0); // Test 749
regex_error!(
    case_749,
    "\\B",
    r#"WordUnicodeNegate Look(WordUnicodeNegate)"#,
    749
);

// -------------------------------------------------------------------------
// *** Index error: x2("[たち]", "ち", 0, 3); // Test 750

// -------------------------------------------------------------------------
// n("[なに]", "ぬ"); // Test 751
scan_test!(case_751, s751, S751, r#"[なに]"#, "ぬ", &[], 751);

// -------------------------------------------------------------------------
// *** Index error: x2("[う-お]", "え", 0, 3); // Test 752

// -------------------------------------------------------------------------
// n("[^け]", "け"); // Test 753
scan_test!(case_753, s753, S753, r#"[^け]"#, "け", &[], 753);

// -------------------------------------------------------------------------
// *** Index error: x2("[\\w]", "ね", 0, 3); // Test 754

// -------------------------------------------------------------------------
// n("[\\d]", "ふ"); // Test 755
scan_test!(case_755, s755, S755, r#"[\\d]"#, "ふ", &[], 755);

// -------------------------------------------------------------------------
// *** Index error: x2("[\\D]", "は", 0, 3); // Test 756

// -------------------------------------------------------------------------
// n("[\\s]", "く"); // Test 757
scan_test!(case_757, s757, S757, r#"[\\s]"#, "く", &[], 757);

// -------------------------------------------------------------------------
// *** Index error: x2("[\\S]", "へ", 0, 3); // Test 758

// -------------------------------------------------------------------------
// *** Index error: x2("[\\w\\d]", "よ", 0, 3); // Test 759

// -------------------------------------------------------------------------
// *** Index error: x2("[\\w\\d]", "   よ", 3, 6); // Test 760

// -------------------------------------------------------------------------
// n("\\w鬼車", " 鬼車"); // Test 761
scan_test!(case_761, s761, S761, r#"\w鬼車"#, " 鬼車", &[], 761);

// -------------------------------------------------------------------------
// *** Index error: x2("鬼\\W車", "鬼 車", 0, 7); // Test 762

// -------------------------------------------------------------------------
// *** Index error: x2("あ.い.う", "ああいいう", 0, 15); // Test 763

// -------------------------------------------------------------------------
// *** Index error: x2(".\\wう\\W..ぞ", "えうう うぞぞ", 0, 19); // Test 764

// -------------------------------------------------------------------------
// *** Index error: x2("\\s\\wこここ", " ここここ", 0, 13); // Test 765

// -------------------------------------------------------------------------
// *** Index error: x2("ああ.け", "ああけけ", 0, 12); // Test 766

// -------------------------------------------------------------------------
// n(".い", "いえ"); // Test 767
scan_test!(case_767, s767, S767, r#".い"#, "いえ", &[], 767);

// -------------------------------------------------------------------------
// *** Index error: x2(".お", "おお", 0, 6); // Test 768

// -------------------------------------------------------------------------
// *** Index error: x2("^あ", "あ", 0, 3); // Test 769

// -------------------------------------------------------------------------
// *** Index error: x2("^む$", "む", 0, 3); // Test 770

// -------------------------------------------------------------------------
// *** Index error: x2("^\\w$", "に", 0, 3); // Test 771

// -------------------------------------------------------------------------
// *** Index error: x2("^\\wかきくけこ$", "zかきくけこ", 0, 16); // Test 772

// -------------------------------------------------------------------------
// *** Index error: x2("^\\w...うえお$", "zあいううえお", 0, 19); // Test 773

// -------------------------------------------------------------------------
// *** Index error: x2("\\w\\w\\s\\Wおおお\\d", "aお  おおお4", 0, 16); // Test 774

// -------------------------------------------------------------------------
// *** Index error: x2("\\Aたちつ", "たちつ", 0, 9); // Test 775

// -------------------------------------------------------------------------
// *** Index error: x2("むめも\\Z", "むめも", 0, 9); // Test 776

// -------------------------------------------------------------------------
// *** Index error: x2("かきく\\z", "かきく", 0, 9); // Test 777

// -------------------------------------------------------------------------
// *** Index error: x2("かきく\\Z", "かきく\n", 0, 9); // Test 778

// -------------------------------------------------------------------------
// *** Index error: x2("\\Gぽぴ", "ぽぴ", 0, 6); // Test 779

// -------------------------------------------------------------------------
// n("\\Gえ", "うえお"); // Test 780
regex_error!(case_780, "\\Gえ", r#"unrecognized escape sequence"#, 780);

// -------------------------------------------------------------------------
// n("とて\\G", "とて"); // Test 781
regex_error!(case_781, "とて\\G", r#"unrecognized escape sequence"#, 781);

// -------------------------------------------------------------------------
// n("まみ\\A", "まみ"); // Test 782
regex_error!(case_782, "まみ\\A", r#"StartLine Look(Start)"#, 782);

// -------------------------------------------------------------------------
// n("ま\\Aみ", "まみ"); // Test 783
regex_error!(case_783, "ま\\Aみ", r#"StartLine Look(Start)"#, 783);

// -------------------------------------------------------------------------
// *** Index error: x2("(?=せ)せ", "せ", 0, 3); // Test 784

// -------------------------------------------------------------------------
// n("(?=う).", "い"); // Test 785
regex_error!(
    case_785,
    "(?=う).",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    785
);

// -------------------------------------------------------------------------
// *** Index error: x2("(?!う)か", "か", 0, 3); // Test 786

// -------------------------------------------------------------------------
// n("(?!と)あ", "と"); // Test 787
regex_error!(
    case_787,
    "(?!と)あ",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    787
);

// -------------------------------------------------------------------------
// *** Index error: x2("(?i:あ)", "あ", 0, 3); // Test 788

// -------------------------------------------------------------------------
// *** Index error: x2("(?i:ぶべ)", "ぶべ", 0, 6); // Test 789

// -------------------------------------------------------------------------
// n("(?i:い)", "う"); // Test 790
scan_test!(case_790, s790, S790, r#"(?i:い)"#, "う", &[], 790);

// -------------------------------------------------------------------------
// *** Index error: x2("(?m:よ.)", "よ\n", 0, 4); // Test 791

// -------------------------------------------------------------------------
// *** Index error: x2("(?m:.め)", "ま\nめ", 3, 7); // Test 792

// -------------------------------------------------------------------------
// x2("あ?", "", 0, 0); // Test 793
scan_test!(case_793, s793, S793, r#"あ?"#, "", &[], 793);

// -------------------------------------------------------------------------
// x2("変?", "化", 0, 0); // Test 794
scan_test!(case_794, s794, S794, r#"変?"#, "化", &[], 794);

// -------------------------------------------------------------------------
// *** Index error: x2("変?", "変", 0, 3); // Test 795

// -------------------------------------------------------------------------
// x2("量*", "", 0, 0); // Test 796
scan_test!(case_796, s796, S796, r#"量*"#, "", &[], 796);

// -------------------------------------------------------------------------
// *** Index error: x2("量*", "量", 0, 3); // Test 797

// -------------------------------------------------------------------------
// *** Index error: x2("子*", "子子子", 0, 9); // Test 798

// -------------------------------------------------------------------------
// x2("馬*", "鹿馬馬馬馬", 0, 0); // Test 799
scan_test!(case_799, s799, S799, r#"馬*"#, "鹿馬馬馬馬", &[], 799);

// -------------------------------------------------------------------------
// n("山+", ""); // Test 800
scan_test!(case_800, s800, S800, r#"山+"#, "", &[], 800);

// -------------------------------------------------------------------------
// *** Index error: x2("河+", "河", 0, 3); // Test 801

// -------------------------------------------------------------------------
// *** Index error: x2("時+", "時時時時", 0, 12); // Test 802

// -------------------------------------------------------------------------
// *** Index error: x2("え+", "ええううう", 0, 6); // Test 803

// -------------------------------------------------------------------------
// *** Index error: x2("う+", "おうううう", 3, 15); // Test 804

// -------------------------------------------------------------------------
// *** Index error: x2(".?", "た", 0, 3); // Test 805

// -------------------------------------------------------------------------
// *** Index error: x2(".*", "ぱぴぷぺ", 0, 12); // Test 806

// -------------------------------------------------------------------------
// *** Index error: x2(".+", "ろ", 0, 3); // Test 807

// -------------------------------------------------------------------------
// *** Index error: x2(".+", "いうえか\n", 0, 12); // Test 808

// -------------------------------------------------------------------------
// *** Index error: x2("あ|い", "あ", 0, 3); // Test 809

// -------------------------------------------------------------------------
// *** Index error: x2("あ|い", "い", 0, 3); // Test 810

// -------------------------------------------------------------------------
// *** Index error: x2("あい|いう", "あい", 0, 6); // Test 811

// -------------------------------------------------------------------------
// *** Index error: x2("あい|いう", "いう", 0, 6); // Test 812

// -------------------------------------------------------------------------
// *** Index error: x2("を(?:かき|きく)", "をかき", 0, 9); // Test 813

// -------------------------------------------------------------------------
// *** Index error: x2("を(?:かき|きく)け", "をきくけ", 0, 12); // Test 814

// -------------------------------------------------------------------------
// *** Index error: x2("あい|(?:あう|あを)", "あを", 0, 6); // Test 815

// -------------------------------------------------------------------------
// *** Index error:  x2("あ|い|う", "えう", 3, 6); // Test 816

// -------------------------------------------------------------------------
// *** Index error: x2("あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね", "しすせ", 0, 9); // Test 817

// -------------------------------------------------------------------------
// n("あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね", "すせ"); // Test 818
scan_test!(
    case_818,
    s818,
    S818,
    r#"あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね"#,
    "すせ",
    &[],
    818
);

// -------------------------------------------------------------------------
// *** Index error:  x2("あ|^わ", "ぶあ", 3, 6); // Test 819

// -------------------------------------------------------------------------
// *** Index error: x2("あ|^を", "をあ", 0, 3); // Test 820

// -------------------------------------------------------------------------
// *** Index error:  x2("鬼|\\G車", "け車鬼", 6, 9); // Test 821

// -------------------------------------------------------------------------
// *** Index error: x2("鬼|\\G車", "車鬼", 0, 3); // Test 822

// -------------------------------------------------------------------------
// *** Index error:  x2("鬼|\\A車", "b車鬼", 4, 7); // Test 823

// -------------------------------------------------------------------------
// *** Index error: x2("鬼|\\A車", "車", 0, 3); // Test 824

// -------------------------------------------------------------------------
// *** Index error:  x2("鬼|車\\Z", "車鬼", 3, 6); // Test 825

// -------------------------------------------------------------------------
// *** Index error: x2("鬼|車\\Z", "車", 0, 3); // Test 826

// -------------------------------------------------------------------------
// x2("鬼|車\\Z", "車\n", 0, 3); // Test 827
regex_error!(case_827, "鬼|車\\Z", r#"unrecognized escape sequence"#, 827);

// -------------------------------------------------------------------------
// *** Index error:  x2("鬼|車\\z", "車鬼", 3, 6); // Test 828

// -------------------------------------------------------------------------
// *** Index error: x2("鬼|車\\z", "車", 0, 3); // Test 829

// -------------------------------------------------------------------------
// *** Index error: x2("\\w|\\s", "お", 0, 3); // Test 830

// -------------------------------------------------------------------------
// x2("\\w|%", "%お", 0, 1); // Test 831
scan_test!(
    case_831,
    s831,
    S831,
    r#"\w|%"#,
    "%お",
    &[("%", 0, 1), ("お", 1, 4)], // Oniguruma: ("%", 0, 1)
    831
);

// -------------------------------------------------------------------------
// *** Index error: x2("\\w|[&$]", "う&", 0, 3); // Test 832

// -------------------------------------------------------------------------
// *** Index error: x2("[い-け]", "う", 0, 3); // Test 833

// -------------------------------------------------------------------------
// *** Index error: x2("[い-け]|[^か-こ]", "あ", 0, 3); // Test 834

// -------------------------------------------------------------------------
// *** Index error: x2("[い-け]|[^か-こ]", "か", 0, 3); // Test 835

// -------------------------------------------------------------------------
// x2("[^あ]", "\n", 0, 1); // Test 836
scan_test!(case_836, s836, S836, r#"[^あ]"#, "\n", &[("\n", 0, 1)], 836);

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ|[う-き])|いを", "うを", 0, 3); // Test 837

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ|[う-き])|いを", "いを", 0, 6); // Test 838

// -------------------------------------------------------------------------
// *** Index error: x2("あいう|(?=けけ)..ほ", "けけほ", 0, 9); // Test 839

// -------------------------------------------------------------------------
// *** Index error: x2("あいう|(?!けけ)..ほ", "あいほ", 0, 9); // Test 840

// -------------------------------------------------------------------------
// *** Index error: x2("(?=をあ)..あ|(?=をを)..あ", "ををあ", 0, 9); // Test 841

// -------------------------------------------------------------------------
// *** Index error:  x2("(?<=あ|いう)い", "いうい", 6, 9); // Test 842

// -------------------------------------------------------------------------
// n("(?>あ|あいえ)う", "あいえう"); // Test 843
regex_error!(case_843, "(?>あ|あいえ)う", r#"unrecognized flag"#, 843);

// -------------------------------------------------------------------------
// *** Index error: x2("(?>あいえ|あ)う", "あいえう", 0, 12); // Test 844

// -------------------------------------------------------------------------
// *** Index error: x2("あ?|い", "あ", 0, 3); // Test 845

// -------------------------------------------------------------------------
// x2("あ?|い", "い", 0, 0); // Test 846
scan_test!(case_846, s846, S846, r#"あ?|い"#, "い", &[], 846);

// -------------------------------------------------------------------------
// x2("あ?|い", "", 0, 0); // Test 847
scan_test!(case_847, s847, S847, r#"あ?|い"#, "", &[], 847);

// -------------------------------------------------------------------------
// *** Index error: x2("あ*|い", "ああ", 0, 6); // Test 848

// -------------------------------------------------------------------------
// x2("あ*|い*", "いあ", 0, 0); // Test 849
scan_test!(case_849, s849, S849, r#"あ*|い*"#, "いあ", &[], 849);

// -------------------------------------------------------------------------
// *** Index error: x2("あ*|い*", "あい", 0, 3); // Test 850

// -------------------------------------------------------------------------
// x2("[aあ]*|い*", "aあいいい", 0, 4); // Test 851
scan_test!(
    case_851,
    s851,
    S851,
    r#"[aあ]*|い*"#,
    "aあいいい",
    &[("aあ", 0, 4)],
    851
);

// -------------------------------------------------------------------------
// x2("あ+|い*", "", 0, 0); // Test 852
scan_test!(case_852, s852, S852, r#"あ+|い*"#, "", &[], 852);

// -------------------------------------------------------------------------
// *** Index error: x2("あ+|い*", "いいい", 0, 9); // Test 853

// -------------------------------------------------------------------------
// x2("あ+|い*", "あいいい", 0, 3); // Test 854
scan_test!(
    case_854,
    s854,
    S854,
    r#"あ+|い*"#,
    "あいいい",
    &[], // Oniguruma: ("あ", 0, 3)
    854
);

// -------------------------------------------------------------------------
// x2("あ+|い*", "aあいいい", 0, 0); // Test 855
scan_test!(case_855, s855, S855, r#"あ+|い*"#, "aあいいい", &[], 855);

// -------------------------------------------------------------------------
// n("あ+|い+", ""); // Test 856
scan_test!(case_856, s856, S856, r#"あ+|い+"#, "", &[], 856);

// -------------------------------------------------------------------------
// *** Index error: x2("(あ|い)?", "い", 0, 3); // Test 857

// -------------------------------------------------------------------------
// *** Index error: x2("(あ|い)*", "いあ", 0, 6); // Test 858

// -------------------------------------------------------------------------
// *** Index error: x2("(あ|い)+", "いあい", 0, 9); // Test 859

// -------------------------------------------------------------------------
// *** Index error: x2("(あい|うあ)+", "うああいうえ", 0, 12); // Test 860

// -------------------------------------------------------------------------
// *** Index error: x2("(あい|うえ)+", "うああいうえ", 6, 18); // Test 861

// -------------------------------------------------------------------------
// *** Index error: x2("(あい|うあ)+", "ああいうあ", 3, 15); // Test 862

// -------------------------------------------------------------------------
// *** Index error: x2("(あい|うあ)+", "あいをうあ", 0, 6); // Test 863

// -------------------------------------------------------------------------
// *** Index error: x2("(あい|うあ)+", "$$zzzzあいをうあ", 6, 12); // Test 864

// -------------------------------------------------------------------------
// *** Index error: x2("(あ|いあい)+", "あいあいあ", 0, 15); // Test 865

// -------------------------------------------------------------------------
// *** Index error:  x2("(あ|いあい)+", "いあ", 3, 6); // Test 866

// -------------------------------------------------------------------------
// *** Index error: x2("(あ|いあい)+", "いあああいあ", 3, 12); // Test 867

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ|い)(?:あ|い)", "あい", 0, 6); // Test 868

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ*|い*)(?:あ*|い*)", "あああいいい", 0, 9); // Test 869

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ*|い*)(?:あ+|い+)", "あああいいい", 0, 18); // Test 870

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ+|い+){2}", "あああいいい", 0, 18); // Test 871

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ+|い+){1,2}", "あああいいい", 0, 18); // Test 872

// -------------------------------------------------------------------------
// *** Index error: x2("(?:あ+|\\Aい*)うう", "うう", 0, 6); // Test 873

// -------------------------------------------------------------------------
// n("(?:あ+|\\Aい*)うう", "あいうう"); // Test 874
regex_error!(
    case_874,
    "(?:あ+|\\Aい*)うう",
    r#"StartLine Look(Start)"#,
    874
);

// -------------------------------------------------------------------------
// *** Index error:  x2("(?:^あ+|い+)*う", "ああいいいあいう", 18, 24); // Test 875

// -------------------------------------------------------------------------
// *** Index error: x2("(?:^あ+|い+)*う", "ああいいいいう", 0, 21); // Test 876

// -------------------------------------------------------------------------
// *** Index error: x2("う{0,}", "うううう", 0, 12); // Test 877

// -------------------------------------------------------------------------
// x2("あ|(?i)c", "C", 0, 1); // Test 878
scan_test!(
    case_878,
    s878,
    S878,
    r#"あ|(?i)c"#,
    "C",
    &[("C", 0, 1)],
    878
);

// -------------------------------------------------------------------------
// x2("(?i)c|あ", "C", 0, 1); // Test 879
scan_test!(
    case_879,
    s879,
    S879,
    r#"(?i)c|あ"#,
    "C",
    &[("C", 0, 1)],
    879
);

// -------------------------------------------------------------------------
// x2("(?i:あ)|a", "a", 0, 1); // Test 880
scan_test!(
    case_880,
    s880,
    S880,
    r#"(?i:あ)|a"#,
    "a",
    &[("a", 0, 1)],
    880
);

// -------------------------------------------------------------------------
// n("(?i:あ)|a", "A"); // Test 881
scan_test!(case_881, s881, S881, r#"(?i:あ)|a"#, "A", &[], 881);

// -------------------------------------------------------------------------
// *** Index error: x2("[あいう]*", "あいう", 0, 9); // Test 882

// -------------------------------------------------------------------------
// x2("[^あいう]*", "あいう", 0, 0); // Test 883
scan_test!(case_883, s883, S883, r#"[^あいう]*"#, "あいう", &[], 883);

// -------------------------------------------------------------------------
// n("[^あいう]+", "あいう"); // Test 884
scan_test!(case_884, s884, S884, r#"[^あいう]+"#, "あいう", &[], 884);

// -------------------------------------------------------------------------
// x2("あ?\?", "あああ", 0, 0); // Test 885
scan_test!(case_885, s885, S885, r#"あ?\?"#, "あああ", &[], 885);

// -------------------------------------------------------------------------
// *** Index error: x2("いあ?\?い", "いあい", 0, 9); // Test 886

// -------------------------------------------------------------------------
// x2("あ*?", "あああ", 0, 0); // Test 887
regex_error!(case_887, "あ*?", r#"Non-greedy repetitions"#, 887);

// -------------------------------------------------------------------------
// x2("いあ*?", "いああ", 0, 3); // Test 888
regex_error!(case_888, "いあ*?", r#"Non-greedy repetitions"#, 888);

// -------------------------------------------------------------------------
// *** Index error: x2("いあ*?い", "いああい", 0, 12); // Test 889

// -------------------------------------------------------------------------
// x2("あ+?", "あああ", 0, 3); // Test 890
regex_error!(case_890, "あ+?", r#"Non-greedy repetitions"#, 890);

// -------------------------------------------------------------------------
// *** Index error: x2("いあ+?", "いああ", 0, 6); // Test 891

// -------------------------------------------------------------------------
// *** Index error: x2("いあ+?い", "いああい", 0, 12); // Test 892

// -------------------------------------------------------------------------
// x2("(?:天?)?\?", "天", 0, 0); // Test 893
scan_test!(case_893, s893, S893, r#"(?:天?)?\?"#, "天", &[], 893);

// -------------------------------------------------------------------------
// x2("(?:天?\?)?", "天", 0, 0); // Test 894
scan_test!(case_894, s894, S894, r#"(?:天?\?)?"#, "天", &[], 894);

// -------------------------------------------------------------------------
// x2("(?:夢?)+?", "夢夢夢", 0, 3); // Test 895
regex_error!(case_895, "(?:夢?)+?", r#"Non-greedy repetitions"#, 895);

// -------------------------------------------------------------------------
// x2("(?:風+)?\?", "風風風", 0, 0); // Test 896
scan_test!(case_896, s896, S896, r#"(?:風+)?\?"#, "風風風", &[], 896);

// -------------------------------------------------------------------------
// *** Index error: x2("(?:雪+)?\?霜", "雪雪雪霜", 0, 12); // Test 897

// -------------------------------------------------------------------------
// x2("(?:あい)?{2}", "", 0, 0); // Test 898
scan_test!(case_898, s898, S898, r#"(?:あい)?{2}"#, "", &[], 898);

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車)?{2}", "鬼車鬼車鬼", 0, 12); // Test 899

// -------------------------------------------------------------------------
// x2("(?:鬼車)*{0}", "鬼車鬼車鬼", 0, 0); // Test 900
scan_test!(
    case_900,
    s900,
    S900,
    r#"(?:鬼車)*{0}"#,
    "鬼車鬼車鬼",
    &[],
    900
);

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車){3,}", "鬼車鬼車鬼車鬼車", 0, 24); // Test 901

// -------------------------------------------------------------------------
// n("(?:鬼車){3,}", "鬼車鬼車"); // Test 902
scan_test!(
    case_902,
    s902,
    S902,
    r#"(?:鬼車){3,}"#,
    "鬼車鬼車",
    &[],
    902
);

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車){2,4}", "鬼車鬼車鬼車", 0, 18); // Test 903

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車){2,4}", "鬼車鬼車鬼車鬼車鬼車", 0, 24); // Test 904

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車){2,4}?", "鬼車鬼車鬼車鬼車鬼車", 0, 12); // Test 905

// -------------------------------------------------------------------------
// *** Index error: x2("(?:鬼車){,}", "鬼車{,}", 0, 9); // Test 906

// -------------------------------------------------------------------------
// *** Index error: x2("(?:かきく)+?{2}", "かきくかきくかきく", 0, 18); // Test 907

// -------------------------------------------------------------------------
// *** Index error: x3("(火)", "火", 0, 3, 1); // Test 908

// -------------------------------------------------------------------------
// *** Index error: x3("(火水)", "火水", 0, 6, 1); // Test 909

// -------------------------------------------------------------------------
// *** Index error: x2("((時間))", "時間", 0, 6); // Test 910

// -------------------------------------------------------------------------
// *** Index error: x3("((風水))", "風水", 0, 6, 1); // Test 911

// -------------------------------------------------------------------------
// *** Index error: x3("((昨日))", "昨日", 0, 6, 2); // Test 912

// -------------------------------------------------------------------------
// *** Index error: x3("((((((((((((((((((((量子))))))))))))))))))))", "量子", 0, 6, 20); // Test 913

// -------------------------------------------------------------------------
// *** Index error: x3("(あい)(うえ)", "あいうえ", 0, 6, 1); // Test 914

// -------------------------------------------------------------------------
// *** Index error:  x3("(あい)(うえ)", "あいうえ", 6, 12, 2); // Test 915

// -------------------------------------------------------------------------
// *** Index error: x3("()(あ)いう(えおか)きくけこ", "あいうえおかきくけこ", 9, 18, 3); // Test 916

// -------------------------------------------------------------------------
// *** Index error: x3("(()(あ)いう(えおか)きくけこ)", "あいうえおかきくけこ", 9, 18, 4); // Test 917

// -------------------------------------------------------------------------
// *** Index error:  x3(".*(フォ)ン・マ(ン()シュタ)イン", "フォン・マンシュタイン", 15, 27, 2); // Test 918

// -------------------------------------------------------------------------
// *** Index error: x2("(^あ)", "あ", 0, 3); // Test 919

// -------------------------------------------------------------------------
// *** Index error:  x3("(あ)|(あ)", "いあ", 3, 6, 1); // Test 920

// -------------------------------------------------------------------------
// *** Index error:  x3("(^あ)|(あ)", "いあ", 3, 6, 2); // Test 921

// -------------------------------------------------------------------------
// x3("(あ?)", "あああ", 0, 3, 1); // Test 922
scan_test!(
    case_922,
    s922,
    S922,
    r#"(あ?)"#,
    "あああ",
    &[], // Oniguruma: ("あ", 0, 3)
    922
);

// -------------------------------------------------------------------------
// *** Index error: x3("(ま*)", "ままま", 0, 9, 1); // Test 923

// -------------------------------------------------------------------------
// x3("(と*)", "", 0, 0, 1); // Test 924
scan_test!(case_924, s924, S924, r#"(と*)"#, "", &[], 924);

// -------------------------------------------------------------------------
// *** Index error: x3("(る+)", "るるるるるるる", 0, 21, 1); // Test 925

// -------------------------------------------------------------------------
// *** Index error: x3("(ふ+|へ*)", "ふふふへへ", 0, 9, 1); // Test 926

// -------------------------------------------------------------------------
// x3("(あ+|い?)", "いいいああ", 0, 3, 1); // Test 927
scan_test!(
    case_927,
    s927,
    S927,
    r#"(あ+|い?)"#,
    "いいいああ",
    &[], // Oniguruma: ("いいい", 0, 3)
    927
);

// -------------------------------------------------------------------------
// *** Index error: x3("(あいう)?", "あいう", 0, 9, 1); // Test 928

// -------------------------------------------------------------------------
// *** Index error: x3("(あいう)*", "あいう", 0, 9, 1); // Test 929

// -------------------------------------------------------------------------
// *** Index error: x3("(あいう)+", "あいう", 0, 9, 1); // Test 930

// -------------------------------------------------------------------------
// *** Index error: x3("(さしす|あいう)+", "あいう", 0, 9, 1); // Test 931

// -------------------------------------------------------------------------
// *** Index error: x3("([なにぬ][かきく]|かきく)+", "かきく", 0, 9, 1); // Test 932

// -------------------------------------------------------------------------
// *** Index error: x3("((?i:あいう))", "あいう", 0, 9, 1); // Test 933

// -------------------------------------------------------------------------
// *** Index error: x3("((?m:あ.う))", "あ\nう", 0, 7, 1); // Test 934

// -------------------------------------------------------------------------
// x3("((?=あん)あ)", "あんい", 0, 3, 1); // Test 935
// look-around, including look-ahead and look-behind, is not supported

// -------------------------------------------------------------------------
// *** Index error: x3("あいう|(.あいえ)", "んあいえ", 0, 12, 1); // Test 936

// -------------------------------------------------------------------------
// *** Index error:  x3("あ*(.)", "ああああん", 12, 15, 1); // Test 937

// -------------------------------------------------------------------------
// x3("あ*?(.)", "ああああん", 0, 3, 1); // Test 938
// Non-greedy repetitions

// -------------------------------------------------------------------------
// *** Index error:  x3("あ*?(ん)", "ああああん", 12, 15, 1); // Test 939

// -------------------------------------------------------------------------
// *** Index error:  x3("[いうえ]あ*(.)", "えああああん", 15, 18, 1); // Test 940

// -------------------------------------------------------------------------
// *** Index error: x3("(\\Aいい)うう", "いいうう", 0, 6, 1); // Test 941

// -------------------------------------------------------------------------
// n("(\\Aいい)うう", "んいいうう"); // Test 942
regex_error!(case_942, "(\\Aいい)うう", r#"StartLine Look(Start)"#, 942);

// -------------------------------------------------------------------------
// *** Index error: x3("(^いい)うう", "いいうう", 0, 6, 1); // Test 943

// -------------------------------------------------------------------------
// n("(^いい)うう", "んいいうう"); // Test 944
regex_error!(case_944, "(^いい)うう", r#"StartLine Look(Start)"#, 944);

// -------------------------------------------------------------------------
// *** Index error:  x3("ろろ(るる$)", "ろろるる", 6, 12, 1); // Test 945

// -------------------------------------------------------------------------
// n("ろろ(るる$)", "ろろるるる"); // Test 946
regex_error!(case_946, "ろろ(るる$)", r#"EndLine Look(End)"#, 946);

// -------------------------------------------------------------------------
// *** Index error: x2("(無)\\1", "無無", 0, 6); // Test 947

// -------------------------------------------------------------------------
// n("(無)\\1", "無武"); // Test 948
regex_error!(
    case_948,
    "(無)\\1",
    r#"backreferences are not supported"#,
    948
);

// -------------------------------------------------------------------------
// *** Index error: x2("(空?)\\1", "空空", 0, 6); // Test 949

// -------------------------------------------------------------------------
// x2("(空?\?)\\1", "空空", 0, 0); // Test 950
// regex_error!(case_950, "(空?\?)\\1", r#"backreferences are not supported"#, 950); unknown character escape: `?`

// -------------------------------------------------------------------------
// *** Index error: x2("(空*)\\1", "空空空空空", 0, 12); // Test 951

// -------------------------------------------------------------------------
// *** Index error: x3("(空*)\\1", "空空空空空", 0, 6, 1); // Test 952

// -------------------------------------------------------------------------
// *** Index error: x2("あ(い*)\\1", "あいいいい", 0, 15); // Test 953

// -------------------------------------------------------------------------
// *** Index error: x2("あ(い*)\\1", "あい", 0, 3); // Test 954

// -------------------------------------------------------------------------
// *** Index error: x2("(あ*)(い*)\\1\\2", "あああいいあああいい", 0, 30); // Test 955

// -------------------------------------------------------------------------
// *** Index error: x2("(あ*)(い*)\\2", "あああいいいい", 0, 21); // Test 956

// -------------------------------------------------------------------------
// *** Index error:  x3("(あ*)(い*)\\2", "あああいいいい", 9, 15, 2); // Test 957

// -------------------------------------------------------------------------
// *** Index error: x2("(((((((ぽ*)ぺ))))))ぴ\\7", "ぽぽぽぺぴぽぽぽ", 0, 24); // Test 958

// -------------------------------------------------------------------------
// *** Index error: x3("(((((((ぽ*)ぺ))))))ぴ\\7", "ぽぽぽぺぴぽぽぽ", 0, 9, 7); // Test 959

// -------------------------------------------------------------------------
// *** Index error: x2("(は)(ひ)(ふ)\\2\\1\\3", "はひふひはふ", 0, 18); // Test 960

// -------------------------------------------------------------------------
// *** Index error: x2("([き-け])\\1", "くく", 0, 6); // Test 961

// -------------------------------------------------------------------------
// *** Index error: x2("(\\w\\d\\s)\\1", "あ5 あ5 ", 0, 10); // Test 962

// -------------------------------------------------------------------------
// n("(\\w\\d\\s)\\1", "あ5 あ5"); // Test 963
regex_error!(
    case_963,
    "(\\w\\d\\s)\\1",
    r#"backreferences are not supported"#,
    963
);

// -------------------------------------------------------------------------
// *** Index error: x2("(誰？|[あ-う]{3})\\1", "誰？誰？", 0, 12); // Test 964

// -------------------------------------------------------------------------
// *** Index error: x2("...(誰？|[あ-う]{3})\\1", "あaあ誰？誰？", 0, 19); // Test 965

// -------------------------------------------------------------------------
// *** Index error: x2("(誰？|[あ-う]{3})\\1", "ういうういう", 0, 18); // Test 966

// -------------------------------------------------------------------------
// *** Index error: x2("(^こ)\\1", "ここ", 0, 6); // Test 967

// -------------------------------------------------------------------------
// n("(^む)\\1", "めむむ"); // Test 968
regex_error!(
    case_968,
    "(^む)\\1",
    r#"backreferences are not supported"#,
    968
);

// -------------------------------------------------------------------------
// n("(あ$)\\1", "ああ"); // Test 969
regex_error!(
    case_969,
    "(あ$)\\1",
    r#"backreferences are not supported"#,
    969
);

// -------------------------------------------------------------------------
// n("(あい\\Z)\\1", "あい"); // Test 970
regex_error!(
    case_970,
    "(あい\\Z)\\1",
    r#"unrecognized escape sequence"#,
    970
);

// -------------------------------------------------------------------------
// *** Index error:  x2("(あ*\\Z)\\1", "あ", 3, 3); // Test 971

// -------------------------------------------------------------------------
// *** Index error:  x2(".(あ*\\Z)\\1", "いあ", 3, 6); // Test 972

// -------------------------------------------------------------------------
// *** Index error: x3("(.(やいゆ)\\2)", "zやいゆやいゆ", 0, 19, 1); // Test 973

// -------------------------------------------------------------------------
// *** Index error: x3("(.(..\\d.)\\2)", "あ12341234", 0, 11, 1); // Test 974

// -------------------------------------------------------------------------
// *** Index error: x2("((?i:あvず))\\1", "あvずあvず", 0, 14); // Test 975

// -------------------------------------------------------------------------
// *** Index error: x2("(?<愚か>変|\\(\\g<愚か>\\))", "((((((変))))))", 0, 15); // Test 976

// -------------------------------------------------------------------------
// *** Index error: x2("\\A(?:\\g<阿_1>|\\g<云_2>|\\z終了  (?<阿_1>観|自\\g<云_2>自)(?<云_2>在|菩薩\\g<阿_1>菩薩))$", "菩薩自菩薩自在自菩薩自菩薩", 0, 39); // Test 977

// -------------------------------------------------------------------------
// *** Index error: x2("[[ひふ]]", "ふ", 0, 3); // Test 978

// -------------------------------------------------------------------------
// *** Index error: x2("[[いおう]か]", "か", 0, 3); // Test 979

// -------------------------------------------------------------------------
// n("[[^あ]]", "あ"); // Test 980
scan_test!(case_980, s980, S980, r#"[[^あ]]"#, "あ", &[], 980);

// -------------------------------------------------------------------------
// n("[^[あ]]", "あ"); // Test 981
scan_test!(case_981, s981, S981, r#"[^[あ]]"#, "あ", &[], 981);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[^あ]]", "あ", 0, 3); // Test 982

// -------------------------------------------------------------------------
// *** Index error: x2("[[かきく]&&きく]", "く", 0, 3); // Test 983

// -------------------------------------------------------------------------
// n("[[かきく]&&きく]", "か"); // Test 984
scan_test!(case_984, s984, S984, r#"[[かきく]&&きく]"#, "か", &[], 984);

// -------------------------------------------------------------------------
// n("[[かきく]&&きく]", "け"); // Test 985
scan_test!(case_985, s985, S985, r#"[[かきく]&&きく]"#, "け", &[], 985);

// -------------------------------------------------------------------------
// *** Index error: x2("[あ-ん&&い-を&&う-ゑ]", "ゑ", 0, 3); // Test 986

// -------------------------------------------------------------------------
// n("[^あ-ん&&い-を&&う-ゑ]", "ゑ"); // Test 987
scan_test!(
    case_987,
    s987,
    S987,
    r#"[^あ-ん&&い-を&&う-ゑ]"#,
    "ゑ",
    &[],
    987
);

// -------------------------------------------------------------------------
// *** Index error: x2("[[^あ&&あ]&&あ-ん]", "い", 0, 3); // Test 988

// -------------------------------------------------------------------------
// n("[[^あ&&あ]&&あ-ん]", "あ"); // Test 989
scan_test!(
    case_989,
    s989,
    S989,
    r#"[[^あ&&あ]&&あ-ん]"#,
    "あ",
    &[],
    989
);

// -------------------------------------------------------------------------
// *** Index error: x2("[[^あ-ん&&いうえお]&&[^う-か]]", "き", 0, 3); // Test 990

// -------------------------------------------------------------------------
// n("[[^あ-ん&&いうえお]&&[^う-か]]", "い"); // Test 991
scan_test!(
    case_991,
    s991,
    S991,
    r#"[[^あ-ん&&いうえお]&&[^う-か]]"#,
    "い",
    &[],
    991
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[^あいう]&&[^うえお]]", "う", 0, 3); // Test 992

// -------------------------------------------------------------------------
// *** Index error: x2("[^[^あいう]&&[^うえお]]", "え", 0, 3); // Test 993

// -------------------------------------------------------------------------
// n("[^[^あいう]&&[^うえお]]", "か"); // Test 994
scan_test!(
    case_994,
    s994,
    S994,
    r#"[^[^あいう]&&[^うえお]]"#,
    "か",
    &[],
    994
);

// -------------------------------------------------------------------------
// x2("[あ-&&-あ]", "-", 0, 1); // Test 995
regex_error!(
    case_995,
    "[あ-&&-あ]",
    r#"invalid character class range"#,
    995
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[^a-zあいう]&&[^bcdefgうえお]q-w]", "え", 0, 3); // Test 996

// -------------------------------------------------------------------------
// x2("[^[^a-zあいう]&&[^bcdefgうえお]g-w]", "f", 0, 1); // Test 997
scan_test!(
    case_997,
    s997,
    S997,
    r#"[^[^a-zあいう]&&[^bcdefgうえお]g-w]"#,
    "f",
    &[("f", 0, 1)],
    997
);

// -------------------------------------------------------------------------
// x2("[^[^a-zあいう]&&[^bcdefgうえお]g-w]", "g", 0, 1); // Test 998
scan_test!(
    case_998,
    s998,
    S998,
    r#"[^[^a-zあいう]&&[^bcdefgうえお]g-w]"#,
    "g",
    &[("g", 0, 1)],
    998
);

// -------------------------------------------------------------------------
// n("[^[^a-zあいう]&&[^bcdefgうえお]g-w]", "2"); // Test 999
scan_test!(
    case_999,
    s999,
    S999,
    r#"[^[^a-zあいう]&&[^bcdefgうえお]g-w]"#,
    "2",
    &[],
    999
);

// -------------------------------------------------------------------------
// *** Index error: x2("a<b>バージョンのダウンロード<\\/b>", "a<b>バージョンのダウンロード</b>", 0, 44); // Test 1000

// -------------------------------------------------------------------------
// *** Index error: x2(".<b>バージョンのダウンロード<\\/b>", "a<b>バージョンのダウンロード</b>", 0, 44); // Test 1001

// -------------------------------------------------------------------------
// *** Index error:  x2("\\n?\\z", "こんにちは", 15, 15); // Test 1002

// -------------------------------------------------------------------------
// *** Index error: x2("(?m).*", "青赤黄", 0, 9); // Test 1003

// -------------------------------------------------------------------------
// *** Index error: x2("(?m).*a", "青赤黄a", 0, 10); // Test 1004

// -------------------------------------------------------------------------
// *** Index error: x2("\\p{Hiragana}", "ぴ", 0, 3); // Test 1005

// -------------------------------------------------------------------------
// n("\\P{Hiragana}", "ぴ"); // Test 1006
scan_test!(case_1006, s1006, S1006, r#"\P{Hiragana}"#, "ぴ", &[], 1006);

// -------------------------------------------------------------------------
// x2("\\p{Emoji}", "\xE2\xAD\x90", 0, 3); // Test 1007
scanner! { S1007 { mode M { token r#"\p{Emoji}"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\p{^Emoji}", "\xEF\xBC\x93", 0, 3); // Test 1008
regex_error!(
    case_1008,
    "\\p{^Emoji}",
    r#"Unicode property not found"#,
    1008
);

// -------------------------------------------------------------------------
// x2("\\p{Extended_Pictographic}", "\xE2\x9A\xA1", 0, 3); // Test 1009
scanner! { S1009 { mode M { token r#"\p{Extended_Pictographic}"# => 0; } } }

// -------------------------------------------------------------------------
// n("\\p{Extended_Pictographic}", "\xE3\x81\x82"); // Test 1010
scanner! { S1010 { mode M { token r#"\p{Extended_Pictographic}"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\pC", "\xC2\xAD", 0, 2); // U+00AD: Soft Hyphen // Test 1011
scanner! { S1011 { mode M { token r#"\pC"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\pL", "U", 0, 1); // Test 1012
scan_test!(case_1012, s1012, S1012, r#"\pL"#, "U", &[("U", 0, 1)], 1012);

// -------------------------------------------------------------------------
// x2("\\pM", "\xE2\x83\x9D", 0, 3); // U+20DD: Combining Enclosing Circle // Test 1013
scanner! { S1013 { mode M { token r#"\pM"# => 0; } } }

// -------------------------------------------------------------------------
// *** Index error: x2("\\pN+", "3Ⅴ", 0, 4); // Test 1014

// -------------------------------------------------------------------------
// *** Index error: x2("\\pP+", "†⁂", 0, 6); // Test 1015

// -------------------------------------------------------------------------
// *** Index error: x2("\\pS+", "€₤", 0, 6); // Test 1016

// -------------------------------------------------------------------------
// x2("\\pZ+", " ", 0, 1); // Test 1017
scan_test!(
    case_1017,
    s1017,
    S1017,
    r#"\pZ+"#,
    " ",
    &[(" ", 0, 1)],
    1017
);

// -------------------------------------------------------------------------
// n("\\pL", "@"); // Test 1018
scan_test!(case_1018, s1018, S1018, r#"\pL"#, "@", &[], 1018);

// -------------------------------------------------------------------------
// x2("\\pL+", "akZtE", 0, 5); // Test 1019
scan_test!(
    case_1019,
    s1019,
    S1019,
    r#"\pL+"#,
    "akZtE",
    &[("akZtE", 0, 5)],
    1019
);

// -------------------------------------------------------------------------
// x2("\\PL+", "1@=-%", 0, 5); // Test 1020
scan_test!(
    case_1020,
    s1020,
    S1020,
    r#"\PL+"#,
    "1@=-%",
    &[("1@=-%", 0, 5)],
    1020
);

// -------------------------------------------------------------------------
// e("\\p", "", ONIGERR_INVALID_CHAR_PROPERTY_NAME); // Test 1021

// -------------------------------------------------------------------------
// e("\\p(", "", ONIGERR_INVALID_CHAR_PROPERTY_NAME); // Test 1022

// -------------------------------------------------------------------------
// e("\\pQ", "", ONIGERR_INVALID_CHAR_PROPERTY_NAME); // Test 1023

// -------------------------------------------------------------------------
// x2("[\\pL]", "s", 0, 1); // Test 1024
scan_test!(
    case_1024,
    s1024,
    S1024,
    r#"[\pL]"#,
    "s",
    &[("s", 0, 1)],
    1024
);

// -------------------------------------------------------------------------
// n("[^\\pL]", "s"); // Test 1025
scan_test!(case_1025, s1025, S1025, r#"[^\pL]"#, "s", &[], 1025);

// -------------------------------------------------------------------------
// x2("[\\PL]+", "-3@", 0, 3); // Test 1026
scan_test!(
    case_1026,
    s1026,
    S1026,
    r#"[\PL]+"#,
    "-3@",
    &[("-3@", 0, 3)],
    1026
);

// -------------------------------------------------------------------------
// e("[\\p]", "", ONIGERR_INVALID_CHAR_PROPERTY_NAME); // Test 1027

// -------------------------------------------------------------------------
// e("[\\pU]", "", ONIGERR_INVALID_CHAR_PROPERTY_NAME); // Test 1028

// -------------------------------------------------------------------------
// *** Index error: x2("\\p{Word}", "こ", 0, 3); // Test 1029

// -------------------------------------------------------------------------
// n("\\p{^Word}", "こ"); // Test 1030
regex_error!(
    case_1030,
    "\\p{^Word}",
    r#"Unicode property not found"#,
    1030
);

// -------------------------------------------------------------------------
// *** Index error: x2("[\\p{Word}]", "こ", 0, 3); // Test 1031

// -------------------------------------------------------------------------
// n("[\\p{^Word}]", "こ"); // Test 1032
regex_error!(
    case_1032,
    "[\\p{^Word}]",
    r#"Unicode property not found"#,
    1032
);

// -------------------------------------------------------------------------
// n("[^\\p{Word}]", "こ"); // Test 1033
regex_error!(
    case_1033,
    "[^\\p{Word}]",
    r#"Unicode property not found"#,
    1033
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\p{^Word}]", "こ", 0, 3); // Test 1034

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\p{^Word}&&\\p{ASCII}]", "こ", 0, 3); // Test 1035

// -------------------------------------------------------------------------
// x2("[^\\p{^Word}&&\\p{ASCII}]", "a", 0, 1); // Test 1036
regex_error!(
    case_1036,
    "[^\\p{^Word}&&\\p{ASCII}]",
    r#"Unicode property not found"#,
    1036
);

// -------------------------------------------------------------------------
// n("[^\\p{^Word}&&\\p{ASCII}]", "#"); // Test 1037
regex_error!(
    case_1037,
    "[^\\p{^Word}&&\\p{ASCII}]",
    r#"Unicode property not found"#,
    1037
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{^Word}]&&[\\p{ASCII}]]", "こ", 0, 3); // Test 1038

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{ASCII}]&&[^\\p{Word}]]", "こ", 0, 3); // Test 1039

// -------------------------------------------------------------------------
// n("[[\\p{ASCII}]&&[^\\p{Word}]]", "こ"); // Test 1040
regex_error!(
    case_1040,
    "[[\\p{ASCII}]&&[^\\p{Word}]]",
    r#"Unicode property not found"#,
    1040
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{^Word}]&&[^\\p{ASCII}]]", "こ", 0, 3); // Test 1041

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\x{104a}]", "こ", 0, 3); // Test 1042

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\p{^Word}&&[^\\x{104a}]]", "こ", 0, 3); // Test 1043

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{^Word}]&&[^\\x{104a}]]", "こ", 0, 3); // Test 1044

// -------------------------------------------------------------------------
// n("[^\\p{Word}||[^\\x{104a}]]", "こ"); // Test 1045
regex_error!(
    case_1045,
    "[^\\p{Word}||[^\\x{104a}]]",
    r#"Unicode property not found"#,
    1045
);

// -------------------------------------------------------------------------
// *** Index error: x2("\\p{^Cntrl}", "こ", 0, 3); // Test 1046

// -------------------------------------------------------------------------
// n("\\p{Cntrl}", "こ"); // Test 1047
scan_test!(case_1047, s1047, S1047, r#"\p{Cntrl}"#, "こ", &[], 1047);

// -------------------------------------------------------------------------
// *** Index error: x2("[\\p{^Cntrl}]", "こ", 0, 3); // Test 1048

// -------------------------------------------------------------------------
// n("[\\p{Cntrl}]", "こ"); // Test 1049
scan_test!(case_1049, s1049, S1049, r#"[\p{Cntrl}]"#, "こ", &[], 1049);

// -------------------------------------------------------------------------
// n("[^\\p{^Cntrl}]", "こ"); // Test 1050
regex_error!(
    case_1050,
    "[^\\p{^Cntrl}]",
    r#"Unicode property not found"#,
    1050
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\p{Cntrl}]", "こ", 0, 3); // Test 1051

// -------------------------------------------------------------------------
// *** Index error: x2("[^\\p{Cntrl}&&\\p{ASCII}]", "こ", 0, 3); // Test 1052

// -------------------------------------------------------------------------
// x2("[^\\p{Cntrl}&&\\p{ASCII}]", "a", 0, 1); // Test 1053
scan_test!(
    case_1053,
    s1053,
    S1053,
    r#"[^\p{Cntrl}&&\p{ASCII}]"#,
    "a",
    &[("a", 0, 1)],
    1053
);

// -------------------------------------------------------------------------
// n("[^\\p{^Cntrl}&&\\p{ASCII}]", "#"); // Test 1054
regex_error!(
    case_1054,
    "[^\\p{^Cntrl}&&\\p{ASCII}]",
    r#"Unicode property not found"#,
    1054
);

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{^Cntrl}]&&[\\p{ASCII}]]", "こ", 0, 3); // Test 1055

// -------------------------------------------------------------------------
// *** Index error: x2("[^[\\p{ASCII}]&&[^\\p{Cntrl}]]", "こ", 0, 3); // Test 1056

// -------------------------------------------------------------------------
// n("[[\\p{ASCII}]&&[^\\p{Cntrl}]]", "こ"); // Test 1057
scan_test!(
    case_1057,
    s1057,
    S1057,
    r#"[[\p{ASCII}]&&[^\p{Cntrl}]]"#,
    "こ",
    &[],
    1057
);

// -------------------------------------------------------------------------
// n("[^[\\p{^Cntrl}]&&[^\\p{ASCII}]]", "こ"); // Test 1058
regex_error!(
    case_1058,
    "[^[\\p{^Cntrl}]&&[^\\p{ASCII}]]",
    r#"Unicode property not found"#,
    1058
);

// -------------------------------------------------------------------------
// n("[^\\p{^Cntrl}&&[^\\x{104a}]]", "こ"); // Test 1059
regex_error!(
    case_1059,
    "[^\\p{^Cntrl}&&[^\\x{104a}]]",
    r#"Unicode property not found"#,
    1059
);

// -------------------------------------------------------------------------
// n("[^[\\p{^Cntrl}]&&[^\\x{104a}]]", "こ"); // Test 1060
regex_error!(
    case_1060,
    "[^[\\p{^Cntrl}]&&[^\\x{104a}]]",
    r#"Unicode property not found"#,
    1060
);

// -------------------------------------------------------------------------
// n("[^\\p{Cntrl}||[^\\x{104a}]]", "こ"); // Test 1061
scan_test!(
    case_1061,
    s1061,
    S1061,
    r#"[^\p{Cntrl}||[^\x{104a}]]"#,
    "こ",
    &[],
    1061
);

// -------------------------------------------------------------------------
// *** Index error: x2("(?-W:\\p{Word})", "こ", 0, 3); // Test 1062

// -------------------------------------------------------------------------
// n("(?W:\\p{Word})", "こ"); // Test 1063
regex_error!(case_1063, "(?W:\\p{Word})", r#"unrecognized flag"#, 1063);

// -------------------------------------------------------------------------
// x2("(?W:\\p{Word})", "k", 0, 1); // Test 1064
regex_error!(case_1064, "(?W:\\p{Word})", r#"unrecognized flag"#, 1064);

// -------------------------------------------------------------------------
// *** Index error: x2("(?-W:[[:word:]])", "こ", 0, 3); // Test 1065

// -------------------------------------------------------------------------
// n("(?W:[[:word:]])", "こ"); // Test 1066
regex_error!(case_1066, "(?W:[[:word:]])", r#"unrecognized flag"#, 1066);

// -------------------------------------------------------------------------
// *** Index error: x2("(?-D:\\p{Digit})", "３", 0, 3); // Test 1067

// -------------------------------------------------------------------------
// n("(?D:\\p{Digit})", "３"); // Test 1068
regex_error!(case_1068, "(?D:\\p{Digit})", r#"unrecognized flag"#, 1068);

// -------------------------------------------------------------------------
// x2("(?-S:\\p{Space})", "\xc2\x85", 0, 2); // Test 1069
regex_error!(case_1069, "(?-S:\\p{Space})", r#"unrecognized flag"#, 1069);

// -------------------------------------------------------------------------
// n("(?S:\\p{Space})", "\xc2\x85"); // Test 1070
regex_error!(case_1070, "(?S:\\p{Space})", r#"unrecognized flag"#, 1070);

// -------------------------------------------------------------------------
// *** Index error: x2("(?-P:\\p{Word})", "こ", 0, 3); // Test 1071

// -------------------------------------------------------------------------
// n("(?P:\\p{Word})", "こ"); // Test 1072
regex_error!(case_1072, "(?P:\\p{Word})", r#"unrecognized flag"#, 1072);

// -------------------------------------------------------------------------
// *** Index error: x2("(?-W:\\w)", "こ", 0, 3); // Test 1073

// -------------------------------------------------------------------------
// n("(?W:\\w)", "こ"); // Test 1074
regex_error!(case_1074, "(?W:\\w)", r#"unrecognized flag"#, 1074);

// -------------------------------------------------------------------------
// x2("(?-W:\\w)", "k", 0, 1); // Test 1075
regex_error!(case_1075, "(?-W:\\w)", r#"unrecognized flag"#, 1075);

// -------------------------------------------------------------------------
// x2("(?W:\\w)", "k", 0, 1); // Test 1076
regex_error!(case_1076, "(?W:\\w)", r#"unrecognized flag"#, 1076);

// -------------------------------------------------------------------------
// n("(?-W:\\W)", "こ"); // Test 1077
regex_error!(case_1077, "(?-W:\\W)", r#"unrecognized flag"#, 1077);

// -------------------------------------------------------------------------
// *** Index error: x2("(?W:\\W)", "こ", 0, 3); // Test 1078

// -------------------------------------------------------------------------
// n("(?-W:\\W)", "k"); // Test 1079
regex_error!(case_1079, "(?-W:\\W)", r#"unrecognized flag"#, 1079);

// -------------------------------------------------------------------------
// n("(?W:\\W)", "k"); // Test 1080
regex_error!(case_1080, "(?W:\\W)", r#"unrecognized flag"#, 1080);

// -------------------------------------------------------------------------
// x2("(?-W:\\b)", "こ", 0, 0); // Test 1081
regex_error!(case_1081, "(?-W:\\b)", r#"unrecognized flag"#, 1081);

// -------------------------------------------------------------------------
// n("(?W:\\b)", "こ"); // Test 1082
regex_error!(case_1082, "(?W:\\b)", r#"unrecognized flag"#, 1082);

// -------------------------------------------------------------------------
// x2("(?-W:\\b)", "h", 0, 0); // Test 1083
regex_error!(case_1083, "(?-W:\\b)", r#"unrecognized flag"#, 1083);

// -------------------------------------------------------------------------
// x2("(?W:\\b)", "h", 0, 0); // Test 1084
regex_error!(case_1084, "(?W:\\b)", r#"unrecognized flag"#, 1084);

// -------------------------------------------------------------------------
// n("(?-W:\\B)", "こ"); // Test 1085
regex_error!(case_1085, "(?-W:\\B)", r#"unrecognized flag"#, 1085);

// -------------------------------------------------------------------------
// x2("(?W:\\B)", "こ", 0, 0); // Test 1086
regex_error!(case_1086, "(?W:\\B)", r#"unrecognized flag"#, 1086);

// -------------------------------------------------------------------------
// n("(?-W:\\B)", "h"); // Test 1087
regex_error!(case_1087, "(?-W:\\B)", r#"unrecognized flag"#, 1087);

// -------------------------------------------------------------------------
// n("(?W:\\B)", "h"); // Test 1088
regex_error!(case_1088, "(?W:\\B)", r#"unrecognized flag"#, 1088);

// -------------------------------------------------------------------------
// x2("(?-P:\\b)", "こ", 0, 0); // Test 1089
regex_error!(case_1089, "(?-P:\\b)", r#"unrecognized flag"#, 1089);

// -------------------------------------------------------------------------
// n("(?P:\\b)", "こ"); // Test 1090
regex_error!(case_1090, "(?P:\\b)", r#"unrecognized flag"#, 1090);

// -------------------------------------------------------------------------
// x2("(?-P:\\b)", "h", 0, 0); // Test 1091
regex_error!(case_1091, "(?-P:\\b)", r#"unrecognized flag"#, 1091);

// -------------------------------------------------------------------------
// x2("(?P:\\b)", "h", 0, 0); // Test 1092
regex_error!(case_1092, "(?P:\\b)", r#"unrecognized flag"#, 1092);

// -------------------------------------------------------------------------
// n("(?-P:\\B)", "こ"); // Test 1093
regex_error!(case_1093, "(?-P:\\B)", r#"unrecognized flag"#, 1093);

// -------------------------------------------------------------------------
// x2("(?P:\\B)", "こ", 0, 0); // Test 1094
regex_error!(case_1094, "(?P:\\B)", r#"unrecognized flag"#, 1094);

// -------------------------------------------------------------------------
// n("(?-P:\\B)", "h"); // Test 1095
regex_error!(case_1095, "(?-P:\\B)", r#"unrecognized flag"#, 1095);

// -------------------------------------------------------------------------
// n("(?P:\\B)", "h"); // Test 1096
regex_error!(case_1096, "(?P:\\B)", r#"unrecognized flag"#, 1096);

// -------------------------------------------------------------------------
// x2("\\p{InBasicLatin}", "\x41", 0, 1); // Test 1097
regex_error!(
    case_1097,
    "\\p{InBasicLatin}",
    r#"Unicode property not found"#,
    1097
);

// -------------------------------------------------------------------------
// n(".\\y\\O", "\x0d\x0a"); // Test 1098
regex_error!(
    case_1098,
    ".\\y\\O",
    r#"unrecognized escape sequence"#,
    1098
);

// -------------------------------------------------------------------------
// x2(".\\Y\\O", "\x0d\x0a", 0, 2); // Test 1099
regex_error!(
    case_1099,
    ".\\Y\\O",
    r#"unrecognized escape sequence"#,
    1099
);

// -------------------------------------------------------------------------
// n("^.\\y.$", "\x67\xCC\x88"); // Test 1100
regex_error!(
    case_1100,
    "^.\\y.$",
    r#"unrecognized escape sequence"#,
    1100
);

// -------------------------------------------------------------------------
// x2(".\\Y.", "\x67\xCC\x88", 0, 3); // Test 1101
regex_error!(case_1101, ".\\Y.", r#"unrecognized escape sequence"#, 1101);

// -------------------------------------------------------------------------
// x2("\\y.\\Y.\\y", "\x67\xCC\x88", 0, 3); // Test 1102
regex_error!(
    case_1102,
    "\\y.\\Y.\\y",
    r#"unrecognized escape sequence"#,
    1102
);

// -------------------------------------------------------------------------
// x2("\\y.\\y", "\xEA\xB0\x81", 0, 3); // Test 1103
regex_error!(
    case_1103,
    "\\y.\\y",
    r#"unrecognized escape sequence"#,
    1103
);

// -------------------------------------------------------------------------
// x2("^.\\Y.\\Y.$", "\xE1\x84\x80\xE1\x85\xA1\xE1\x86\xA8", 0, 9); // Test 1104
regex_error!(
    case_1104,
    "^.\\Y.\\Y.$",
    r#"unrecognized escape sequence"#,
    1104
);

// -------------------------------------------------------------------------
// n("^.\\y.\\Y.$", "\xE1\x84\x80\xE1\x85\xA1\xE1\x86\xA8"); // Test 1105
regex_error!(
    case_1105,
    "^.\\y.\\Y.$",
    r#"unrecognized escape sequence"#,
    1105
);

// -------------------------------------------------------------------------
// x2(".\\Y.", "\xE0\xAE\xA8\xE0\xAE\xBF", 0, 6); // Test 1106
regex_error!(case_1106, ".\\Y.", r#"unrecognized escape sequence"#, 1106);

// -------------------------------------------------------------------------
// n(".\\y.", "\xE0\xAE\xA8\xE0\xAE\xBF"); // Test 1107
regex_error!(case_1107, ".\\y.", r#"unrecognized escape sequence"#, 1107);

// -------------------------------------------------------------------------
// x2(".\\Y.", "\xE0\xB8\x81\xE0\xB8\xB3", 0, 6); // Test 1108
regex_error!(case_1108, ".\\Y.", r#"unrecognized escape sequence"#, 1108);

// -------------------------------------------------------------------------
// n(".\\y.", "\xE0\xB8\x81\xE0\xB8\xB3"); // Test 1109
regex_error!(case_1109, ".\\y.", r#"unrecognized escape sequence"#, 1109);

// -------------------------------------------------------------------------
// x2(".\\Y.", "\xE0\xA4\xB7\xE0\xA4\xBF", 0, 6); // Test 1110
regex_error!(case_1110, ".\\Y.", r#"unrecognized escape sequence"#, 1110);

// -------------------------------------------------------------------------
// n(".\\y.", "\xE0\xA4\xB7\xE0\xA4\xBF"); // Test 1111
regex_error!(case_1111, ".\\y.", r#"unrecognized escape sequence"#, 1111);

// -------------------------------------------------------------------------
// x2("..\\Y.", "\xE3\x80\xB0\xE2\x80\x8D\xE2\xAD\x95", 0, 9); // Test 1112
regex_error!(case_1112, "..\\Y.", r#"unrecognized escape sequence"#, 1112);

// -------------------------------------------------------------------------
// x2("...\\Y.", "\xE3\x80\xB0\xCC\x82\xE2\x80\x8D\xE2\xAD\x95", 0, 11); // Test 1113
regex_error!(
    case_1113,
    "...\\Y.",
    r#"unrecognized escape sequence"#,
    1113
);

// -------------------------------------------------------------------------
// n("...\\Y.", "\xE3\x80\xB0\xCD\xB0\xE2\x80\x8D\xE2\xAD\x95"); // Test 1114
regex_error!(
    case_1114,
    "...\\Y.",
    r#"unrecognized escape sequence"#,
    1114
);

// -------------------------------------------------------------------------
// n("^\\X\\X$", "\x0d\x0a"); // Test 1115
regex_error!(
    case_1115,
    "^\\X\\X$",
    r#"unrecognized escape sequence"#,
    1115
);

// -------------------------------------------------------------------------
// x2("^\\X$", "\x0d\x0a", 0, 2); // Test 1116
regex_error!(case_1116, "^\\X$", r#"unrecognized escape sequence"#, 1116);

// -------------------------------------------------------------------------
// n("^\\X\\X.$", "\x67\xCC\x88"); // Test 1117
regex_error!(
    case_1117,
    "^\\X\\X.$",
    r#"unrecognized escape sequence"#,
    1117
);

// -------------------------------------------------------------------------
// x2("^\\X$", "\x67\xCC\x88", 0, 3); // Test 1118
regex_error!(case_1118, "^\\X$", r#"unrecognized escape sequence"#, 1118);

// -------------------------------------------------------------------------
// x2("^\\X$", "\xE1\x84\x80\xE1\x85\xA1\xE1\x86\xA8", 0, 9); // Test 1119
regex_error!(case_1119, "^\\X$", r#"unrecognized escape sequence"#, 1119);

// -------------------------------------------------------------------------
// n("^\\X\\X\\X$", "\xE1\x84\x80\xE1\x85\xA1\xE1\x86\xA8"); // Test 1120
regex_error!(
    case_1120,
    "^\\X\\X\\X$",
    r#"unrecognized escape sequence"#,
    1120
);

// -------------------------------------------------------------------------
// x2("^\\X$", "\xE0\xAE\xA8\xE0\xAE\xBF", 0, 6); // Test 1121
regex_error!(case_1121, "^\\X$", r#"unrecognized escape sequence"#, 1121);

// -------------------------------------------------------------------------
// n("\\X\\X", "\xE0\xAE\xA8\xE0\xAE\xBF"); // Test 1122
regex_error!(case_1122, "\\X\\X", r#"unrecognized escape sequence"#, 1122);

// -------------------------------------------------------------------------
// x2("^\\X$", "\xE0\xB8\x81\xE0\xB8\xB3", 0, 6); // Test 1123
regex_error!(case_1123, "^\\X$", r#"unrecognized escape sequence"#, 1123);

// -------------------------------------------------------------------------
// n("\\X\\X", "\xE0\xB8\x81\xE0\xB8\xB3"); // Test 1124
regex_error!(case_1124, "\\X\\X", r#"unrecognized escape sequence"#, 1124);

// -------------------------------------------------------------------------
// x2("^\\X$", "\xE0\xA4\xB7\xE0\xA4\xBF", 0, 6); // Test 1125
regex_error!(case_1125, "^\\X$", r#"unrecognized escape sequence"#, 1125);

// -------------------------------------------------------------------------
// n("\\X\\X", "\xE0\xA4\xB7\xE0\xA4\xBF"); // Test 1126
regex_error!(case_1126, "\\X\\X", r#"unrecognized escape sequence"#, 1126);

// -------------------------------------------------------------------------
// n("^\\X.$", "\xE0\xAE\xA8\xE0\xAE\xBF"); // Test 1127
regex_error!(case_1127, "^\\X.$", r#"unrecognized escape sequence"#, 1127);

// -------------------------------------------------------------------------
// x2("h\\Xllo", "ha\xCC\x80llo", 0, 7); // Test 1128
regex_error!(
    case_1128,
    "h\\Xllo",
    r#"unrecognized escape sequence"#,
    1128
);

// -------------------------------------------------------------------------
// x2("(?y{g})\\yabc\\y", "abc", 0, 3); // Test 1129
regex_error!(case_1129, "(?y{g})\\yabc\\y", r#"unrecognized flag"#, 1129);

// -------------------------------------------------------------------------
// x2("(?y{g})\\y\\X\\y", "abc", 0, 1); // Test 1130
regex_error!(case_1130, "(?y{g})\\y\\X\\y", r#"unrecognized flag"#, 1130);

// -------------------------------------------------------------------------
// x2("(?y{w})\\yabc\\y", "abc", 0, 3); // WB1, WB2 // Test 1131
regex_error!(case_1131, "(?y{w})\\yabc\\y", r#"unrecognized flag"#, 1131);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "\r\n", 0, 2); // WB3 // Test 1132
regex_error!(case_1132, "(?y{w})\\X", r#"unrecognized flag"#, 1132);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "\x0cz", 0, 1); // WB3a // Test 1133
regex_error!(case_1133, "(?y{w})\\X", r#"unrecognized flag"#, 1133);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "q\x0c", 0, 1); // WB3b // Test 1134
regex_error!(case_1134, "(?y{w})\\X", r#"unrecognized flag"#, 1134);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "\xE2\x80\x8D\xE2\x9D\x87", 0, 6); // WB3c // Test 1135
regex_error!(case_1135, "(?y{w})\\X", r#"unrecognized flag"#, 1135);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "\x20\x20", 0, 2); // WB3d // Test 1136
regex_error!(case_1136, "(?y{w})\\X", r#"unrecognized flag"#, 1136);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "a\xE2\x80\x8D", 0, 4); // WB4 // Test 1137
regex_error!(case_1137, "(?y{w})\\X", r#"unrecognized flag"#, 1137);

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "abc", 0, 3); // WB5 // Test 1138
regex_error!(case_1138, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1138);

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "v\xCE\x87w", 0, 4); // WB6, WB7 // Test 1139
regex_error!(case_1139, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1139);

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "\xD7\x93\x27", 0, 3); // WB7a // Test 1140
regex_error!(case_1140, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1140);

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "\xD7\x93\x22\xD7\x93", 0, 5); // WB7b, WB7c // Test 1141
regex_error!(case_1141, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1141);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "14 45", 0, 2); // WB8 // Test 1142
regex_error!(case_1142, "(?y{w})\\X", r#"unrecognized flag"#, 1142);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "a14", 0, 3); // WB9 // Test 1143
regex_error!(case_1143, "(?y{w})\\X", r#"unrecognized flag"#, 1143);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "832e", 0, 4); // WB10 // Test 1144
regex_error!(case_1144, "(?y{w})\\X", r#"unrecognized flag"#, 1144);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "8\xEF\xBC\x8C\xDB\xB0", 0, 6); // WB11, WB12 // Test 1145
regex_error!(case_1145, "(?y{w})\\X", r#"unrecognized flag"#, 1145);

// -------------------------------------------------------------------------
// *** Index error: x2("(?y{w})\\y\\X\\y", "ケン", 0, 6); // WB13 // Test 1146

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "ケン\xE2\x80\xAFタ", 0, 12); // WB13a, WB13b // Test 1147
regex_error!(case_1147, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1147);

// -------------------------------------------------------------------------
// x2("(?y{w})\\y\\X\\y", "\x21\x23", 0, 1); // WB999 // Test 1148
regex_error!(case_1148, "(?y{w})\\y\\X\\y", r#"unrecognized flag"#, 1148);

// -------------------------------------------------------------------------
// *** Index error: x2("(?y{w})\\y\\X\\y", "山ア", 0, 3); // Test 1149

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "3.14", 0, 4); // Test 1150
regex_error!(case_1150, "(?y{w})\\X", r#"unrecognized flag"#, 1150);

// -------------------------------------------------------------------------
// x2("(?y{w})\\X", "3 14", 0, 1); // Test 1151
regex_error!(case_1151, "(?y{w})\\X", r#"unrecognized flag"#, 1151);

// -------------------------------------------------------------------------
// x2("\\x40", "@", 0, 1); // Test 1152
scan_test!(
    case_1152,
    s1152,
    S1152,
    r#"\x40"#,
    "@",
    &[("@", 0, 1)],
    1152
);

// -------------------------------------------------------------------------
// x2("\\x1", "\x01", 0, 1); // Test 1153
regex_error!(
    case_1153,
    "\\x1",
    r#"incomplete escape sequence, reached end of pattern prematurely"#,
    1153
);

// -------------------------------------------------------------------------
// x2("\\x{1}", "\x01", 0, 1); // Test 1154
scan_test!(
    case_1154,
    s1154,
    S1154,
    r#"\x{1}"#,
    "\x01",
    &[("\x01", 0, 1)],
    1154
);

// -------------------------------------------------------------------------
// x2("\\x{4E38}", "\xE4\xB8\xB8", 0, 3); // Test 1155
scanner! { S1155 { mode M { token r#"\x{4E38}"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\u4E38", "\xE4\xB8\xB8", 0, 3); // Test 1156
scanner! { S1156 { mode M { token r#"\u4E38"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\u0040", "@", 0, 1); // Test 1157
scan_test!(
    case_1157,
    s1157,
    S1157,
    r#"\u0040"#,
    "@",
    &[("@", 0, 1)],
    1157
);

// -------------------------------------------------------------------------
// e("\\xF4", "", ONIGERR_TOO_SHORT_MULTI_BYTE_STRING); // Test 1158

// -------------------------------------------------------------------------
// e("\\xF5", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1159

// -------------------------------------------------------------------------
// e("\\xFF", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1160

// -------------------------------------------------------------------------
// e("[\\xF4]", "", ONIGERR_TOO_SHORT_MULTI_BYTE_STRING); // Test 1161

// -------------------------------------------------------------------------
// e("[\\xF5]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1162

// -------------------------------------------------------------------------
// e("[\\x00-\\xFF]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1163

// -------------------------------------------------------------------------
// x2("c.*\\b", "abc", 2, 3); // Test 1164
regex_error!(
    case_1164,
    "c.*\\b",
    r#"WordUnicode Look(WordUnicode)"#,
    1164
);

// -------------------------------------------------------------------------
// x2("\\b.*abc.*\\b", "abc", 0, 3); // Test 1165
regex_error!(
    case_1165,
    "\\b.*abc.*\\b",
    r#"WordUnicode Look(WordUnicode)"#,
    1165
);

// -------------------------------------------------------------------------
// x2("((?()0+)+++(((0\\g<0>)0)|())++++((?(1)(0\\g<0>))++++++0*())++++((?(1)(0\\g<1>)+)++++++++++*())++++((?(1)((0)\\g<0>)+)++())+0++*+++(((0\\g<0>))*())++++((?(1)(0\\g<0>)+)++++++++++*|)++++*+++((?(1)((0)\\g<0>)+)+++++++++())++*|)++++((?()0))|", "abcde", 0, 0); // #139 // Test 1166
regex_error!(
    case_1166,
    "((?()0+)+++(((0\\g<0>)0)|())++++((?(1)(0\\g<0>))++++++0*())++++((?(1)(0\\g<1>)+)++++++++++*())++++((?(1)((0)\\g<0>)+)++())+0++*+++(((0\\g<0>))*())++++((?(1)(0\\g<0>)+)++++++++++*|)++++*+++((?(1)((0)\\g<0>)+)+++++++++())++*|)++++((?()0))|",
    r#"unrecognized flag"#,
    1166
);

// -------------------------------------------------------------------------
// n("(*FAIL)", "abcdefg"); // Test 1167
regex_error!(
    case_1167,
    "(*FAIL)",
    r#"repetition operator missing expression"#,
    1167
);

// -------------------------------------------------------------------------
// n("abcd(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)", "abcdefg"); // Test 1168
regex_error!(
    case_1168,
    "abcd(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)(*FAIL)",
    r#"repetition operator missing expression"#,
    1168
);

// -------------------------------------------------------------------------
// x2("(?:[ab]|(*MAX{2}).)*", "abcbaaccaaa", 0, 7); // Test 1169
regex_error!(
    case_1169,
    "(?:[ab]|(*MAX{2}).)*",
    r#"repetition operator missing expression"#,
    1169
);

// x2("(?:(*COUNT[AB]{X})[ab]|(*COUNT[CD]{X})[cd])*(*CMP{AB,<,CD})",
// -------------------------------------------------------------------------
// x2("(?(?{....})123|456)", "123", 0, 3); // Test 1170
regex_error!(
    case_1170,
    "(?(?{....})123|456)",
    r#"unrecognized flag"#,
    1170
);

// -------------------------------------------------------------------------
// x2("(?(*FAIL)123|456)", "456", 0, 3); // Test 1171
regex_error!(case_1171, "(?(*FAIL)123|456)", r#"unrecognized flag"#, 1171);

// -------------------------------------------------------------------------
// x2("\\g'0'++{,0}",   "abcdefgh", 0, 0); // Test 1172
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\g'0'++{,0}?",  "abcdefgh", 0, 0); // Test 1173
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\g'0'++{,0}b",  "abcdefgh", 1, 2); // Test 1174
// unrecognized escape sequence

// -------------------------------------------------------------------------
// x2("\\g'0'++{,0}?def", "abcdefgh", 3, 6); // Test 1175
regex_error!(
    case_1175,
    "\\g'0'++{,0}?def",
    r#"unrecognized escape sequence"#,
    1175
);

// -------------------------------------------------------------------------
// x2("a{1,3}?", "aaa", 0, 1); // Test 1176
regex_error!(
    case_1176,
    "a{1,3}?",
    r#"a{1,3}?: Non-greedy repetitions. Consider using different scanner modes instead."#,
    1176
);

// -------------------------------------------------------------------------
// x2("a{3}", "aaa", 0, 3); // Test 1177
scan_test!(
    case_1177,
    s1177,
    S1177,
    r#"a{3}"#,
    "aaa",
    &[("aaa", 0, 3)],
    1177
);

// -------------------------------------------------------------------------
// x2("a{3}?", "aaa", 0, 3); // Test 1178
regex_error!(
    case_1178,
    "a{3}?",
    r#"a{3}: Non-greedy repetitions. Consider using different scanner modes instead."#,
    1178
);

// -------------------------------------------------------------------------
// x2("a{3}?", "aa", 0, 0); // Test 1179
regex_error!(
    case_1179,
    "a{3}?",
    r#"a{3}: Non-greedy repetitions. Consider using different scanner modes instead."#,
    1179
);

// -------------------------------------------------------------------------
// x2("a{3,3}?", "aaa", 0, 3); // Test 1180
regex_error!(
    case_1180,
    "a{3,3}?",
    r#"a{3}: Non-greedy repetitions. Consider using different scanner modes instead."#,
    1180
);

// -------------------------------------------------------------------------
// n("a{3,3}?", "aa"); // Test 1181
regex_error!(
    case_1181,
    "a{3,3}?",
    r#"Non-greedy repetitions. Consider using different scanner modes instead."#,
    1181
);

// -------------------------------------------------------------------------
// x2("a{1,3}+", "aaaaaa", 0, 6); // Test 1182
scan_test!(
    case_1182,
    s1182,
    S1182,
    r#"a{1,3}+"#,
    "aaaaaa",
    &[("aaaaaa", 0, 6)],
    1182
);

// -------------------------------------------------------------------------
// x2("a{3}+", "aaaaaa", 0, 6); // Test 1183
scan_test!(
    case_1183,
    s1183,
    S1183,
    r#"a{3}+"#,
    "aaaaaa",
    &[("aaaaaa", 0, 6)],
    1183
);

// -------------------------------------------------------------------------
// x2("a{3,3}+", "aaaaaa", 0, 6); // Test 1184
scan_test!(
    case_1184,
    s1184,
    S1184,
    r#"a{3,3}+"#,
    "aaaaaa",
    &[("aaaaaa", 0, 6)],
    1184
);

// -------------------------------------------------------------------------
// n("a{2,3}?",  "a"); // Test 1185
// Non-greedy repetitions. Consider using different scanner modes instead.

// -------------------------------------------------------------------------
// n("a{3,2}a", "aaa"); // Test 1186
regex_error!(
    case_1186,
    "a{3,2}a",
    r#"invalid repetition count range, the start must be <= the end"#,
    1186
);

// -------------------------------------------------------------------------
// x2("a{3,2}b", "aaab", 0, 4); // Test 1187
regex_error!(
    case_1187,
    "a{3,2}b",
    r#"invalid repetition count range, the start must be <= the end"#,
    1187
);

// -------------------------------------------------------------------------
// x2("a{3,2}b", "aaaab", 1, 5); // Test 1188
regex_error!(
    case_1188,
    "a{3,2}b",
    r#"invalid repetition count range, the start must be <= the end"#,
    1188
);

// -------------------------------------------------------------------------
// x2("a{3,2}b", "aab", 0, 3); // Test 1189
regex_error!(
    case_1189,
    "a{3,2}b",
    r#"invalid repetition count range, the start must be <= the end"#,
    1189
);

// -------------------------------------------------------------------------
// x2("a{3,2}?", "", 0, 0);     /* == (?:a{3,2})?*/ // Test 1190
regex_error!(
    case_1190,
    "a{3,2}?",
    r#"invalid repetition count range, the start must be <= the end"#,
    1190
);

// -------------------------------------------------------------------------
// x2("a{2,3}+a", "aaa", 0, 3); /* == (?:a{2,3})+*/ // Test 1191
scan_test!(
    case_1191,
    s1191,
    S1191,
    r#"a{2,3}+a"#,
    "aaa",
    &[("aaa", 0, 3)],
    1191
);

// -------------------------------------------------------------------------
// x2("[\\x{0}-\\x{7fffffff}]", "a", 0, 1); // Test 1192
regex_error!(
    case_1192,
    "[\\x{0}-\\x{7fffffff}]",
    r#"hexadecimal literal is not a Unicode scalar value"#,
    1192
);

// -------------------------------------------------------------------------
// x2("[\\x{7f}-\\x{7fffffff}]", "\xe5\xae\xb6", 0, 3); // Test 1193
regex_error!(
    case_1193,
    "[\\x{7f}-\\x{7fffffff}]",
    r#"hexadecimal literal is not a Unicode scalar value"#,
    1193
);

// -------------------------------------------------------------------------
// x2("[a[cdef]]", "a", 0, 1); // Test 1194
scan_test!(
    case_1194,
    s1194,
    S1194,
    r#"[a[cdef]]"#,
    "a",
    &[("a", 0, 1)],
    1194
);

// -------------------------------------------------------------------------
// n("[a[xyz]-c]", "b"); // Test 1195
scan_test!(case_1195, s1195, S1195, r#"[a[xyz]-c]"#, "b", &[], 1195);

// -------------------------------------------------------------------------
// x2("[a[xyz]-c]", "-", 0, 1); // Test 1196
scan_test!(
    case_1196,
    s1196,
    S1196,
    r#"[a[xyz]-c]"#,
    "-",
    &[("-", 0, 1)],
    1196
);

// -------------------------------------------------------------------------
// x2("[a[xyz]-c]", "c", 0, 1); // Test 1197
scan_test!(
    case_1197,
    s1197,
    S1197,
    r#"[a[xyz]-c]"#,
    "c",
    &[("c", 0, 1)],
    1197
);

// -------------------------------------------------------------------------
// x2("(a.c|def)(.{4})(?<=\\1)", "abcdabc", 0, 7); // Test 1198
regex_error!(
    case_1198,
    "(a.c|def)(.{4})(?<=\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1198
);

// -------------------------------------------------------------------------
// x2("(a.c|de)(.{4})(?<=\\1)", "abcdabc", 0, 7); // Test 1199
regex_error!(
    case_1199,
    "(a.c|de)(.{4})(?<=\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1199
);

// -------------------------------------------------------------------------
// x2("(a.c|def)(.{5})(?<=d\\1e)", "abcdabce", 0, 8); // Test 1200
regex_error!(
    case_1200,
    "(a.c|def)(.{5})(?<=d\\1e)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1200
);

// -------------------------------------------------------------------------
// x2("(a.c|.)d(?<=\\k<1>d)", "zzzzzabcdabc", 5, 9); // Test 1201
regex_error!(
    case_1201,
    "(a.c|.)d(?<=\\k<1>d)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1201
);

// -------------------------------------------------------------------------
// x2("(?<=az*)abc", "azzzzzzzzzzabcdabcabc", 11, 14); // Test 1202
regex_error!(
    case_1202,
    "(?<=az*)abc",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1202
);

// -------------------------------------------------------------------------
// x2("(?<=ab|abc|abcd)ef", "abcdef", 4, 6); // Test 1203
regex_error!(
    case_1203,
    "(?<=ab|abc|abcd)ef",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1203
);

// -------------------------------------------------------------------------
// x2("(?<=ta+|tb+|tc+|td+)zz", "tcccccccccczz", 11, 13); // Test 1204
regex_error!(
    case_1204,
    "(?<=ta+|tb+|tc+|td+)zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1204
);

// -------------------------------------------------------------------------
// x2("(?<=t.{7}|t.{5}|t.{2}|t.)zz", "tczz", 2, 4); // Test 1205
regex_error!(
    case_1205,
    "(?<=t.{7}|t.{5}|t.{2}|t.)zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1205
);

// -------------------------------------------------------------------------
// x2("(?<=t.{7}|t.{5}|t.{2})zz", "tczzzz", 3, 5); // Test 1206
regex_error!(
    case_1206,
    "(?<=t.{7}|t.{5}|t.{2})zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1206
);

// -------------------------------------------------------------------------
// x2("(?<=t.{7}|t.{5}|t.{3})zz", "tczzazzbzz", 8, 10); // Test 1207
regex_error!(
    case_1207,
    "(?<=t.{7}|t.{5}|t.{3})zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1207
);

// -------------------------------------------------------------------------
// n("(?<=t.{7}|t.{5}|t.{3})zz", "tczzazzbczz"); // Test 1208
regex_error!(
    case_1208,
    "(?<=t.{7}|t.{5}|t.{3})zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1208
);

// -------------------------------------------------------------------------
// x2("(?<=(ab|abc|abcd))ef", "abcdef", 4, 6); // Test 1209
regex_error!(
    case_1209,
    "(?<=(ab|abc|abcd))ef",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1209
);

// -------------------------------------------------------------------------
// x2("(?<=(ta+|tb+|tc+|td+))zz", "tcccccccccczz", 11, 13); // Test 1210
regex_error!(
    case_1210,
    "(?<=(ta+|tb+|tc+|td+))zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1210
);

// -------------------------------------------------------------------------
// x2("(?<=(t.{7}|t.{5}|t.{2}|t.))zz", "tczz", 2, 4); // Test 1211
regex_error!(
    case_1211,
    "(?<=(t.{7}|t.{5}|t.{2}|t.))zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1211
);

// -------------------------------------------------------------------------
// x2("(?<=(t.{7}|t.{5}|t.{2}))zz", "tczzzz", 3, 5); // Test 1212
regex_error!(
    case_1212,
    "(?<=(t.{7}|t.{5}|t.{2}))zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1212
);

// -------------------------------------------------------------------------
// x2("(?<=(t.{7}|t.{5}|t.{3}))zz", "tczzazzbzz", 8, 10); // Test 1213
regex_error!(
    case_1213,
    "(?<=(t.{7}|t.{5}|t.{3}))zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1213
);

// -------------------------------------------------------------------------
// n("(?<=(t.{7}|t.{5}|t.{3}))zz", "tczzazzbczz"); // Test 1214
regex_error!(
    case_1214,
    "(?<=(t.{7}|t.{5}|t.{3}))zz",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1214
);

// -------------------------------------------------------------------------
// x2("(.{1,4})(.{1,4})(?<=\\2\\1)", "abaaba", 0, 6); // Test 1215
regex_error!(
    case_1215,
    "(.{1,4})(.{1,4})(?<=\\2\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1215
);

// -------------------------------------------------------------------------
// x2("(.{1,4})(.{1,4})(?<=\\2\\1)", "ababab", 0, 6); // Test 1216
regex_error!(
    case_1216,
    "(.{1,4})(.{1,4})(?<=\\2\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1216
);

// -------------------------------------------------------------------------
// n("(.{1,4})(.{1,4})(?<=\\2\\1)", "abcdabce"); // Test 1217
regex_error!(
    case_1217,
    "(.{1,4})(.{1,4})(?<=\\2\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1217
);

// -------------------------------------------------------------------------
// x2("(.{1,4})(.{1,4})(?<=\\2\\1)", "abcdabceabce", 4, 12); // Test 1218
regex_error!(
    case_1218,
    "(.{1,4})(.{1,4})(?<=\\2\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1218
);

// -------------------------------------------------------------------------
// x2("(?<=a)", "a", 1, 1); // Test 1219
regex_error!(
    case_1219,
    "(?<=a)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1219
);

// -------------------------------------------------------------------------
// x2("(?<=a.*\\w)z", "abbbz", 4, 5); // Test 1220
regex_error!(
    case_1220,
    "(?<=a.*\\w)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1220
);

// -------------------------------------------------------------------------
// n("(?<=a.*\\w)z", "abb z"); // Test 1221
regex_error!(
    case_1221,
    "(?<=a.*\\w)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1221
);

// -------------------------------------------------------------------------
// x2("(?<=a.*\\W)z", "abb z", 4, 5); // Test 1222
regex_error!(
    case_1222,
    "(?<=a.*\\W)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1222
);

// -------------------------------------------------------------------------
// x2("(?<=a.*\\b)z", "abb z", 4, 5); // Test 1223
regex_error!(
    case_1223,
    "(?<=a.*\\b)z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1223
);

// -------------------------------------------------------------------------
// x2("(?<=(?>abc))", "abc", 3, 3); // Test 1224
regex_error!(
    case_1224,
    "(?<=(?>abc))",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1224
);

// -------------------------------------------------------------------------
// x2("(?<=a\\Xz)", "abz", 3, 3); // Test 1225
regex_error!(
    case_1225,
    "(?<=a\\Xz)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1225
);

// -------------------------------------------------------------------------
// n("(?<=^a*)bc", "zabc"); // Test 1226
regex_error!(
    case_1226,
    "(?<=^a*)bc",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1226
);

// -------------------------------------------------------------------------
// n("(?<=a*\\b)b", "abc"); // Test 1227
regex_error!(
    case_1227,
    "(?<=a*\\b)b",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1227
);

// -------------------------------------------------------------------------
// x2("(?<=a+.*[efg])z", "abcdfz", 5, 6); // Test 1228
regex_error!(
    case_1228,
    "(?<=a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1228
);

// -------------------------------------------------------------------------
// x2("(?<=a+.*[efg])z", "abcdfgz", 6, 7); // Test 1229
regex_error!(
    case_1229,
    "(?<=a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1229
);

// -------------------------------------------------------------------------
// n("(?<=a+.*[efg])z", "bcdfz"); // Test 1230
regex_error!(
    case_1230,
    "(?<=a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1230
);

// -------------------------------------------------------------------------
// x2("(?<=a*.*[efg])z", "bcdfz", 4, 5); // Test 1231
regex_error!(
    case_1231,
    "(?<=a*.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1231
);

// -------------------------------------------------------------------------
// n("(?<=a+.*[efg])z", "abcdz"); // Test 1232
regex_error!(
    case_1232,
    "(?<=a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1232
);

// -------------------------------------------------------------------------
// x2("(?<=v|t|a+.*[efg])z", "abcdfz", 5, 6); // Test 1233
regex_error!(
    case_1233,
    "(?<=v|t|a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1233
);

// -------------------------------------------------------------------------
// x2("(?<=v|t|^a+.*[efg])z", "abcdfz", 5, 6); // Test 1234
regex_error!(
    case_1234,
    "(?<=v|t|^a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1234
);

// -------------------------------------------------------------------------
// x2("(?<=^(?:v|t|a+.*[efg]))z", "abcdfz", 5, 6); // Test 1235
regex_error!(
    case_1235,
    "(?<=^(?:v|t|a+.*[efg]))z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1235
);

// -------------------------------------------------------------------------
// x2("(?<=v|^t|a+.*[efg])z", "uabcdfz", 6, 7); // Test 1236
regex_error!(
    case_1236,
    "(?<=v|^t|a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1236
);

// -------------------------------------------------------------------------
// n("^..(?<=(a{,2}))\\1z", "aaaaz"); // !!! look-behind is shortest priority // Test 1237
regex_error!(
    case_1237,
    "^..(?<=(a{,2}))\\1z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1237
);

// -------------------------------------------------------------------------
// x2("^..(?<=(a{,2}))\\1z", "aaz", 0, 3); // shortest priority // Test 1238
regex_error!(
    case_1238,
    "^..(?<=(a{,2}))\\1z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1238
);

// -------------------------------------------------------------------------
// e("(?<=(?~|zoo)a.*z)", "abcdefz", ONIGERR_INVALID_LOOK_BEHIND_PATTERN); // Test 1239

// -------------------------------------------------------------------------
// e("(?<=(?~|)a.*z)", "abcdefz", ONIGERR_INVALID_LOOK_BEHIND_PATTERN); // Test 1240

// -------------------------------------------------------------------------
// e("(a(?~|boo)z){0}(?<=\\g<1>)", "abcdefz", ONIGERR_INVALID_LOOK_BEHIND_PATTERN); // Test 1241

// -------------------------------------------------------------------------
// x2("(?<=(?<= )| )", "abcde fg", 6, 6); // #173 // Test 1242
regex_error!(
    case_1242,
    "(?<=(?<= )| )",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1242
);

// -------------------------------------------------------------------------
// x2("(?<=D|)(?<=@!nnnnnnnnnIIIIn;{1}D?()|<x@x*xxxD|)(?<=@xxx|xxxxx\\g<1>;{1}x)", "(?<=D|)(?<=@!nnnnnnnnnIIIIn;{1}D?()|<x@x*xxxD|)(?<=@xxx|xxxxx\\g<1>;{1}x)", 55, 55); // #173 // Test 1243
regex_error!(
    case_1243,
    "(?<=D|)(?<=@!nnnnnnnnnIIIIn;{1}D?()|<x@x*xxxD|)(?<=@xxx|xxxxx\\g<1>;{1}x)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1243
);

// -------------------------------------------------------------------------
// x2("(?<=;()|)\\g<1>", "", 0, 0); // reduced #173 // Test 1244
regex_error!(
    case_1244,
    "(?<=;()|)\\g<1>",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1244
);

// -------------------------------------------------------------------------
// x2("(?<=;()|)\\k<1>", ";", 1, 1); // Test 1245
regex_error!(
    case_1245,
    "(?<=;()|)\\k<1>",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1245
);

// -------------------------------------------------------------------------
// x2("(())\\g<3>{0}(?<=|())", "abc", 0, 0); // #175 // Test 1246
regex_error!(
    case_1246,
    "(())\\g<3>{0}(?<=|())",
    r#"unrecognized escape sequence"#,
    1246
);

// -------------------------------------------------------------------------
// x2("(?<=()|)\\1{0}", "abc", 0, 0); // Test 1247
regex_error!(
    case_1247,
    "(?<=()|)\\1{0}",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1247
);

// -------------------------------------------------------------------------
// e("(?<!xxxxxxxxxxxxxxxxxxxxxxx{32774}{65521}xxxxxxxx{65521}xxxxxxxxxxxxxx{32774}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)", "", ONIGERR_INVALID_LOOK_BEHIND_PATTERN); // #177 // Test 1248

// -------------------------------------------------------------------------
// x2("(?<=(?<=abc))def", "abcdef", 3, 6); // Test 1249
regex_error!(
    case_1249,
    "(?<=(?<=abc))def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1249
);

// -------------------------------------------------------------------------
// x2("(?<=ab(?<=.+b)c)def", "abcdef", 3, 6); // Test 1250
regex_error!(
    case_1250,
    "(?<=ab(?<=.+b)c)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1250
);

// -------------------------------------------------------------------------
// n("(?<=ab(?<=a+)c)def", "abcdef"); // Test 1251
regex_error!(
    case_1251,
    "(?<=ab(?<=a+)c)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1251
);

// -------------------------------------------------------------------------
// n("(?<=abc)(?<!abc)def", "abcdef"); // Test 1252
regex_error!(
    case_1252,
    "(?<=abc)(?<!abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1252
);

// -------------------------------------------------------------------------
// n("(?<!ab.)(?<=.bc)def", "abcdef"); // Test 1253
regex_error!(
    case_1253,
    "(?<!ab.)(?<=.bc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1253
);

// -------------------------------------------------------------------------
// x2("(?<!ab.)(?<=.bc)def", "abcdefcbcdef", 9, 12); // Test 1254
regex_error!(
    case_1254,
    "(?<!ab.)(?<=.bc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1254
);

// -------------------------------------------------------------------------
// n("(?<!abc)def", "abcdef"); // Test 1255
regex_error!(
    case_1255,
    "(?<!abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1255
);

// -------------------------------------------------------------------------
// n("(?<!xxx|abc)def", "abcdef"); // Test 1256
regex_error!(
    case_1256,
    "(?<!xxx|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1256
);

// -------------------------------------------------------------------------
// n("(?<!xxxxx|abc)def", "abcdef"); // Test 1257
regex_error!(
    case_1257,
    "(?<!xxxxx|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1257
);

// -------------------------------------------------------------------------
// n("(?<!xxxxx|abc)def", "xxxxxxdef"); // Test 1258
regex_error!(
    case_1258,
    "(?<!xxxxx|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1258
);

// -------------------------------------------------------------------------
// n("(?<!x+|abc)def", "abcdef"); // Test 1259
regex_error!(
    case_1259,
    "(?<!x+|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1259
);

// -------------------------------------------------------------------------
// n("(?<!x+|abc)def", "xxxxxxxxxdef"); // Test 1260
regex_error!(
    case_1260,
    "(?<!x+|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1260
);

// -------------------------------------------------------------------------
// x2("(?<!x+|abc)def", "xxxxxxxxzdef", 9, 12); // Test 1261
regex_error!(
    case_1261,
    "(?<!x+|abc)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1261
);

// -------------------------------------------------------------------------
// n("(?<!a.*z|a)def", "axxxxxxxzdef"); // Test 1262
regex_error!(
    case_1262,
    "(?<!a.*z|a)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1262
);

// -------------------------------------------------------------------------
// n("(?<!a.*z|a)def", "bxxxxxxxadef"); // Test 1263
regex_error!(
    case_1263,
    "(?<!a.*z|a)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1263
);

// -------------------------------------------------------------------------
// x2("(?<!a.*z|a)def", "axxxxxxxzdefxxdef", 14, 17); // Test 1264
regex_error!(
    case_1264,
    "(?<!a.*z|a)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1264
);

// -------------------------------------------------------------------------
// x2("(?<!a.*z|a)def", "bxxxxxxxadefxxdef", 14, 17); // Test 1265
regex_error!(
    case_1265,
    "(?<!a.*z|a)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1265
);

// -------------------------------------------------------------------------
// x2("(?<!a.*z|a)def", "bxxxxxxxzdef", 9, 12); // Test 1266
regex_error!(
    case_1266,
    "(?<!a.*z|a)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1266
);

// -------------------------------------------------------------------------
// x2("(?<!x+|y+)\\d+", "xxx572", 4, 6); // Test 1267
regex_error!(
    case_1267,
    "(?<!x+|y+)\\d+",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1267
);

// -------------------------------------------------------------------------
// x2("(?<!3+|4+)\\d+", "33334444", 0, 8); // Test 1268
regex_error!(
    case_1268,
    "(?<!3+|4+)\\d+",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1268
);

// -------------------------------------------------------------------------
// n(".(?<!3+|4+)\\d+", "33334444"); // Test 1269
regex_error!(
    case_1269,
    ".(?<!3+|4+)\\d+",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1269
);

// -------------------------------------------------------------------------
// n("(.{,3})..(?<!\\1)", "aaaaa"); // Test 1270
regex_error!(
    case_1270,
    "(.{,3})..(?<!\\1)",
    r#"repetition quantifier expects a valid decimal"#,
    1270
);

// -------------------------------------------------------------------------
// x2("(.{,3})..(?<!\\1)", "abcde", 0, 5); // Test 1271
regex_error!(
    case_1271,
    "(.{,3})..(?<!\\1)",
    r#"repetition quantifier expects a valid decimal"#,
    1271
);

// -------------------------------------------------------------------------
// x2("(.{,3})...(?<!\\1)", "abcde", 0, 5); // Test 1272
regex_error!(
    case_1272,
    "(.{,3})...(?<!\\1)",
    r#"repetition quantifier expects a valid decimal"#,
    1272
);

// -------------------------------------------------------------------------
// x2("(a.c)(.{3,}?)(?<!\\1)", "abcabcd", 0, 7); // Test 1273
regex_error!(
    case_1273,
    "(a.c)(.{3,}?)(?<!\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1273
);

// -------------------------------------------------------------------------
// x2("(a*)(.{3,}?)(?<!\\1)", "abcabcd", 0, 5); // Test 1274
regex_error!(
    case_1274,
    "(a*)(.{3,}?)(?<!\\1)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1274
);

// -------------------------------------------------------------------------
// x2("(?:(a.*b)|c.*d)(?<!(?(1))azzzb)", "azzzzb", 0, 6); // Test 1275
regex_error!(
    case_1275,
    "(?:(a.*b)|c.*d)(?<!(?(1))azzzb)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1275
);

// -------------------------------------------------------------------------
// n("(?:(a.*b)|c.*d)(?<!(?(1))azzzb)", "azzzb"); // Test 1276
regex_error!(
    case_1276,
    "(?:(a.*b)|c.*d)(?<!(?(1))azzzb)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1276
);

// -------------------------------------------------------------------------
// x2("<(?<!NT{+}abcd)", "<(?<!NT{+}abcd)", 0, 1); // Test 1277
regex_error!(
    case_1277,
    "<(?<!NT{+}abcd)",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1277
);

// -------------------------------------------------------------------------
// x2("(?<!a.*c)def", "abbbbdef", 5, 8); // Test 1278
regex_error!(
    case_1278,
    "(?<!a.*c)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1278
);

// -------------------------------------------------------------------------
// n("(?<!a.*c)def", "abbbcdef"); // Test 1279
regex_error!(
    case_1279,
    "(?<!a.*c)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1279
);

// -------------------------------------------------------------------------
// x2("(?<!a.*X\\b)def", "abbbbbXdef", 7, 10); // Test 1280
regex_error!(
    case_1280,
    "(?<!a.*X\\b)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1280
);

// -------------------------------------------------------------------------
// n("(?<!a.*X\\B)def", "abbbbbXdef"); // Test 1281
regex_error!(
    case_1281,
    "(?<!a.*X\\B)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1281
);

// -------------------------------------------------------------------------
// x2("(?<!a.*[uvw])def", "abbbbbXdef", 7, 10); // Test 1282
regex_error!(
    case_1282,
    "(?<!a.*[uvw])def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1282
);

// -------------------------------------------------------------------------
// n("(?<!a.*[uvw])def", "abbbbbwdef"); // Test 1283
regex_error!(
    case_1283,
    "(?<!a.*[uvw])def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1283
);

// -------------------------------------------------------------------------
// x2("(?<!ab*\\S+)def", "abbbbb   def", 9, 12); // Test 1284
regex_error!(
    case_1284,
    "(?<!ab*\\S+)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1284
);

// -------------------------------------------------------------------------
// x2("(?<!a.*\\S)def", "abbbbb def", 7, 10); // Test 1285
regex_error!(
    case_1285,
    "(?<!a.*\\S)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1285
);

// -------------------------------------------------------------------------
// n("(?<!ab*\\s+)def", "abbbbb   def"); // Test 1286
regex_error!(
    case_1286,
    "(?<!ab*\\s+)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1286
);

// -------------------------------------------------------------------------
// x2("(?<!ab*\\s+\\B)def", "abbbbb   def", 9, 12); // Test 1287
regex_error!(
    case_1287,
    "(?<!ab*\\s+\\B)def",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1287
);

// -------------------------------------------------------------------------
// n("(?<!v|t|a+.*[efg])z", "abcdfz"); // Test 1288
regex_error!(
    case_1288,
    "(?<!v|t|a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1288
);

// -------------------------------------------------------------------------
// x2("(?<!v|t|a+.*[efg])z", "abcdfzavzuz", 10, 11); // Test 1289
regex_error!(
    case_1289,
    "(?<!v|t|a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1289
);

// -------------------------------------------------------------------------
// n("(?<!v|t|^a+.*[efg])z", "abcdfz"); // Test 1290
regex_error!(
    case_1290,
    "(?<!v|t|^a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1290
);

// -------------------------------------------------------------------------
// n("(?<!^(?:v|t|a+.*[efg]))z", "abcdfz"); // Test 1291
regex_error!(
    case_1291,
    "(?<!^(?:v|t|a+.*[efg]))z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1291
);

// -------------------------------------------------------------------------
// x2("(?<!v|^t|^a+.*[efg])z", "uabcdfz", 6, 7); // Test 1292
regex_error!(
    case_1292,
    "(?<!v|^t|^a+.*[efg])z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1292
);

// -------------------------------------------------------------------------
// n("(\\k<2>)|(?<=(\\k<1>))", ""); // Test 1293
regex_error!(
    case_1293,
    "(\\k<2>)|(?<=(\\k<1>))",
    r#"unrecognized escape sequence"#,
    1293
);

// -------------------------------------------------------------------------
// x2("(a|\\k<2>)|(?<=(\\k<1>))", "a", 0, 1); // Test 1294
regex_error!(
    case_1294,
    "(a|\\k<2>)|(?<=(\\k<1>))",
    r#"unrecognized escape sequence"#,
    1294
);

// -------------------------------------------------------------------------
// x2("(a|\\k<2>)|(?<=b(\\k<1>))", "ba", 1, 2); // Test 1295
regex_error!(
    case_1295,
    "(a|\\k<2>)|(?<=b(\\k<1>))",
    r#"unrecognized escape sequence"#,
    1295
);

// -------------------------------------------------------------------------
// n("(?<!RMA)X", "123RMAX"); // Test 1296
regex_error!(
    case_1296,
    "(?<!RMA)X",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1296
);

// -------------------------------------------------------------------------
// x2("(?<=RMA)X", "123RMAX", 6, 7); // Test 1297
regex_error!(
    case_1297,
    "(?<=RMA)X",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1297
);

// -------------------------------------------------------------------------
// n("(?<!RMA)$", "123RMA"); // Test 1298
regex_error!(
    case_1298,
    "(?<!RMA)$",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1298
);

// -------------------------------------------------------------------------
// x2("(?<=RMA)$", "123RMA", 6, 6); // Test 1299
regex_error!(
    case_1299,
    "(?<=RMA)$",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1299
);

// -------------------------------------------------------------------------
// n("(?<!RMA)\\Z", "123RMA"); // Test 1300
regex_error!(
    case_1300,
    "(?<!RMA)\\Z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1300
);

// -------------------------------------------------------------------------
// x2("(?<=RMA)\\Z", "123RMA", 6, 6); // Test 1301
regex_error!(
    case_1301,
    "(?<=RMA)\\Z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1301
);

// -------------------------------------------------------------------------
// n("(?<!RMA)\\z", "123RMA"); // Test 1302
regex_error!(
    case_1302,
    "(?<!RMA)\\z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1302
);

// -------------------------------------------------------------------------
// x2("(?<=RMA)\\z", "123RMA", 6, 6); // Test 1303
regex_error!(
    case_1303,
    "(?<=RMA)\\z",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1303
);

// -------------------------------------------------------------------------
// x2("((?(a)\\g<1>|b))", "aab", 0, 3); // Test 1304
regex_error!(case_1304, "((?(a)\\g<1>|b))", r#"unrecognized flag"#, 1304);

// -------------------------------------------------------------------------
// x2("((?(a)\\g<1>))", "aab", 0, 2); // Test 1305
regex_error!(case_1305, "((?(a)\\g<1>))", r#"unrecognized flag"#, 1305);

// -------------------------------------------------------------------------
// x2("((?(a)\\g<1>))", "", 0, 0); // Test 1306
regex_error!(case_1306, "((?(a)\\g<1>))", r#"unrecognized flag"#, 1306);

// -------------------------------------------------------------------------
// x2("(b(?(a)|\\g<1>))", "bba", 0, 3); // Test 1307
regex_error!(case_1307, "(b(?(a)|\\g<1>))", r#"unrecognized flag"#, 1307);

// -------------------------------------------------------------------------
// e("(()(?(2)\\g<1>))", "", ONIGERR_NEVER_ENDING_RECURSION); // Test 1308

// -------------------------------------------------------------------------
// x2("(?(a)(?:b|c))", "ac", 0, 2); // Test 1309
regex_error!(case_1309, "(?(a)(?:b|c))", r#"unrecognized flag"#, 1309);

// -------------------------------------------------------------------------
// x2("(?(a)(?:b|c))", "", 0, 0); // Test 1310
regex_error!(case_1310, "(?(a)(?:b|c))", r#"unrecognized flag"#, 1310);

// -------------------------------------------------------------------------
// x2("(?(a)b)", "", 0, 0); // Test 1311
regex_error!(case_1311, "(?(a)b)", r#"unrecognized flag"#, 1311);

// -------------------------------------------------------------------------
// n("^(?(a)b|c)", "ac"); // Test 1312
regex_error!(case_1312, "^(?(a)b|c)", r#"unrecognized flag"#, 1312);

// -------------------------------------------------------------------------
// x2("(?i)a|b", "B", 0, 1); // Test 1313
scan_test!(
    case_1313,
    s1313,
    S1313,
    r#"(?i)a|b"#,
    "B",
    &[("B", 0, 1)],
    1313
);

// -------------------------------------------------------------------------
// n("((?i)a|b.)|c", "C"); // Test 1314
scan_test!(case_1314, s1314, S1314, r#"((?i)a|b.)|c"#, "C", &[], 1314);

// -------------------------------------------------------------------------
// n("c(?i)a.|b.", "Caz"); // Test 1315
scan_test!(case_1315, s1315, S1315, r#"c(?i)a.|b."#, "Caz", &[], 1315);

// -------------------------------------------------------------------------
// x2("c(?i)a|b", "cB", 0, 2); /* == c(?i:a|b) */ // Test 1316
scan_test!(
    case_1316,
    s1316,
    S1316,
    r#"c(?i)a|b"#,
    "cB",
    &[("B", 1, 2)], // Oniguruma: ("cB", 0, 2)
    1316
);

// -------------------------------------------------------------------------
// x2("c(?i)a.|b.", "cBb", 0, 3); // Test 1317
scan_test!(
    case_1317,
    s1317,
    S1317,
    r#"c(?i)a.|b."#,
    "cBb",
    &[("Bb", 1, 3)],
    1317
);

// -------------------------------------------------------------------------
// x2("(?i)st", "st", 0, 2); // Test 1318
scan_test!(
    case_1318,
    s1318,
    S1318,
    r#"(?i)st"#,
    "st",
    &[("st", 0, 2)],
    1318
);

// -------------------------------------------------------------------------
// x2("(?i)st", "St", 0, 2); // Test 1319
scan_test!(
    case_1319,
    s1319,
    S1319,
    r#"(?i)st"#,
    "St",
    &[("St", 0, 2)],
    1319
);

// -------------------------------------------------------------------------
// x2("(?i)st", "sT", 0, 2); // Test 1320
scan_test!(
    case_1320,
    s1320,
    S1320,
    r#"(?i)st"#,
    "sT",
    &[("sT", 0, 2)],
    1320
);

// -------------------------------------------------------------------------
// x2("(?i)st", "\xC5\xBFt", 0, 3); // U+017F // Test 1321
scanner! { S1321 { mode M { token r#"(?i)st"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)st", "\xEF\xAC\x85", 0, 3); // U+FB05 // Test 1322
scanner! { S1322 { mode M { token r#"(?i)st"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)st", "\xEF\xAC\x86", 0, 3); // U+FB06 // Test 1323
scanner! { S1323 { mode M { token r#"(?i)st"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)ast", "Ast", 0, 3); // Test 1324
scan_test!(
    case_1324,
    s1324,
    S1324,
    r#"(?i)ast"#,
    "Ast",
    &[("Ast", 0, 3)],
    1324
);

// -------------------------------------------------------------------------
// x2("(?i)ast", "ASt", 0, 3); // Test 1325
scan_test!(
    case_1325,
    s1325,
    S1325,
    r#"(?i)ast"#,
    "ASt",
    &[("ASt", 0, 3)],
    1325
);

// -------------------------------------------------------------------------
// x2("(?i)ast", "AsT", 0, 3); // Test 1326
scan_test!(
    case_1326,
    s1326,
    S1326,
    r#"(?i)ast"#,
    "AsT",
    &[("AsT", 0, 3)],
    1326
);

// -------------------------------------------------------------------------
// x2("(?i)ast", "A\xC5\xBFt", 0, 4); // U+017F // Test 1327
scanner! { S1327 { mode M { token r#"(?i)ast"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)ast", "A\xEF\xAC\x85", 0, 4); // U+FB05 // Test 1328
scanner! { S1328 { mode M { token r#"(?i)ast"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)ast", "A\xEF\xAC\x86", 0, 4); // U+FB06 // Test 1329
scanner! { S1329 { mode M { token r#"(?i)ast"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)stZ", "stz", 0, 3); // Test 1330
scan_test!(
    case_1330,
    s1330,
    S1330,
    r#"(?i)stZ"#,
    "stz",
    &[("stz", 0, 3)],
    1330
);

// -------------------------------------------------------------------------
// x2("(?i)stZ", "Stz", 0, 3); // Test 1331
scan_test!(
    case_1331,
    s1331,
    S1331,
    r#"(?i)stZ"#,
    "Stz",
    &[("Stz", 0, 3)],
    1331
);

// -------------------------------------------------------------------------
// x2("(?i)stZ", "sTz", 0, 3); // Test 1332
scan_test!(
    case_1332,
    s1332,
    S1332,
    r#"(?i)stZ"#,
    "sTz",
    &[("sTz", 0, 3)],
    1332
);

// -------------------------------------------------------------------------
// x2("(?i)stZ", "\xC5\xBFtz", 0, 4); // U+017F // Test 1333
scanner! { S1333 { mode M { token r#"(?i)stZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)stZ", "\xEF\xAC\x85z", 0, 4); // U+FB05 // Test 1334
scanner! { S1334 { mode M { token r#"(?i)stZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)stZ", "\xEF\xAC\x86z", 0, 4); // U+FB06 // Test 1335
scanner! { S1335 { mode M { token r#"(?i)stZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "bstz", 0, 4); // Test 1336
scan_test!(
    case_1336,
    s1336,
    S1336,
    r#"(?i)BstZ"#,
    "bstz",
    &[("bstz", 0, 4)],
    1336
);

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "bStz", 0, 4); // Test 1337
scan_test!(
    case_1337,
    s1337,
    S1337,
    r#"(?i)BstZ"#,
    "bStz",
    &[("bStz", 0, 4)],
    1337
);

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "bsTz", 0, 4); // Test 1338
scan_test!(
    case_1338,
    s1338,
    S1338,
    r#"(?i)BstZ"#,
    "bsTz",
    &[("bsTz", 0, 4)],
    1338
);

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "b\xC5\xBFtz", 0, 5); // U+017F // Test 1339
scanner! { S1339 { mode M { token r#"(?i)BstZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "b\xEF\xAC\x85z", 0, 5); // U+FB05 // Test 1340
scanner! { S1340 { mode M { token r#"(?i)BstZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)BstZ", "b\xEF\xAC\x86z", 0, 5); // U+FB06 // Test 1341
scanner! { S1341 { mode M { token r#"(?i)BstZ"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i).*st\\z", "tttssss\xC5\xBFt", 0, 10); // U+017F // Test 1342
regex_error!(case_1342, "(?i).*st\\z", r#"EndLine Look(End)"#, 1342);

// -------------------------------------------------------------------------
// x2("(?i).*st\\z", "tttssss\xEF\xAC\x85", 0, 10); // U+FB05 // Test 1343
regex_error!(case_1343, "(?i).*st\\z", r#"EndLine Look(End)"#, 1343);

// -------------------------------------------------------------------------
// x2("(?i).*st\\z", "tttssss\xEF\xAC\x86", 0, 10); // U+FB06 // Test 1344
regex_error!(case_1344, "(?i).*st\\z", r#"EndLine Look(End)"#, 1344);

// -------------------------------------------------------------------------
// x2("(?i).*あstい\\z", "tttssssあ\xC5\xBFtい", 0, 16); // U+017F // Test 1345
regex_error!(case_1345, "(?i).*あstい\\z", r#"EndLine Look(End)"#, 1345);

// -------------------------------------------------------------------------
// x2("(?i).*あstい\\z", "tttssssあ\xEF\xAC\x85い", 0, 16); // U+FB05 // Test 1346
regex_error!(case_1346, "(?i).*あstい\\z", r#"EndLine Look(End)"#, 1346);

// -------------------------------------------------------------------------
// x2("(?i).*あstい\\z", "tttssssあ\xEF\xAC\x86い", 0, 16); // U+FB06 // Test 1347
regex_error!(case_1347, "(?i).*あstい\\z", r#"EndLine Look(End)"#, 1347);

// -------------------------------------------------------------------------
// x2("(?i).*\xC5\xBFt\\z", "tttssssst", 0, 9); // U+017F // Test 1348
// regex_error!(case_1348, "(?i).*\xC5\xBFt\\z", r#"EndLine Look(End)"#, 1348);  out of range hex escape

// -------------------------------------------------------------------------
// *** Index error: x2("(?i).*\xEF\xAC\x85\\z", "tttssssあst", 0, 12); // U+FB05 // Test 1349

// -------------------------------------------------------------------------
// *** Index error: x2("(?i).*\xEF\xAC\x86い\\z", "tttssssstい", 0, 12); // U+FB06 // Test 1350

// -------------------------------------------------------------------------
// x2("(?i).*\xEF\xAC\x85\\z", "tttssssあ\xEF\xAC\x85", 0, 13); // Test 1351
// regex_error!(case_1351, "(?i).*\xEF\xAC\x85\\z", r#"EndLine Look(End)"#, 1351);  out of range hex escape

// -------------------------------------------------------------------------
// x2("(?i).*ss", "abcdefghijklmnopqrstuvwxyz\xc3\x9f", 0, 28); // U+00DF // Test 1352
scanner! { S1352 { mode M { token r#"(?i).*ss"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i).*ss.*", "abcdefghijklmnopqrstuvwxyz\xc3\x9fxyz", 0, 31); // U+00DF // Test 1353
scanner! { S1353 { mode M { token r#"(?i).*ss.*"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i).*\xc3\x9f", "abcdefghijklmnopqrstuvwxyzss", 0, 28); // U+00DF // Test 1354
scan_test!(
    case_1354,
    s1354,
    S1354,
    r#"(?i).*\xc3\x9f"#,
    "abcdefghijklmnopqrstuvwxyzss",
    &[],
    1354
);

// -------------------------------------------------------------------------
// x2("(?i)ssv", "\xc3\x9fv", 0, 3); // U+00DF // Test 1355
scanner! { S1355 { mode M { token r#"(?i)ssv"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)(?<=ss)v", "SSv", 2, 3); // Test 1356
regex_error!(
    case_1356,
    "(?i)(?<=ss)v",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1356
);

// -------------------------------------------------------------------------
// x2("(?i)(?<=\xc3\x9f)v", "\xc3\x9fv", 2, 3); // Test 1357
// regex_error!(case_1357, "(?i)(?<=\xc3\x9f)v", r#"look-around, including look-ahead and look-behind, is not supported"#, 1357);  out of range hex escape

// -------------------------------------------------------------------------
// *** Index error: x2("(?i).+Isssǰ", ".+Isssǰ", 0, 8); // Test 1358

// -------------------------------------------------------------------------
// *** Index error: x2(".+Isssǰ", ".+Isssǰ", 0, 8); // Test 1359

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)ǰ", "ǰ", 0, 2); // Test 1360

// -------------------------------------------------------------------------
// x2("(?i)ǰ", "j\xcc\x8c", 0, 3); // Test 1361
scanner! { S1361 { mode M { token r#"(?i)ǰ"# => 0; } } }

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)j\xcc\x8c", "ǰ", 0, 2); // Test 1362

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)5ǰ", "5ǰ", 0, 3); // Test 1363

// -------------------------------------------------------------------------
// x2("(?i)5ǰ", "5j\xcc\x8c", 0, 4); // Test 1364
scanner! { S1364 { mode M { token r#"(?i)5ǰ"# => 0; } } }

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)5j\xcc\x8c", "5ǰ", 0, 3); // Test 1365

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)ǰv", "ǰV", 0, 3); // Test 1366

// -------------------------------------------------------------------------
// x2("(?i)ǰv", "j\xcc\x8cV", 0, 4); // Test 1367
scanner! { S1367 { mode M { token r#"(?i)ǰv"# => 0; } } }

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)j\xcc\x8cv", "ǰV", 0, 3); // Test 1368

// -------------------------------------------------------------------------
// *** Index error: x2("(?i)[ǰ]", "ǰ", 0, 2); // Test 1369

// -------------------------------------------------------------------------
// x2("(?i)[ǰ]", "j\xcc\x8c", 0, 3); // Test 1370
scanner! { S1370 { mode M { token r#"(?i)[ǰ]"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)\ufb00a", "ffa", 0, 3); // Test 1371
scan_test!(case_1371, s1371, S1371, r#"(?i)\ufb00a"#, "ffa", &[], 1371);

// -------------------------------------------------------------------------
// x2("(?i)ffz", "\xef\xac\x80z", 0, 4); // Test 1372
scanner! { S1372 { mode M { token r#"(?i)ffz"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)\u2126", "\xcf\x89", 0, 2); // Test 1373
scanner! { S1373 { mode M { token r#"(?i)\u2126"# => 0; } } }

// -------------------------------------------------------------------------
// x2("a(?i)\u2126", "a\xcf\x89", 0, 3); // Test 1374
scanner! { S1374 { mode M { token r#"a(?i)\u2126"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)A\u2126", "a\xcf\x89", 0, 3); // Test 1375
scanner! { S1375 { mode M { token r#"(?i)A\u2126"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i)A\u2126=", "a\xcf\x89=", 0, 4); // Test 1376
scanner! { S1376 { mode M { token r#"(?i)A\u2126="# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?i:ss)=1234567890", "\xc5\xbf\xc5\xbf=1234567890", 0, 15); // Test 1377
scanner! { S1377 { mode M { token r#"(?i:ss)=1234567890"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\x{000A}", "\x0a", 0, 1); // Test 1378
scanner! { S1378 { mode M { token r#"\x{000A}"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\x{000A 002f}", "\x0a\x2f", 0, 2); // Test 1379
regex_error!(
    case_1379,
    "\\x{000A 002f}",
    r#"invalid hexadecimal digit"#,
    1379
);

// -------------------------------------------------------------------------
// x2("\\x{000A 002f }", "\x0a\x2f", 0, 2); // Test 1380
regex_error!(
    case_1380,
    "\\x{000A 002f }",
    r#"invalid hexadecimal digit"#,
    1380
);

// -------------------------------------------------------------------------
// x2("\\x{007C     001b}", "\x7c\x1b", 0, 2); // Test 1381
regex_error!(
    case_1381,
    "\\x{007C     001b}",
    r#"invalid hexadecimal digit"#,
    1381
);

// -------------------------------------------------------------------------
// x2("\\x{1 2 3 4 5 6 7 8 9 a b c d e f}", "\x01\x02\x3\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f", 0, 15); // Test 1382
regex_error!(
    case_1382,
    "\\x{1 2 3 4 5 6 7 8 9 a b c d e f}",
    r#"invalid hexadecimal digit"#,
    1382
);

// -------------------------------------------------------------------------
// x2("a\\x{000A 002f}@", "a\x0a\x2f@", 0, 4); // Test 1383
regex_error!(
    case_1383,
    "a\\x{000A 002f}@",
    r#"invalid hexadecimal digit"#,
    1383
);

// -------------------------------------------------------------------------
// x2("a\\x{0060\n0063}@", "a\x60\x63@", 0, 4); // Test 1384
regex_error!(
    case_1384,
    "a\\x{0060\n0063}@",
    r#"invalid hexadecimal digit"#,
    1384
);

// -------------------------------------------------------------------------
// e("\\x{00000001 000000012}", "", ONIGERR_TOO_LONG_WIDE_CHAR_VALUE); // Test 1385

// -------------------------------------------------------------------------
// e("\\x{000A 00000002f}", "", ONIGERR_TOO_LONG_WIDE_CHAR_VALUE); // Test 1386

// -------------------------------------------------------------------------
// e("\\x{000A 002f/", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1387

// -------------------------------------------------------------------------
// e("\\x{000A 002f /", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1388

// -------------------------------------------------------------------------
// e("\\x{000A", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1389

// -------------------------------------------------------------------------
// e("\\x{000A ", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1390

// -------------------------------------------------------------------------
// e("\\x{000A 002f ", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1391

// -------------------------------------------------------------------------
// x2("\\o{102}", "B", 0, 1); // Test 1392
regex_error!(
    case_1392,
    "\\o{102}",
    r#"unrecognized escape sequence"#,
    1392
);

// -------------------------------------------------------------------------
// x2("\\o{102 103}", "BC", 0, 2); // Test 1393
regex_error!(
    case_1393,
    "\\o{102 103}",
    r#"unrecognized escape sequence"#,
    1393
);

// -------------------------------------------------------------------------
// x2("\\o{0160 0000161}", "pq", 0, 2); // Test 1394
regex_error!(
    case_1394,
    "\\o{0160 0000161}",
    r#"unrecognized escape sequence"#,
    1394
);

// -------------------------------------------------------------------------
// x2("\\o{1 2 3 4 5 6 7 10 11 12 13 14 15 16 17}", "\x01\x02\x3\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f", 0, 15); // Test 1395
regex_error!(
    case_1395,
    "\\o{1 2 3 4 5 6 7 10 11 12 13 14 15 16 17}",
    r#"unrecognized escape sequence"#,
    1395
);

// -------------------------------------------------------------------------
// x2("\\o{0007 0010 }", "\x07\x08", 0, 2); // Test 1396
regex_error!(
    case_1396,
    "\\o{0007 0010 }",
    r#"unrecognized escape sequence"#,
    1396
);

// -------------------------------------------------------------------------
// e("\\o{0000 0015/", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1397

// -------------------------------------------------------------------------
// e("\\o{0000 0015 /", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1398

// -------------------------------------------------------------------------
// e("\\o{0015", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1399

// -------------------------------------------------------------------------
// e("\\o{0015 ", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1400

// -------------------------------------------------------------------------
// e("\\o{0007 002f}", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1401

// -------------------------------------------------------------------------
// x2("[\\x{000A}]", "\x0a", 0, 1); // Test 1402
scanner! { S1402 { mode M { token r#"[\x{000A}]"# => 0; } } }

// -------------------------------------------------------------------------
// x2("[\\x{000A 002f}]+", "\x0a\x2f\x2e", 0, 2); // Test 1403
regex_error!(
    case_1403,
    "[\\x{000A 002f}]+",
    r#"invalid hexadecimal digit"#,
    1403
);

// -------------------------------------------------------------------------
// x2("[\\x{01 0F 1A 2c 4B}]+", "\x20\x01\x0f\x1a\x2c\x4b\x1b", 1, 6); // Test 1404
regex_error!(
    case_1404,
    "[\\x{01 0F 1A 2c 4B}]+",
    r#"invalid hexadecimal digit"#,
    1404
);

// -------------------------------------------------------------------------
// x2("[\\x{0020 0024}-\\x{0026}]+", "\x25\x24\x26\x23", 0, 3); // Test 1405
regex_error!(
    case_1405,
    "[\\x{0020 0024}-\\x{0026}]+",
    r#"invalid hexadecimal digit"#,
    1405
);

// -------------------------------------------------------------------------
// x2("[\\x{0030}-\\x{0033 005a}]+", "\x30\x31\x32\x33\x5a\34", 0, 5); // Test 1406
regex_error!(
    case_1406,
    "[\\x{0030}-\\x{0033 005a}]+",
    r#"invalid hexadecimal digit"#,
    1406
);

// -------------------------------------------------------------------------
// e("[\\x{000A]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1407

// -------------------------------------------------------------------------
// e("[\\x{000A ]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1408

// -------------------------------------------------------------------------
// e("[\\x{000A }]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1409

// -------------------------------------------------------------------------
// x2("[\\o{102}]", "B", 0, 1); // Test 1410
regex_error!(
    case_1410,
    "[\\o{102}]",
    r#"unrecognized escape sequence"#,
    1410
);

// -------------------------------------------------------------------------
// x2("[\\o{102 103}]*", "BC", 0, 2); // Test 1411
regex_error!(
    case_1411,
    "[\\o{102 103}]*",
    r#"unrecognized escape sequence"#,
    1411
);

// -------------------------------------------------------------------------
// e("[a\\o{002  003]bcde|zzz", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1412

// -------------------------------------------------------------------------
// x2("[\\x{0030-0039}]+", "abc0123456789def", 3, 13); // Test 1413
regex_error!(
    case_1413,
    "[\\x{0030-0039}]+",
    r#"invalid hexadecimal digit"#,
    1413
);

// -------------------------------------------------------------------------
// x2("[\\x{0030 - 0039 }]+", "abc0123456789def", 3, 13); // Test 1414
regex_error!(
    case_1414,
    "[\\x{0030 - 0039 }]+",
    r#"invalid hexadecimal digit"#,
    1414
);

// -------------------------------------------------------------------------
// x2("[\\x{0030 - 0039 0063 0064}]+", "abc0123456789def", 2, 14); // Test 1415
regex_error!(
    case_1415,
    "[\\x{0030 - 0039 0063 0064}]+",
    r#"invalid hexadecimal digit"#,
    1415
);

// -------------------------------------------------------------------------
// x2("[\\x{0030 - 0039 0063-0065}]+", "acde019b", 1, 7); // Test 1416
regex_error!(
    case_1416,
    "[\\x{0030 - 0039 0063-0065}]+",
    r#"invalid hexadecimal digit"#,
    1416
);

// -------------------------------------------------------------------------
// e("[\\x{0030 - 0039-0063 0064}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1417

// -------------------------------------------------------------------------
// e("[\\x{0030 - }]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1418

// -------------------------------------------------------------------------
// e("[\\x{0030 -- 0040}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1419

// -------------------------------------------------------------------------
// e("[\\x{0030--0040}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1420

// -------------------------------------------------------------------------
// e("[\\x{0030 - - 0040}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1421

// -------------------------------------------------------------------------
// e("[\\x{0030 0044 - }]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1422

// -------------------------------------------------------------------------
// e("[a-\\x{0070 - 0039}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1423

// -------------------------------------------------------------------------
// x2("[a-\\x{0063 0071}]+", "dabcqz", 1, 5); // Test 1424
regex_error!(
    case_1424,
    "[a-\\x{0063 0071}]+",
    r#"invalid hexadecimal digit"#,
    1424
);

// -------------------------------------------------------------------------
// x2("[-\\x{0063-0065}]+", "ace-df", 1, 5); // Test 1425
regex_error!(
    case_1425,
    "[-\\x{0063-0065}]+",
    r#"invalid hexadecimal digit"#,
    1425
);

// -------------------------------------------------------------------------
// x2("[\\x61-\\x{0063 0065}]+", "abced", 0, 4); // Test 1426
regex_error!(
    case_1426,
    "[\\x61-\\x{0063 0065}]+",
    r#"invalid hexadecimal digit"#,
    1426
);

// -------------------------------------------------------------------------
// e("[\\x61-\\x{0063-0065}]+", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1427

// -------------------------------------------------------------------------
// x2("[t\\x{0063 0071}]+", "tcqb", 0, 3); // Test 1428
regex_error!(
    case_1428,
    "[t\\x{0063 0071}]+",
    r#"invalid hexadecimal digit"#,
    1428
);

// -------------------------------------------------------------------------
// x2("[\\W\\x{0063 0071}]+", "*cqa", 0, 3); // Test 1429
regex_error!(
    case_1429,
    "[\\W\\x{0063 0071}]+",
    r#"invalid hexadecimal digit"#,
    1429
);

// -------------------------------------------------------------------------
// x2("(\\O|(?=z\\g<2>*))(\\g<0>){0}", "a", 0, 1); // Test 1430
regex_error!(
    case_1430,
    "(\\O|(?=z\\g<2>*))(\\g<0>){0}",
    r#"unrecognized escape sequence"#,
    1430
);

// -------------------------------------------------------------------------
// x2("(?Ii)abc", "abc", 0, 3); // Test 1431
regex_error!(case_1431, "(?Ii)abc", r#"unrecognized flag"#, 1431);

// -------------------------------------------------------------------------
// x2("(?Ii)abc", "ABC", 0, 3); // Test 1432
regex_error!(case_1432, "(?Ii)abc", r#"unrecognized flag"#, 1432);

// -------------------------------------------------------------------------
// x2("(?Ii:abc)", "abc", 0, 3); // Test 1433
regex_error!(case_1433, "(?Ii:abc)", r#"unrecognized flag"#, 1433);

// -------------------------------------------------------------------------
// x2("(?Ii)xyz|abc", "aBc", 0, 3); // Test 1434
regex_error!(case_1434, "(?Ii)xyz|abc", r#"unrecognized flag"#, 1434);

// -------------------------------------------------------------------------
// x2("(?Ii:zz|abc|AZ)", "ABc", 0, 3); // Test 1435
regex_error!(case_1435, "(?Ii:zz|abc|AZ)", r#"unrecognized flag"#, 1435);

// -------------------------------------------------------------------------
// e("(?Ii:abc)d", "abc", ONIGERR_INVALID_GROUP_OPTION); // Test 1436

// -------------------------------------------------------------------------
// e("(?-Ii:abc)", "abc", ONIGERR_INVALID_GROUP_OPTION); // Test 1437

// -------------------------------------------------------------------------
// x2("(?I-i:abc)", "abc", 0, 3); // Test 1438
regex_error!(case_1438, "(?I-i:abc)", r#"unrecognized flag"#, 1438);

// -------------------------------------------------------------------------
// e("(?i-I:abc)", "abc", ONIGERR_INVALID_GROUP_OPTION); // Test 1439

// -------------------------------------------------------------------------
// x2("(?i)\xe2\x84\xaa", "k", 0, 1); // Test 1440
scan_test!(
    case_1440,
    s1440,
    S1440,
    r#"(?i)\xe2\x84\xaa"#,
    "k",
    &[],
    1440
);

// -------------------------------------------------------------------------
// n("(?Ii)\xe2\x84\xaa", "k"); // Test 1441
// regex_error!(case_1441, "(?Ii)\xe2\x84\xaa", r#"unrecognized flag"#, 1441); out of range hex escape

// -------------------------------------------------------------------------
// e("((?Ii)abc)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1442

// -------------------------------------------------------------------------
// x2("(?:(?Ii)abc)", "ABC", 0, 3); // Test 1443
regex_error!(case_1443, "(?:(?Ii)abc)", r#"unrecognized flag"#, 1443);

// -------------------------------------------------------------------------
// x2("(?:(?:(?Ii)abc))", "ABC", 0, 3); // Test 1444
regex_error!(case_1444, "(?:(?:(?Ii)abc))", r#"unrecognized flag"#, 1444);

// -------------------------------------------------------------------------
// e("x(?Ii)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1445

// -------------------------------------------------------------------------
// e("()(?Ii)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1446

// -------------------------------------------------------------------------
// e("(?:)(?Ii)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1447

// -------------------------------------------------------------------------
// e("^(?Ii)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1448

// -------------------------------------------------------------------------
// x2("(?Ii)$", "", 0, 0); // Test 1449
regex_error!(case_1449, "(?Ii)$", r#"unrecognized flag"#, 1449);

// -------------------------------------------------------------------------
// x2("(?Ii)|", "", 0, 0); // Test 1450
regex_error!(case_1450, "(?Ii)|", r#"unrecognized flag"#, 1450);

// -------------------------------------------------------------------------
// e("(?Ii)|(?Ii)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1451

// -------------------------------------------------------------------------
// x2("a*", "aabcaaa", 0, 2); // Test 1452
scan_test!(
    case_1452,
    s1452,
    S1452,
    r#"a*"#,
    "aabcaaa",
    &[("aa", 0, 2), ("aaa", 4, 7)], // Oniguruma: ("aa", 0, 2)
    1452
);

// -------------------------------------------------------------------------
// x2("(?L)a*", "aabcaaa", 4, 7); // Test 1453
regex_error!(case_1453, "(?L)a*", r#"unrecognized flag"#, 1453);

// -------------------------------------------------------------------------
// x2("(?L)a{4}|a{3}|b*", "baaaaabbb", 1, 5); // Test 1454
regex_error!(case_1454, "(?L)a{4}|a{3}|b*", r#"unrecognized flag"#, 1454);

// -------------------------------------------------------------------------
// x2("(?L)a{3}|a{4}|b*", "baaaaabbb", 1, 5); // Test 1455
regex_error!(case_1455, "(?L)a{3}|a{4}|b*", r#"unrecognized flag"#, 1455);

// -------------------------------------------------------------------------
// e("x(?L)xxxxx", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1456

// -------------------------------------------------------------------------
// e("(?-L)x", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1457

// -------------------------------------------------------------------------
// x3("(..)\\1", "abab", 0, 2, 1); // Test 1458
// backreferences are not supported

// -------------------------------------------------------------------------
// e("(?C)(..)\\1", "abab", ONIGERR_INVALID_BACKREF); // Test 1459

// -------------------------------------------------------------------------
// e("(?-C)", "", ONIGERR_INVALID_GROUP_OPTION); // Test 1460

// -------------------------------------------------------------------------
// e("(?C)(.)(.)(.)(?<name>.)\\1", "abcdd", ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED); // Test 1461

// -------------------------------------------------------------------------
// x2("(?L)z|a\\g<0>a", "aazaa", 0, 5); // Test 1462
regex_error!(case_1462, "(?L)z|a\\g<0>a", r#"unrecognized flag"#, 1462);

// -------------------------------------------------------------------------
// x2("(?Li)z|a\\g<0>a", "aazAA", 0, 5); // Test 1463
regex_error!(case_1463, "(?Li)z|a\\g<0>a", r#"unrecognized flag"#, 1463);

// -------------------------------------------------------------------------
// x2("(?Li:z|a\\g<0>a)", "aazAA", 0, 5); // Test 1464
regex_error!(case_1464, "(?Li:z|a\\g<0>a)", r#"unrecognized flag"#, 1464);

// -------------------------------------------------------------------------
// x2("(?L)z|a\\g<0>a", "aazaaaazaaaa", 3, 12); // Test 1465
regex_error!(case_1465, "(?L)z|a\\g<0>a", r#"unrecognized flag"#, 1465);

// -------------------------------------------------------------------------
// n("(?iI)s", "\xc5\xbf"); // Test 1466
regex_error!(case_1466, "(?iI)s", r#"unrecognized flag"#, 1466);

// -------------------------------------------------------------------------
// n("(?iI)[s]", "\xc5\xbf");    // FAIL // Test 1467
regex_error!(case_1467, "(?iI)[s]", r#"unrecognized flag"#, 1467);

// -------------------------------------------------------------------------
// n("(?iI:s)", "\xc5\xbf"); // Test 1468
regex_error!(case_1468, "(?iI:s)", r#"unrecognized flag"#, 1468);

// -------------------------------------------------------------------------
// n("(?iI:[s])", "\xc5\xbf");    // FAIL // Test 1469
regex_error!(case_1469, "(?iI:[s])", r#"unrecognized flag"#, 1469);

// -------------------------------------------------------------------------
// x2("(?iI)(?:[[:word:]])", "\xc5\xbf", 0, 2); // Test 1470
regex_error!(
    case_1470,
    "(?iI)(?:[[:word:]])",
    r#"unrecognized flag"#,
    1470
);

// -------------------------------------------------------------------------
// n("(?iI)(?W:[[:word:]])", "\xc5\xbf");     // FAIL // Test 1471
regex_error!(
    case_1471,
    "(?iI)(?W:[[:word:]])",
    r#"unrecognized flag"#,
    1471
);

// -------------------------------------------------------------------------
// n("(?iI)(?W:\\w)", "\xc5\xbf"); // Test 1472
regex_error!(case_1472, "(?iI)(?W:\\w)", r#"unrecognized flag"#, 1472);

// -------------------------------------------------------------------------
// n("(?iI)(?W:[\\w])", "\xc5\xbf");     // FAIL // Test 1473
regex_error!(case_1473, "(?iI)(?W:[\\w])", r#"unrecognized flag"#, 1473);

// -------------------------------------------------------------------------
// n("(?iI)(?W:\\p{Word})", "\xc5\xbf"); // Test 1474
regex_error!(
    case_1474,
    "(?iI)(?W:\\p{Word})",
    r#"unrecognized flag"#,
    1474
);

// -------------------------------------------------------------------------
// n("(?iI)(?W:[\\p{Word}])", "\xc5\xbf");     // FAIL // Test 1475
regex_error!(
    case_1475,
    "(?iI)(?W:[\\p{Word}])",
    r#"unrecognized flag"#,
    1475
);

// -------------------------------------------------------------------------
// x2("(?iW:[[:word:]])",  "\xc5\xbf", 0, 2); // Test 1476
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:[\\p{Word}])", "\xc5\xbf", 0, 2); // Test 1477
regex_error!(case_1477, "(?iW:[\\p{Word}])", r#"unrecognized flag"#, 1477);

// -------------------------------------------------------------------------
// x2("(?iW:[\\w])",       "\xc5\xbf", 0, 2); // Test 1478
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?iW:\\p{Word})",    "\xc5\xbf"); // Test 1479
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?iW:\\w)",          "\xc5\xbf"); // Test 1480
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?i)\\p{Word}",     "\xc5\xbf", 0, 2); // Test 1481
// Unicode property not found

// -------------------------------------------------------------------------
// x2("(?i)\\w",           "\xc5\xbf", 0, 2); // Test 1482
scanner! { S1482 { mode M { token r#"(?i)\w"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?iW:[[:^word:]])",  "\xc5\xbf", 0, 2); // Test 1483
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:[\\P{Word}])",  "\xc5\xbf", 0, 2); // Test 1484
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:[\\W])",        "\xc5\xbf", 0, 2); // Test 1485
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:\\P{Word})",    "\xc5\xbf", 0, 2); // Test 1486
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:\\W)",          "\xc5\xbf", 0, 2); // Test 1487
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?i)\\P{Word}",      "\xc5\xbf"); // Test 1488
// Unicode property not found

// -------------------------------------------------------------------------
// n("(?i)\\W",            "\xc5\xbf"); // Test 1489
scanner! { S1489 { mode M { token r#"(?i)\W"# => 0; } } }

// -------------------------------------------------------------------------
// x2("(?iW:[[:^word:]])",  "s", 0, 1); // Test 1490
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:[\\P{Word}])",  "s", 0, 1); // Test 1491
// unrecognized flag

// -------------------------------------------------------------------------
// x2("(?iW:[\\W])",        "s", 0, 1); // Test 1492
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?iW:\\P{Word})",     "s"); // Test 1493
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?iW:\\W)",           "s"); // Test 1494
// unrecognized flag

// -------------------------------------------------------------------------
// n("(?i)\\P{Word}",       "s"); // Test 1495
// Unicode property not found

// -------------------------------------------------------------------------
// n("(?i)\\W",             "s"); // Test 1496
scan_test!(case_1496, s1496, S1496, r#"(?i)\W"#, "s", &[], 1496);

// -------------------------------------------------------------------------
// x2("[[:punct:]]", ":", 0, 1); // Test 1497
scan_test!(
    case_1497,
    s1497,
    S1497,
    r#"[[:punct:]]"#,
    ":",
    &[(":", 0, 1)],
    1497
);

// -------------------------------------------------------------------------
// x2("[[:punct:]]", "$", 0, 1); // Test 1498
scan_test!(
    case_1498,
    s1498,
    S1498,
    r#"[[:punct:]]"#,
    "$",
    &[("$", 0, 1)],
    1498
);

// -------------------------------------------------------------------------
// x2("[[:punct:]]+", "$+<=>^`|~", 0, 9); // Test 1499
scan_test!(
    case_1499,
    s1499,
    S1499,
    r#"[[:punct:]]+"#,
    "$+<=>^`|~",
    &[("$+<=>^`|~", 0, 9)],
    1499
);

// -------------------------------------------------------------------------
// n("[[:punct:]]", "a"); // Test 1500
scan_test!(case_1500, s1500, S1500, r#"[[:punct:]]"#, "a", &[], 1500);

// -------------------------------------------------------------------------
// n("[[:punct:]]", "7"); // Test 1501
scan_test!(case_1501, s1501, S1501, r#"[[:punct:]]"#, "7", &[], 1501);

// -------------------------------------------------------------------------
// *** Index error: x2("\\p{PosixPunct}+", "$¦", 0, 3); // Test 1502

// -------------------------------------------------------------------------
// x2("\\A.*\\R", "\n", 0, 1); // Test 1503
regex_error!(
    case_1503,
    "\\A.*\\R",
    r#"unrecognized escape sequence"#,
    1503
);

// -------------------------------------------------------------------------
// x2("\\A\\O*\\R", "\n", 0, 1); // Test 1504
regex_error!(
    case_1504,
    "\\A\\O*\\R",
    r#"unrecognized escape sequence"#,
    1504
);

// -------------------------------------------------------------------------
// x2("\\A\\n*\\R", "\n", 0, 1); // Test 1505
regex_error!(
    case_1505,
    "\\A\\n*\\R",
    r#"unrecognized escape sequence"#,
    1505
);

// -------------------------------------------------------------------------
// x2("\\A\\R*\\R", "\n", 0, 1); // Test 1506
regex_error!(
    case_1506,
    "\\A\\R*\\R",
    r#"unrecognized escape sequence"#,
    1506
);

// -------------------------------------------------------------------------
// x2("\\At*\\R", "\n", 0, 1); // Test 1507
regex_error!(
    case_1507,
    "\\At*\\R",
    r#"unrecognized escape sequence"#,
    1507
);

// -------------------------------------------------------------------------
// x2("\\A.{0,99}\\R", "\n", 0, 1); // Test 1508
regex_error!(
    case_1508,
    "\\A.{0,99}\\R",
    r#"unrecognized escape sequence"#,
    1508
);

// -------------------------------------------------------------------------
// x2("\\A\\O{0,99}\\R", "\n", 0, 1); // Test 1509
regex_error!(
    case_1509,
    "\\A\\O{0,99}\\R",
    r#"unrecognized escape sequence"#,
    1509
);

// -------------------------------------------------------------------------
// x2("\\A\\n{0,99}\\R", "\n", 0, 1); // Test 1510
regex_error!(
    case_1510,
    "\\A\\n{0,99}\\R",
    r#"unrecognized escape sequence"#,
    1510
);

// -------------------------------------------------------------------------
// x2("\\A\\R{0,99}\\R", "\n", 0, 1); // Test 1511
regex_error!(
    case_1511,
    "\\A\\R{0,99}\\R",
    r#"unrecognized escape sequence"#,
    1511
);

// -------------------------------------------------------------------------
// x2("\\At{0,99}\\R", "\n", 0, 1); // Test 1512
regex_error!(
    case_1512,
    "\\At{0,99}\\R",
    r#"unrecognized escape sequence"#,
    1512
);

// -------------------------------------------------------------------------
// x2("\\A.*\\n", "\n", 0, 1);       //  \n // Test 1513
regex_error!(case_1513, "\\A.*\\n", r#"StartLine Look(Start)"#, 1513);

// -------------------------------------------------------------------------
// x2("\\A.{0,99}\\n", "\n", 0, 1); // Test 1514
regex_error!(case_1514, "\\A.{0,99}\\n", r#"StartLine Look(Start)"#, 1514);

// -------------------------------------------------------------------------
// x2("\\A.*\\O", "\n", 0, 1);       //  \O // Test 1515
regex_error!(
    case_1515,
    "\\A.*\\O",
    r#"unrecognized escape sequence"#,
    1515
);

// -------------------------------------------------------------------------
// x2("\\A.{0,99}\\O", "\n", 0, 1); // Test 1516
regex_error!(
    case_1516,
    "\\A.{0,99}\\O",
    r#"unrecognized escape sequence"#,
    1516
);

// -------------------------------------------------------------------------
// x2("\\A.*\\s", "\n", 0, 1);       //  \s // Test 1517
regex_error!(case_1517, "\\A.*\\s", r#"StartLine Look(Start)"#, 1517);

// -------------------------------------------------------------------------
// x2("\\A.{0,99}\\s", "\n", 0, 1); // Test 1518
regex_error!(case_1518, "\\A.{0,99}\\s", r#"StartLine Look(Start)"#, 1518);

// -------------------------------------------------------------------------
// n("a(b|)+d", "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcd"); /* https://www.haijin-boys.com/discussions/5079 */ // Test 1519
scan_test!(
    case_1519,
    s1519,
    S1519,
    r#"a(b|)+d"#,
    "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcd",
    &[],
    1519
);

// -------------------------------------------------------------------------
// e("   \xfd", "", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77370 */ // Test 1520

// -------------------------------------------------------------------------
// e("()0\\xfc00000\\xfc00000\\xfc00000\xfc", "", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77371 */ // Test 1521

// -------------------------------------------------------------------------
// e("000||0\xfa", "0", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77381 */ // Test 1522

// -------------------------------------------------------------------------
// e("(?i)000000000000000000000\xf0", "", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77382 */ // Test 1523

// -------------------------------------------------------------------------
// e("0000\\\xf5", "0", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77385 */ // Test 1524

// -------------------------------------------------------------------------
// e("(?i)FFF00000000000000000\xfd", "", ONIGERR_INVALID_CODE_POINT_VALUE); /* https://bugs.php.net/bug.php?id=77394 */ // Test 1525

// -------------------------------------------------------------------------
// n("(?x)\n  (?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))", "    while (i < len && f(array[i]))"); /* Issue #192 */ // Test 1526
regex_error!(
    case_1526,
    "(?x)\n  (?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
    r#"look-around, including look-ahead and look-behind, is not supported"#,
    1526
);

// -------------------------------------------------------------------------
// *** Index error: x2("aaaaaaaaaaaaaaaaaaaaaaaあb", "aaaaaaaaaaaaaaaaaaaaaaaあb", 0, 27); /* Issue #221 */ // Test 1527

// -------------------------------------------------------------------------
// n("d{65538}+{61533} ", "d{65538}+{61533} "); // Test 1528

// PERFORMANCE!!! TODO: Check repetition count limits in the scanner.

// -------------------------------------------------------------------------
// e("x{55380}{77590}", "", ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE); // Test 1529

// -------------------------------------------------------------------------
// e("(xyz){40000}{99999}(?<name>vv)", "", ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE); // Test 1530

// -------------------------------------------------------------------------
// e("f{90000,90000}{80000,80000}", "", ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE); // Test 1531

// -------------------------------------------------------------------------
// n("f{90000,90000}{80000,80001}", ""); // Test 1532

// -------------------------------------------------------------------------
// x2("\\p{Common}", "\xe3\x8b\xbf", 0, 3);   /* U+32FF */ // Test 1533
scanner! { S1533 { mode M { token r#"\p{Common}"# => 0; } } }

// -------------------------------------------------------------------------
// x2("\\p{In_Enclosed_CJK_Letters_and_Months}", "\xe3\x8b\xbf", 0, 3); /* U+32FF */ // Test 1534
regex_error!(
    case_1534,
    "\\p{In_Enclosed_CJK_Letters_and_Months}",
    r#"Unicode property not found"#,
    1534
);

// -------------------------------------------------------------------------
// e("\\x{7fffffff}", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1535

// -------------------------------------------------------------------------
// e("[\\x{7fffffff}]", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1536

// -------------------------------------------------------------------------
// e("\\u040", "@", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1537

// -------------------------------------------------------------------------
// e("\\u", "", ONIGERR_INVALID_CODE_POINT_VALUE); // Test 1538

// -------------------------------------------------------------------------
// e("(?<abc>\\g<abc>)", "zzzz", ONIGERR_NEVER_ENDING_RECURSION); // Test 1539

// -------------------------------------------------------------------------
// e("(*FOO)", "abcdefg", ONIGERR_UNDEFINED_CALLOUT_NAME); // Test 1540

// -------------------------------------------------------------------------
// e("*", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1541

// -------------------------------------------------------------------------
// e("|*", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1542

// -------------------------------------------------------------------------
// e("(?i)*", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1543

// -------------------------------------------------------------------------
// e("(?:*)", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1544

// -------------------------------------------------------------------------
// e("(?m:*)", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1545

// -------------------------------------------------------------------------
// x2("(?:)*", "abc", 0, 0); // Test 1546
scan_test!(case_1546, s1546, S1546, r#"(?:)*"#, "abc", &[], 1546);

// -------------------------------------------------------------------------
// e("^*", "abc", ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID); // Test 1547

// -------------------------------------------------------------------------
// e("abc|?", "", ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED); // Test 1548
